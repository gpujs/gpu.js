{"version":3,"file":"gpu-browser-core.min.js","sources":["../node_modules/gpu-mock.js/index.js","../src/common.js","../src/input.js","../src/texture.js","../src/utils.js","../src/backend/kernel.js","../src/backend/function-builder.js","../src/backend/function-tracer.js","../src/backend/function-node.js","../src/backend/cpu/function-node.js","../src/backend/cpu/kernel-string.js","../src/backend/cpu/kernel.js","../src/backend/gl/texture/float.js","../src/backend/gl/texture/array-2-float.js","../src/backend/gl/texture/array-2-float-2d.js","../src/backend/gl/texture/array-2-float-3d.js","../src/backend/gl/texture/array-3-float.js","../src/backend/gl/texture/array-3-float-2d.js","../src/backend/gl/texture/array-3-float-3d.js","../src/backend/gl/texture/array-4-float.js","../src/backend/gl/texture/array-4-float-2d.js","../src/backend/gl/texture/array-4-float-3d.js","../src/backend/gl/texture/float-2d.js","../src/backend/gl/texture/float-3d.js","../src/backend/gl/texture/memory-optimized.js","../src/backend/gl/texture/memory-optimized-2d.js","../src/backend/gl/texture/memory-optimized-3d.js","../src/backend/gl/texture/unsigned.js","../src/backend/gl/texture/unsigned-2d.js","../src/backend/gl/texture/unsigned-3d.js","../src/backend/gl/texture/graphical.js","../src/backend/gl/kernel.js","../src/backend/web-gl/function-node.js","../src/plugins/triangle-noise.js","../src/backend/web-gl/fragment-shader.js","../src/backend/web-gl/vertex-shader.js","../node_modules/gl-wiretap/index.js","../src/backend/gl/kernel-string.js","../src/backend/kernel-value.js","../src/backend/web-gl/kernel-value/index.js","../src/backend/web-gl/kernel-value/boolean.js","../src/backend/web-gl/kernel-value/float.js","../src/backend/web-gl/kernel-value/integer.js","../src/backend/web-gl/kernel-value/html-image.js","../src/backend/web-gl/kernel-value/dynamic-html-image.js","../src/backend/web-gl/kernel-value/html-video.js","../src/backend/web-gl/kernel-value/dynamic-html-video.js","../src/backend/web-gl/kernel-value/single-input.js","../src/backend/web-gl/kernel-value/unsigned-input.js","../src/backend/web-gl/kernel-value/dynamic-unsigned-input.js","../src/backend/web-gl/kernel-value/memory-optimized-number-texture.js","../src/backend/web-gl/kernel-value/dynamic-memory-optimized-number-texture.js","../src/backend/web-gl/kernel-value/number-texture.js","../src/backend/web-gl/kernel-value/dynamic-number-texture.js","../src/backend/web-gl/kernel-value/single-array.js","../src/backend/web-gl/kernel-value/single-array1d-i.js","../src/backend/web-gl/kernel-value/dynamic-single-array1d-i.js","../src/backend/web-gl/kernel-value/single-array2d-i.js","../src/backend/web-gl/kernel-value/dynamic-single-array2d-i.js","../src/backend/web-gl/kernel-value/single-array3d-i.js","../src/backend/web-gl/kernel-value/dynamic-single-array3d-i.js","../src/backend/web-gl/kernel-value/single-array2.js","../src/backend/web-gl/kernel-value/single-array3.js","../src/backend/web-gl/kernel-value/single-array4.js","../src/backend/web-gl/kernel-value/unsigned-array.js","../src/backend/web-gl/kernel-value/dynamic-unsigned-array.js","../src/backend/web-gl/kernel-value-maps.js","../src/backend/web-gl/kernel-value/dynamic-single-array.js","../src/backend/web-gl/kernel-value/dynamic-single-input.js","../src/backend/web-gl/kernel.js","../src/backend/web-gl2/function-node.js","../src/backend/web-gl2/fragment-shader.js","../src/backend/web-gl2/vertex-shader.js","../src/backend/web-gl2/kernel-value/boolean.js","../src/backend/web-gl2/kernel-value/float.js","../src/backend/web-gl2/kernel-value/integer.js","../src/backend/web-gl2/kernel-value/html-image.js","../src/backend/web-gl2/kernel-value/dynamic-html-image.js","../src/backend/web-gl2/kernel-value/html-image-array.js","../src/backend/web-gl2/kernel-value/dynamic-html-image-array.js","../src/backend/web-gl2/kernel-value/html-video.js","../src/backend/web-gl2/kernel-value/dynamic-html-video.js","../src/backend/web-gl2/kernel-value/single-input.js","../src/backend/web-gl2/kernel-value/dynamic-memory-optimized-number-texture.js","../src/backend/web-gl2/kernel-value/number-texture.js","../src/backend/web-gl2/kernel-value/dynamic-number-texture.js","../src/backend/web-gl2/kernel-value/single-array.js","../src/backend/web-gl2/kernel-value/single-array1d-i.js","../src/backend/web-gl2/kernel-value/dynamic-single-array1d-i.js","../src/backend/web-gl2/kernel-value/single-array2d-i.js","../src/backend/web-gl2/kernel-value/dynamic-single-array2d-i.js","../src/backend/web-gl2/kernel-value/single-array3d-i.js","../src/backend/web-gl2/kernel-value/dynamic-single-array3d-i.js","../src/backend/web-gl2/kernel-value/single-array2.js","../src/backend/web-gl2/kernel-value/single-array3.js","../src/backend/web-gl2/kernel-value/single-array4.js","../src/backend/web-gl2/kernel-value-maps.js","../src/backend/web-gl2/kernel-value/dynamic-unsigned-array.js","../src/backend/web-gl2/kernel-value/dynamic-unsigned-input.js","../src/backend/web-gl2/kernel-value/unsigned-array.js","../src/backend/web-gl2/kernel-value/unsigned-input.js","../src/backend/web-gl2/kernel-value/dynamic-single-array.js","../src/backend/web-gl2/kernel-value/dynamic-single-input.js","../src/backend/web-gl2/kernel-value/memory-optimized-number-texture.js","../src/backend/web-gl2/kernel.js","../src/kernel-run-shortcut.js","../src/base-gpu.js","../src/browser.js","../src/alias.js"],"sourcesContent":["function setupArguments(args) {\n  const newArguments = new Array(args.length);\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    if (arg.toArray) {\n      newArguments[i] = arg.toArray();\n    } else {\n      newArguments[i] = arg;\n    }\n  }\n  return newArguments;\n}\n\nfunction mock1D() {\n  const args = setupArguments(arguments);\n  const row = new Float32Array(this.output.x);\n  for (let x = 0; x < this.output.x; x++) {\n    this.thread.x = x;\n    this.thread.y = 0;\n    this.thread.z = 0;\n    row[x] = this._fn.apply(this, args);\n  }\n  return row;\n}\n\nfunction mock2D() {\n  const args = setupArguments(arguments);\n  const matrix = new Array(this.output.y);\n  for (let y = 0; y < this.output.y; y++) {\n    const row = new Float32Array(this.output.x);\n    for (let x = 0; x < this.output.x; x++) {\n      this.thread.x = x;\n      this.thread.y = y;\n      this.thread.z = 0;\n      row[x] = this._fn.apply(this, args);\n    }\n    matrix[y] = row;\n  }\n  return matrix;\n}\n\nfunction mock2DGraphical() {\n  const args = setupArguments(arguments);\n  for (let y = 0; y < this.output.y; y++) {\n    for (let x = 0; x < this.output.x; x++) {\n      this.thread.x = x;\n      this.thread.y = y;\n      this.thread.z = 0;\n      this._fn.apply(this, args);\n    }\n  }\n}\n\nfunction mock3D() {\n  const args = setupArguments(arguments);\n  const cube = new Array(this.output.z);\n  for (let z = 0; z < this.output.z; z++) {\n    const matrix = new Array(this.output.y);\n    for (let y = 0; y < this.output.y; y++) {\n      const row = new Float32Array(this.output.x);\n      for (let x = 0; x < this.output.x; x++) {\n        this.thread.x = x;\n        this.thread.y = y;\n        this.thread.z = z;\n        row[x] = this._fn.apply(this, args);\n      }\n      matrix[y] = row;\n    }\n    cube[z] = matrix;\n  }\n  return cube;\n}\n\nfunction apiDecorate(kernel) {\n  kernel.setOutput = (output) => {\n    kernel.output = setupOutput(output);\n    if (kernel.graphical) {\n      setupGraphical(kernel);\n    }\n  };\n  kernel.toJSON = () => {\n    throw new Error('Not usable with gpuMock');\n  };\n  kernel.setConstants = (flag) => {\n    kernel.constants = flag;\n    return kernel;\n  };\n  kernel.setGraphical = (flag) => {\n    kernel.graphical = flag;\n    return kernel;\n  };\n  kernel.setCanvas = (flag) => {\n    kernel.canvas = flag;\n    return kernel;\n  };\n  kernel.setContext = (flag) => {\n    kernel.context = flag;\n    return kernel;\n  };\n  kernel.exec = function() {\n    return new Promise((resolve, reject) => {\n      try {\n        resolve(kernel.apply(kernel, arguments));\n      } catch(e) {\n        reject(e);\n      }\n    });\n  };\n  kernel.getPixels = (flip) => {\n    const {x, y} = kernel.output;\n    // cpu is not flipped by default\n    return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);\n  };\n  kernel.color = function(r, g, b, a) {\n    if (typeof a === 'undefined') {\n      a = 1;\n    }\n\n    r = Math.floor(r * 255);\n    g = Math.floor(g * 255);\n    b = Math.floor(b * 255);\n    a = Math.floor(a * 255);\n\n    const width = kernel.output.x;\n    const height = kernel.output.y;\n\n    const x = kernel.thread.x;\n    const y = height - kernel.thread.y - 1;\n\n    const index = x + y * width;\n\n    kernel._colorData[index * 4 + 0] = r;\n    kernel._colorData[index * 4 + 1] = g;\n    kernel._colorData[index * 4 + 2] = b;\n    kernel._colorData[index * 4 + 3] = a;\n  };\n\n  // these are added for api compatibility, but have no affect\n  kernel.setWarnVarUsage = () => {\n    return kernel;\n  };\n  kernel.setOptimizeFloatMemory = () => {\n    return kernel;\n  };\n  kernel.setArgumentTypes = () => {\n    return kernel;\n  };\n  kernel.setDebug = () => {\n    return kernel;\n  };\n  kernel.setLoopMaxIterations = () => {\n    return kernel;\n  };\n  kernel.setPipeline = () => {\n    return kernel;\n  };\n  kernel.setPrecision = () => {\n    return kernel;\n  };\n  kernel.setImmutable = () => {\n    return kernel;\n  };\n  kernel.setFunctions = () => {\n    return kernel;\n  };\n  kernel.addSubKernel = () => {\n    return kernel;\n  };\n  kernel.destroy = () => {};\n  kernel.validateSettings = () => {};\n  if (kernel.graphical && kernel.output) {\n    setupGraphical(kernel);\n  }\n  return kernel;\n}\n\nfunction setupGraphical(kernel) {\n  const {x, y} = kernel.output;\n  if (kernel.context && kernel.context.createImageData) {\n    const data = new Uint8ClampedArray(x * y * 4);\n    kernel._imageData = kernel.context.createImageData(x, y);\n    kernel._colorData = data;\n  } else {\n    const data = new Uint8ClampedArray(x * y * 4);\n    kernel._imageData = { data };\n    kernel._colorData = data;\n  }\n}\n\nfunction setupOutput(output) {\n  let result = null;\n  if (output.length) {\n    if (output.length === 3) {\n      const [x,y,z] = output;\n      result = { x, y, z };\n    } else if (output.length === 2) {\n      const [x,y] = output;\n      result = { x, y };\n    } else {\n      const [x] = output;\n      result = { x };\n    }\n  } else {\n    result = output;\n  }\n  return result;\n}\n\nfunction gpuMock(fn, settings = {}) {\n  const output = settings.output ? setupOutput(settings.output) : null;\n  function kernel() {\n    if (kernel.output.z) {\n      return mock3D.apply(kernel, arguments);\n    } else if (kernel.output.y) {\n      if (kernel.graphical) {\n        return mock2DGraphical.apply(kernel, arguments);\n      }\n      return mock2D.apply(kernel, arguments);\n    } else {\n      return mock1D.apply(kernel, arguments);\n    }\n  }\n  kernel._fn = fn;\n  kernel.constants = settings.constants || null;\n  kernel.context = settings.context || null;\n  kernel.canvas = settings.canvas || null;\n  kernel.graphical = settings.graphical || false;\n  kernel._imageData = null;\n  kernel._colorData = null;\n  kernel.output = output;\n  kernel.thread = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n  return apiDecorate(kernel);\n}\n\nfunction flipPixels(pixels, width, height) {\n  // https://stackoverflow.com/a/41973289/1324039\n  const halfHeight = height / 2 | 0; // the | 0 keeps the result an int\n  const bytesPerRow = width * 4;\n  // make a temp buffer to hold one row\n  const temp = new Uint8ClampedArray(width * 4);\n  const result = pixels.slice(0);\n  for (let y = 0; y < halfHeight; ++y) {\n    const topOffset = y * bytesPerRow;\n    const bottomOffset = (height - y - 1) * bytesPerRow;\n\n    // make copy of a row on the top half\n    temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\n\n    // copy a row from the bottom half to the top\n    result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n\n    // copy the copy of the top half row to the bottom half\n    result.set(temp, bottomOffset);\n  }\n  return result;\n}\n\nmodule.exports = {\n  gpuMock\n};\n","/**\r\n * @fileoverview Branch of utils to prevent circular dependencies.\r\n */\r\n\r\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\r\nconst FUNCTION_NAME = /function ([^(]*)/;\r\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\r\n\r\n/**\r\n * @descReturn TRUE, on a JS function\r\n * @param {Function} funcObj - Object to validate if its a function\r\n * @returns  {Boolean} TRUE if the object is a JS function\r\n */\r\nexport function isFunction(funcObj) {\r\n  return typeof(funcObj) === 'function';\r\n};\r\n\r\n/**\r\n * @desc Return the function name from a JS function string\r\n * @param {String} funcStr - String of JS function to validate\r\n * @returns {String} Function name string (if found)\r\n */\r\nexport function getFunctionNameFromString(funcStr) {\r\n  return FUNCTION_NAME.exec(funcStr)[1].trim();\r\n};\r\n\r\n/**\r\n *\r\n * @param {String|Function} source\r\n * @param {IFunctionSettings} [settings]\r\n * @returns {IFunction}\r\n */\r\nexport function functionToIFunction(source, settings) {\r\n  settings = settings || {};\r\n  if (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');\r\n  const sourceString = typeof source === 'string' ? source : source.toString();\r\n\r\n  let argumentTypes = [];\r\n\r\n  if (Array.isArray(settings.argumentTypes)) {\r\n    argumentTypes = settings.argumentTypes;\r\n  } else if (typeof settings.argumentTypes === 'object') {\r\n    argumentTypes = getArgumentNamesFromString(sourceString)\r\n      .map(name => settings.argumentTypes[name]) || [];\r\n  } else {\r\n    argumentTypes = settings.argumentTypes || [];\r\n  }\r\n\r\n  return {\r\n    source: sourceString,\r\n    argumentTypes,\r\n    returnType: settings.returnType || null,\r\n  };\r\n};\r\n\r\nexport function warnDeprecated(type, oldName, newName) {\r\n  const msg = newName\r\n    ? `It has been replaced with \"${ newName }\"`\r\n    : 'It has been removed';\r\n  console.warn(`You are using a deprecated ${ type } \"${ oldName }\". ${msg}. Fixing, but please upgrade as it will soon be removed.`)\r\n};\r\n\r\n/**\r\n * @desc Return TRUE, on a valid JS function string\r\n * Note: This does just a VERY simply sanity check. And may give false positives.\r\n *\r\n * @param {String} fn - String of JS function to validate\r\n * @returns {Boolean} TRUE if the string passes basic validation\r\n */\r\nexport function isFunctionString(fn) {\r\n  if (typeof fn === 'string') {\r\n    return (fn\r\n      .slice(0, 'function'.length)\r\n      .toLowerCase() === 'function');\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * @desc Return list of argument names extracted from a javascript function\r\n * @param {String} fn - String of JS function to validate\r\n * @returns {String[]}  Array representing all the parameter names\r\n */\r\nexport function getArgumentNamesFromString(fn) {\r\n  const fnStr = fn.replace(STRIP_COMMENTS, '');\r\n  let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\r\n  if (result === null) {\r\n    result = [];\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @desc Checks if is an array or Array-like object\r\n * @param {Object} array - The argument object to check if is array\r\n * @returns {Boolean}  true if is array or Array-like object\r\n */\r\nexport function isArray(array) {\r\n  return !isNaN(array.length);\r\n};\r\n\r\nexport function erectMemoryOptimized2DFloat(array, width, height) {\r\n  const yResults = new Array(height);\r\n  for (let y = 0; y < height; y++) {\r\n    const offset = y * width;\r\n    yResults[y] = array.subarray(offset, offset + width);\r\n  }\r\n  return yResults;\r\n};\r\n\r\nexport function erectMemoryOptimized3DFloat(array, width, height, depth) {\r\n  const zResults = new Array(depth);\r\n  for (let z = 0; z < depth; z++) {\r\n    const yResults = new Array(height);\r\n    for (let y = 0; y < height; y++) {\r\n      const offset = (z * height * width) + (y * width);\r\n      yResults[y] = array.subarray(offset, offset + width);\r\n    }\r\n    zResults[z] = yResults;\r\n  }\r\n  return zResults;\r\n};\r\n\r\nexport function getAstString(source, ast) {\r\n  const lines = Array.isArray(source) ? source : source.split(/\\r?\\n/g);\r\n  const start = ast.loc.start;\r\n  const end = ast.loc.end;\r\n  const result = [];\r\n  if (start.line === end.line) {\r\n    result.push(lines[start.line - 1].substring(start.column, end.column));\r\n  } else {\r\n    result.push(lines[start.line - 1].slice(start.column));\r\n    for (let i = start.line; i < end.line; i++) {\r\n      result.push(lines[i]);\r\n    }\r\n    result.push(lines[end.line - 1].slice(0, end.column));\r\n  }\r\n  return result.join('\\n');\r\n};\r\n","import { erectMemoryOptimized2DFloat, erectMemoryOptimized3DFloat } from './common';\r\n\r\nexport class Input {\r\n  constructor(value, size) {\r\n    this.value = value;\r\n    if (Array.isArray(size)) {\r\n      this.size = size;\r\n    } else {\r\n      this.size = new Int32Array(3);\r\n      if (size.z) {\r\n        this.size = new Int32Array([size.x, size.y, size.z]);\r\n      } else if (size.y) {\r\n        this.size = new Int32Array([size.x, size.y]);\r\n      } else {\r\n        this.size = new Int32Array([size.x]);\r\n      }\r\n    }\r\n\r\n    const [w, h, d] = this.size;\r\n    if (d) {\r\n      if (this.value.length !== (w * h * d)) {\r\n        throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} * ${d} = ${(h * w * d)}`);\r\n      }\r\n    } else if (h) {\r\n      if (this.value.length !== (w * h)) {\r\n        throw new Error(`Input size ${this.value.length} does not match ${w} * ${h} = ${(h * w)}`);\r\n      }\r\n    } else {\r\n      if (this.value.length !== w) {\r\n        throw new Error(`Input size ${this.value.length} does not match ${w}`);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  toArray() {\r\n    const [ w, h, d ] = this.size;\r\n    if (d) {\r\n      return erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);\r\n    } else if (h) {\r\n      return erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);\r\n    } else {\r\n      return this.value;\r\n    }\r\n  }\r\n};\r\n\r\nexport function input(value, size) {\r\n  return new Input(value, size);\r\n};\r\n","/**\r\n * @desc WebGl Texture implementation in JS\r\n * @param {ITextureSettings} settings\r\n */\r\nexport class Texture {\r\n  constructor(settings) {\r\n    const {\r\n      texture,\r\n      size,\r\n      dimensions,\r\n      output,\r\n      context,\r\n      type = 'NumberTexture',\r\n    } = settings;\r\n    if (!output) throw new Error('settings property \"output\" required.');\r\n    if (!context) throw new Error('settings property \"context\" required.');\r\n    this.texture = texture;\r\n    this.size = size;\r\n    this.dimensions = dimensions;\r\n    this.output = output;\r\n    this.context = context;\r\n    this.kernel = null;\r\n    this.type = type;\r\n  }\r\n\r\n  /**\r\n   * @desc Converts the Texture into a JavaScript Array\r\n   * @returns {Number[]|Number[][]|Number[][][]}\r\n   */\r\n  toArray() {\r\n    throw new Error(`Not implemented on ${this.constructor.name}`);\r\n  }\r\n\r\n  /**\r\n   * @desc Deletes the Texture\r\n   */\r\n  delete() {\r\n    return this.context.deleteTexture(this.texture);\r\n  }\r\n};\r\n","import { parse } from 'acorn';\r\nimport { Texture } from './texture';\r\nimport { Input } from './input';\r\nimport {\r\n  getAstString,\r\n  erectMemoryOptimized2DFloat,\r\n  erectMemoryOptimized3DFloat,\r\n  functionToIFunction,\r\n  getArgumentNamesFromString,\r\n  getFunctionNameFromString,\r\n  isArray,\r\n  isFunction,\r\n  isFunctionString,\r\n  warnDeprecated\r\n} from './common';\r\n\r\nexport function getSystemEndianness() {\r\n  const b = new ArrayBuffer(4);\r\n  const a = new Uint32Array(b);\r\n  const c = new Uint8Array(b);\r\n  a[0] = 0xdeadbeef;\r\n  if (c[0] === 0xef) return 'LE';\r\n  if (c[0] === 0xde) return 'BE';\r\n  throw new Error('unknown endianness');\r\n};\r\n\r\nconst _systemEndianness = getSystemEndianness();\r\n\r\n/**\r\n *\r\n * @desc Gets the system endianness, and cache it\r\n * @returns {String} 'LE' or 'BE' depending on system architecture\r\n * Credit: https://gist.github.com/TooTallNate/4750953\r\n */\r\nexport function systemEndianness() {\r\n  return _systemEndianness;\r\n};\r\n\r\n/**\r\n * @desc Evaluate the argument type, to apply respective logic for it\r\n * @param {Object} value - The argument object to evaluate type\r\n * @returns {String}  Argument type Array/Number/Float/Texture/Unknown\r\n */\r\nexport function getVariableType(value, strictIntegers) {\r\n  if (isArray(value)) {\r\n    if (value[0].nodeName === 'IMG') {\r\n      return 'HTMLImageArray';\r\n    }\r\n    return 'Array';\r\n  }\r\n\r\n  switch (value.constructor) {\r\n    case Boolean:\r\n      return 'Boolean';\r\n    case Number:\r\n      return strictIntegers && Number.isInteger(value) ? 'Integer' : 'Float';\r\n    case Texture:\r\n      return value.type;\r\n    case Input:\r\n      return 'Input';\r\n  }\r\n\r\n  switch (value.nodeName) {\r\n    case 'IMG':\r\n      return 'HTMLImage';\r\n    case 'VIDEO':\r\n      return 'HTMLVideo';\r\n  }\r\n\r\n  return value.hasOwnProperty('type') ? value.type : 'Unknown';\r\n};\r\n\r\n/**\r\n * @desc Various utility functions / snippets of code that GPU.JS uses internally.\r\n * This covers various snippets of code that is not entirely gpu.js specific (ie. may find uses elsewhere)\r\n */\r\nconst utils = {\r\n  systemEndianness,\r\n  getSystemEndianness,\r\n  isFunction,\r\n  isFunctionString,\r\n  getFunctionNameFromString,\r\n\r\n  getFunctionBodyFromString(funcStr) {\r\n    return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));\r\n  },\r\n\r\n  getArgumentNamesFromString,\r\n\r\n  /**\r\n   * @desc Returns a clone\r\n   * @param {Object} obj - Object to clone\r\n   * @returns {Object|Array} Cloned object\r\n   */\r\n  clone(obj) {\r\n    if (obj === null || typeof obj !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;\r\n\r\n    const temp = obj.constructor(); // changed\r\n\r\n    for (let key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        obj.isActiveClone = null;\r\n        temp[key] = utils.clone(obj[key]);\r\n        delete obj.isActiveClone;\r\n      }\r\n    }\r\n\r\n    return temp;\r\n  },\r\n\r\n  isArray,\r\n  getVariableType,\r\n\r\n  getKernelTextureSize(settings, dimensions) {\r\n    let [w, h, d] = dimensions;\r\n    let texelCount = (w || 1) * (h || 1) * (d || 1);\r\n\r\n    if (settings.optimizeFloatMemory && settings.precision === 'single') {\r\n      w = texelCount = Math.ceil(texelCount / 4);\r\n    }\r\n    // if given dimensions == a 2d image\r\n    if (h > 1 && w * h === texelCount) {\r\n      return new Int32Array([w, h]);\r\n    }\r\n    return utils.closestSquareDimensions(texelCount);\r\n  },\r\n\r\n  /**\r\n   *\r\n   * @param {Number} length\r\n   * @returns {TextureDimensions}\r\n   */\r\n  closestSquareDimensions(length) {\r\n    const sqrt = Math.sqrt(length);\r\n    let high = Math.ceil(sqrt);\r\n    let low = Math.floor(sqrt);\r\n    while (high * low < length) {\r\n      high--;\r\n      low = Math.ceil(length / high);\r\n    }\r\n    return new Int32Array([low, Math.ceil(length / low)]);\r\n  },\r\n\r\n  /**\r\n   * A texture takes up four\r\n   * @param {OutputDimensions} dimensions\r\n   * @param {Number} bitRatio\r\n   * @returns {TextureDimensions}\r\n   */\r\n  getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {\r\n    const totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);\r\n    const texelCount = totalArea / bitRatio;\r\n    return utils.closestSquareDimensions(texelCount);\r\n  },\r\n\r\n  /**\r\n   *\r\n   * @param dimensions\r\n   * @param bitRatio\r\n   * @returns {*|TextureDimensions}\r\n   */\r\n  getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {\r\n    const [w, h, d] = dimensions;\r\n    const totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);\r\n    const texelCount = totalArea / (4 / bitRatio);\r\n    return utils.closestSquareDimensions(texelCount);\r\n  },\r\n\r\n  roundTo(n, d) {\r\n    return Math.floor((n + d - 1) / d) * d;\r\n  },\r\n  /**\r\n   * @desc Return the dimension of an array.\r\n   * @param {Array|String|Texture|Input} x - The array\r\n   * @param {Boolean} [pad] - To include padding in the dimension calculation\r\n   * @returns {OutputDimensions}\r\n   */\r\n  getDimensions(x, pad) {\r\n    let ret;\r\n    if (isArray(x)) {\r\n      const dim = [];\r\n      let temp = x;\r\n      while (isArray(temp)) {\r\n        dim.push(temp.length);\r\n        temp = temp[0];\r\n      }\r\n      ret = dim.reverse();\r\n    } else if (x instanceof Texture) {\r\n      ret = x.output;\r\n    } else if (x instanceof Input) {\r\n      ret = x.size;\r\n    } else {\r\n      throw new Error(`Unknown dimensions of ${x}`);\r\n    }\r\n\r\n    if (pad) {\r\n      ret = Array.from(ret);\r\n      while (ret.length < 3) {\r\n        ret.push(1);\r\n      }\r\n    }\r\n\r\n    return new Int32Array(ret);\r\n  },\r\n\r\n  /**\r\n   * Puts a nested 2d array into a one-dimensional target array\r\n   * @param {Array|*} array\r\n   * @param {Float32Array|Float64Array} target\r\n   */\r\n  flatten2dArrayTo(array, target) {\r\n    let offset = 0;\r\n    for (let y = 0; y < array.length; y++) {\r\n      target.set(array[y], offset);\r\n      offset += array[y].length;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Puts a nested 3d array into a one-dimensional target array\r\n   * @param {Array|*} array\r\n   * @param {Float32Array|Float64Array} target\r\n   */\r\n  flatten3dArrayTo(array, target) {\r\n    let offset = 0;\r\n    for (let z = 0; z < array.length; z++) {\r\n      for (let y = 0; y < array[z].length; y++) {\r\n        target.set(array[z][y], offset);\r\n        offset += array[z][y].length;\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Puts a nested 4d array into a one-dimensional target array\r\n   * @param {Array|*} array\r\n   * @param {Float32Array|Float64Array} target\r\n   */\r\n  flatten4dArrayTo(array, target) {\r\n    let offset = 0;\r\n    for (let l = 0; l < array.length; l++) {\r\n      for (let z = 0; z < array[l].length; z++) {\r\n        for (let y = 0; y < array[l][z].length; y++) {\r\n          target.set(array[l][z][y], offset);\r\n          offset += array[l][z][y].length;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Puts a nested 1d, 2d, or 3d array into a one-dimensional target array\r\n   * @param {Float32Array|Uint16Array|Uint8Array} array\r\n   * @param {Float32Array} target\r\n   */\r\n  flattenTo(array, target) {\r\n    if (isArray(array[0])) {\r\n      if (isArray(array[0][0])) {\r\n        if (isArray(array[0][0][0])) {\r\n          utils.flatten4dArrayTo(array, target);\r\n        } else {\r\n          utils.flatten3dArrayTo(array, target);\r\n        }\r\n      } else {\r\n        utils.flatten2dArrayTo(array, target);\r\n      }\r\n    } else {\r\n      target.set(array);\r\n    }\r\n  },\r\n\r\n  /**\r\n   *\r\n   * @desc Splits an array into smaller arrays.\r\n   * Number of elements in one small chunk is given by `part`\r\n   *\r\n   * @param {Number[]} array - The array to split into chunks\r\n   * @param {Number} part - elements in one chunk\r\n   *\r\n   * @returns {Number[]} An array of smaller chunks\r\n   */\r\n  splitArray(array, part) {\r\n    const result = [];\r\n    for (let i = 0; i < array.length; i += part) {\r\n      result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));\r\n    }\r\n    return result;\r\n  },\r\n\r\n  getAstString,\r\n\r\n  allPropertiesOf(obj) {\r\n    const props = [];\r\n\r\n    do {\r\n      props.push.apply(props, Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props;\r\n  },\r\n\r\n  /**\r\n   * @param {Array} lines - An Array of strings\r\n   * @returns {String} Single combined String, separated by *\\n*\r\n   */\r\n  linesToString(lines) {\r\n    if (lines.length > 0) {\r\n      return lines.join(';\\n') + ';\\n';\r\n    } else {\r\n      return '\\n';\r\n    }\r\n  },\r\n\r\n  warnDeprecated,\r\n  functionToIFunction,\r\n\r\n  flipPixels(pixels, width, height) {\r\n    // https://stackoverflow.com/a/41973289/1324039\r\n    const halfHeight = height / 2 | 0; // the | 0 keeps the result an int\r\n    const bytesPerRow = width * 4;\r\n    // make a temp buffer to hold one row\r\n    const temp = new Uint8ClampedArray(width * 4);\r\n    const result = pixels.slice(0);\r\n    for (let y = 0; y < halfHeight; ++y) {\r\n      const topOffset = y * bytesPerRow;\r\n      const bottomOffset = (height - y - 1) * bytesPerRow;\r\n\r\n      // make copy of a row on the top half\r\n      temp.set(result.subarray(topOffset, topOffset + bytesPerRow));\r\n\r\n      // copy a row from the bottom half to the top\r\n      result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\r\n\r\n      // copy the copy of the top half row to the bottom half\r\n      result.set(temp, bottomOffset);\r\n    }\r\n    return result;\r\n  },\r\n\r\n  erectPackedFloat: (array, width) => {\r\n    return array.subarray(0, width);\r\n  },\r\n  erect2DPackedFloat: (array, width, height) => {\r\n    const yResults = new Array(height);\r\n    for (let y = 0; y < height; y++) {\r\n      const xStart = y * width;\r\n      const xEnd = xStart + width;\r\n      yResults[y] = array.subarray(xStart, xEnd);\r\n    }\r\n    return yResults;\r\n  },\r\n  erect3DPackedFloat: (array, width, height, depth) => {\r\n    const zResults = new Array(depth);\r\n    for (let z = 0; z < depth; z++) {\r\n      const yResults = new Array(height);\r\n      for (let y = 0; y < height; y++) {\r\n        const xStart = (z * height * width) + y * width;\r\n        const xEnd = xStart + width;\r\n        yResults[y] = array.subarray(xStart, xEnd);\r\n      }\r\n      zResults[z] = yResults;\r\n    }\r\n    return zResults;\r\n  },\r\n  erectMemoryOptimizedFloat: (array, width) => {\r\n    return array.subarray(0, width);\r\n  },\r\n  erectMemoryOptimized2DFloat,\r\n  erectMemoryOptimized3DFloat,\r\n  erectFloat: (array, width) => {\r\n    const xResults = new Float32Array(width);\r\n    let i = 0;\r\n    for (let x = 0; x < width; x++) {\r\n      xResults[x] = array[i];\r\n      i += 4;\r\n    }\r\n    return xResults;\r\n  },\r\n  erect2DFloat: (array, width, height) => {\r\n    const yResults = new Array(height);\r\n    let i = 0;\r\n    for (let y = 0; y < height; y++) {\r\n      const xResults = new Float32Array(width);\r\n      for (let x = 0; x < width; x++) {\r\n        xResults[x] = array[i];\r\n        i += 4;\r\n      }\r\n      yResults[y] = xResults;\r\n    }\r\n    return yResults;\r\n  },\r\n  erect3DFloat: (array, width, height, depth) => {\r\n    const zResults = new Array(depth);\r\n    let i = 0;\r\n    for (let z = 0; z < depth; z++) {\r\n      const yResults = new Array(height);\r\n      for (let y = 0; y < height; y++) {\r\n        const xResults = new Float32Array(width);\r\n        for (let x = 0; x < width; x++) {\r\n          xResults[x] = array[i];\r\n          i += 4;\r\n        }\r\n        yResults[y] = xResults;\r\n      }\r\n      zResults[z] = yResults;\r\n    }\r\n    return zResults;\r\n  },\r\n  erectArray2: (array, width) => {\r\n    const xResults = new Array(width);\r\n    const xResultsMax = width * 4;\r\n    let i = 0;\r\n    for (let x = 0; x < xResultsMax; x += 4) {\r\n      xResults[i++] = array.subarray(x, x + 2);\r\n    }\r\n    return xResults;\r\n  },\r\n  erect2DArray2: (array, width, height) => {\r\n    const yResults = new Array(height);\r\n    const XResultsMax = width * 4;\r\n    for (let y = 0; y < height; y++) {\r\n      const xResults = new Array(width);\r\n      const offset = y * XResultsMax;\r\n      let i = 0;\r\n      for (let x = 0; x < XResultsMax; x += 4) {\r\n        xResults[i++] = array.subarray(x + offset, x + offset + 2);\r\n      }\r\n      yResults[y] = xResults;\r\n    }\r\n    return yResults;\r\n  },\r\n  erect3DArray2: (array, width, height, depth) => {\r\n    const xResultsMax = width * 4;\r\n    const zResults = new Array(depth);\r\n    for (let z = 0; z < depth; z++) {\r\n      const yResults = new Array(height);\r\n      for (let y = 0; y < height; y++) {\r\n        const xResults = new Array(width);\r\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\r\n        let i = 0;\r\n        for (let x = 0; x < xResultsMax; x += 4) {\r\n          xResults[i++] = array.subarray(x + offset, x + offset + 2);\r\n        }\r\n        yResults[y] = xResults;\r\n      }\r\n      zResults[z] = yResults;\r\n    }\r\n    return zResults;\r\n  },\r\n  erectArray3: (array, width) => {\r\n    const xResults = new Array(width);\r\n    const xResultsMax = width * 4;\r\n    let i = 0;\r\n    for (let x = 0; x < xResultsMax; x += 4) {\r\n      xResults[i++] = array.subarray(x, x + 3);\r\n    }\r\n    return xResults;\r\n  },\r\n  erect2DArray3: (array, width, height) => {\r\n    const xResultsMax = width * 4;\r\n    const yResults = new Array(height);\r\n    for (let y = 0; y < height; y++) {\r\n      const xResults = new Array(width);\r\n      const offset = y * xResultsMax;\r\n      let i = 0;\r\n      for (let x = 0; x < xResultsMax; x += 4) {\r\n        xResults[i++] = array.subarray(x + offset, x + offset + 3);\r\n      }\r\n      yResults[y] = xResults;\r\n    }\r\n    return yResults;\r\n  },\r\n  erect3DArray3: (array, width, height, depth) => {\r\n    const xResultsMax = width * 4;\r\n    const zResults = new Array(depth);\r\n    for (let z = 0; z < depth; z++) {\r\n      const yResults = new Array(height);\r\n      for (let y = 0; y < height; y++) {\r\n        const xResults = new Array(width);\r\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\r\n        let i = 0;\r\n        for (let x = 0; x < xResultsMax; x += 4) {\r\n          xResults[i++] = array.subarray(x + offset, x + offset + 3);\r\n        }\r\n        yResults[y] = xResults;\r\n      }\r\n      zResults[z] = yResults;\r\n    }\r\n    return zResults;\r\n  },\r\n  erectArray4: (array, width) => {\r\n    const xResults = new Array(array);\r\n    const xResultsMax = width * 4;\r\n    let i = 0;\r\n    for (let x = 0; x < xResultsMax; x += 4) {\r\n      xResults[i++] = array.subarray(x, x + 4);\r\n    }\r\n    return xResults;\r\n  },\r\n  erect2DArray4: (array, width, height) => {\r\n    const xResultsMax = width * 4;\r\n    const yResults = new Array(height);\r\n    for (let y = 0; y < height; y++) {\r\n      const xResults = new Array(width);\r\n      const offset = y * xResultsMax;\r\n      let i = 0;\r\n      for (let x = 0; x < xResultsMax; x += 4) {\r\n        xResults[i++] = array.subarray(x + offset, x + offset + 4);\r\n      }\r\n      yResults[y] = xResults;\r\n    }\r\n    return yResults;\r\n  },\r\n  erect3DArray4: (array, width, height, depth) => {\r\n    const xResultsMax = width * 4;\r\n    const zResults = new Array(depth);\r\n    for (let z = 0; z < depth; z++) {\r\n      const yResults = new Array(height);\r\n      for (let y = 0; y < height; y++) {\r\n        const xResults = new Array(width);\r\n        const offset = (z * xResultsMax * height) + (y * xResultsMax);\r\n        let i = 0;\r\n        for (let x = 0; x < xResultsMax; x += 4) {\r\n          xResults[i++] = array.subarray(x + offset, x + offset + 4);\r\n        }\r\n        yResults[y] = xResults;\r\n      }\r\n      zResults[z] = yResults;\r\n    }\r\n    return zResults;\r\n  },\r\n\r\n  /**\r\n   * @param {String} source\r\n   * @param {Object} settings\r\n   * @return {String}\r\n   */\r\n  flattenFunctionToString: (source, settings) => {\r\n    const { findDependency, thisLookup, doNotDefine } = settings;\r\n    let flattened = settings.flattened;\r\n    if (!flattened) {\r\n      flattened = settings.flattened = {};\r\n    }\r\n\r\n    const ast = parse(source);\r\n    const functionDependencies = [];\r\n\r\n    function flatten(ast) {\r\n      if (Array.isArray(ast)) {\r\n        const results = [];\r\n        for (let i = 0; i < ast.length; i++) {\r\n          results.push(flatten(ast[i]));\r\n        }\r\n        return results.join('');\r\n      }\r\n      switch (ast.type) {\r\n        case 'Program':\r\n          return flatten(ast.body);\r\n        case 'FunctionDeclaration':\r\n          return `function ${ast.id.name}(${ast.params.map(flatten).join(', ')}) ${ flatten(ast.body) }`;\r\n        case 'BlockStatement': {\r\n          const result = [];\r\n          for (let i = 0; i < ast.body.length; i++) {\r\n            result.push(flatten(ast.body[i]), ';\\n');\r\n          }\r\n          return `{\\n${result.join('')}}`;\r\n        }\r\n        case 'VariableDeclaration':\r\n          switch (ast.declarations[0].id.type) {\r\n            case 'ObjectPattern': {\r\n              const source = flatten(ast.declarations[0].init);\r\n              const properties = ast.declarations.map(declaration => declaration.id.properties.map(flatten))[0];\r\n              if (/this/.test(source)) {\r\n                const result = [];\r\n                const lookups = properties.map(thisLookup);\r\n                for (let i = 0; i < lookups.length; i++) {\r\n                  const lookup = lookups[i];\r\n                  if (lookup === null) continue;\r\n                  const property = properties[i];\r\n                  result.push(`${ast.kind} ${ property } = ${ lookup };\\n`);\r\n                }\r\n\r\n                return result.join('');\r\n              }\r\n              return `${ast.kind} { ${properties} } = ${source}`;\r\n            }\r\n            case 'ArrayPattern':\r\n              return `${ast.kind} [ ${ ast.declarations.map(declaration => flatten(declaration.id)).join(', ') } ] = ${flatten(ast.declarations[0].init)}`;\r\n          }\r\n          if (doNotDefine && doNotDefine.indexOf(ast.declarations[0].id.name) !== -1) {\r\n            return '';\r\n          }\r\n          return `${ast.kind} ${ast.declarations[0].id.name} = ${flatten(ast.declarations[0].init)}`;\r\n        case 'CallExpression': {\r\n          if (ast.callee.property.name === 'subarray') {\r\n            return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n          }\r\n          if (ast.callee.object.name === 'gl' || ast.callee.object.name === 'context') {\r\n            return `${flatten(ast.callee.object)}.${flatten(ast.callee.property)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n          }\r\n          if (ast.callee.object.type === 'ThisExpression') {\r\n            functionDependencies.push(findDependency('this', ast.callee.property.name));\r\n            return `${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n          } else if (ast.callee.object.name) {\r\n            const foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);\r\n            if (foundSource === null) {\r\n              // we're not flattening it\r\n              return `${ast.callee.object.name}.${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n            } else {\r\n              functionDependencies.push(foundSource);\r\n              // we're flattening it\r\n              return `${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n            }\r\n          } else if (ast.callee.object.type === 'MemberExpression') {\r\n            return `${flatten(ast.callee.object)}.${ast.callee.property.name}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n          } else {\r\n            throw new Error('unknown ast.callee');\r\n          }\r\n        }\r\n        case 'ReturnStatement':\r\n          return `return ${flatten(ast.argument)}`;\r\n        case 'BinaryExpression':\r\n          return `(${flatten(ast.left)}${ast.operator}${flatten(ast.right)})`;\r\n        case 'UnaryExpression':\r\n          if (ast.prefix) {\r\n            return `${ast.operator} ${flatten(ast.argument)}`;\r\n          } else {\r\n            return `${flatten(ast.argument)} ${ast.operator}`;\r\n          }\r\n          case 'ExpressionStatement':\r\n            return `(${flatten(ast.expression)})`;\r\n          case 'ArrowFunctionExpression':\r\n            return `(${ast.params.map(flatten).join(', ')}) => ${flatten(ast.body)}`;\r\n          case 'Literal':\r\n            return ast.raw;\r\n          case 'Identifier':\r\n            return ast.name;\r\n          case 'MemberExpression':\r\n            if (ast.object.type === 'ThisExpression') {\r\n              return thisLookup(ast.property.name);\r\n            }\r\n            if (ast.computed) {\r\n              return `${flatten(ast.object)}[${flatten(ast.property)}]`;\r\n            }\r\n            return flatten(ast.object) + '.' + flatten(ast.property);\r\n          case 'ThisExpression':\r\n            return 'this';\r\n          case 'NewExpression':\r\n            return `new ${flatten(ast.callee)}(${ast.arguments.map(value => flatten(value)).join(', ')})`;\r\n          case 'ForStatement':\r\n            return `for (${flatten(ast.init)};${flatten(ast.test)};${flatten(ast.update)}) ${flatten(ast.body)}`;\r\n          case 'AssignmentExpression':\r\n            return `${flatten(ast.left)}${ast.operator}${flatten(ast.right)}`;\r\n          case 'UpdateExpression':\r\n            return `${flatten(ast.argument)}${ast.operator}`;\r\n          case 'IfStatement':\r\n            return `if (${flatten(ast.test)}) ${flatten(ast.consequent)}`;\r\n          case 'ThrowStatement':\r\n            return `throw ${flatten(ast.argument)}`;\r\n          case 'ObjectPattern':\r\n            return ast.properties.map(flatten).join(', ');\r\n          case 'ArrayPattern':\r\n            return ast.elements.map(flatten).join(', ');\r\n          case 'DebuggerStatement':\r\n            return 'debugger;';\r\n          case 'ConditionalExpression':\r\n            return `${flatten(ast.test)}?${flatten(ast.consequent)}:${flatten(ast.alternate)}`;\r\n          case 'Property':\r\n            if (ast.kind === 'init') {\r\n              return flatten(ast.key);\r\n            }\r\n      }\r\n      throw new Error(`unhandled ast.type of ${ ast.type }`);\r\n    }\r\n    const result = flatten(ast);\r\n    if (functionDependencies.length > 0) {\r\n      const flattenedFunctionDependencies = [];\r\n      for (let i = 0; i < functionDependencies.length; i++) {\r\n        const functionDependency = functionDependencies[i];\r\n        if (!flattened[functionDependency]) {\r\n          flattened[functionDependency] = true;\r\n        }\r\n        flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + ';\\n');\r\n      }\r\n      return flattenedFunctionDependencies.join('') + result;\r\n    }\r\n    return result;\r\n  },\r\n};\r\n\r\nexport { utils };\r\n","import { Input } from '../input';\r\nimport {\r\n  functionToIFunction,\r\n  getArgumentNamesFromString,\r\n  isArray,\r\n  isFunctionString,\r\n  warnDeprecated\r\n} from '../common';\r\nimport { getVariableType } from '../utils';\r\n\r\nexport class Kernel {\r\n  /**\r\n   * @type {Boolean}\r\n   */\r\n  static get isSupported() {\r\n    throw new Error(`\"isSupported\" not implemented on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   * @type {Boolean}\r\n   */\r\n  static isContextMatch(context) {\r\n    throw new Error(`\"isContextMatch\" not implemented on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   * @type {IKernelFeatures}\r\n   * Used internally to populate the kernel.feature, which is a getter for the output of this value\r\n   */\r\n  static getFeatures() {\r\n    throw new Error(`\"getFeatures\" not implemented on ${ this.name }`);\r\n  }\r\n\r\n  static destroyContext(context) {\r\n    throw new Error(`\"destroyContext\" called on ${ this.name }`);\r\n  }\r\n\r\n  static nativeFunctionArguments() {\r\n    throw new Error(`\"nativeFunctionArguments\" called on ${ this.name }`);\r\n  }\r\n\r\n  static nativeFunctionReturnType() {\r\n    throw new Error(`\"nativeFunctionReturnType\" called on ${ this.name }`);\r\n  }\r\n\r\n  static combineKernels() {\r\n    throw new Error(`\"combineKernels\" called on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {string|object} source\r\n   * @param [settings]\r\n   */\r\n  constructor(source, settings) {\r\n    if (typeof source !== 'object') {\r\n      if (typeof source !== 'string') {\r\n        throw new Error('source not a string');\r\n      }\r\n      if (!isFunctionString(source)) {\r\n        throw new Error('source not a function string');\r\n      }\r\n    }\r\n    this.useLegacyEncoder = false;\r\n    this.fallbackRequested = false;\r\n    this.onRequestFallback = null;\r\n\r\n    /**\r\n     * Name of the arguments found from parsing source argument\r\n     * @type {String[]}\r\n     */\r\n    this.argumentNames = typeof source === 'string' ? getArgumentNamesFromString(source) : null;\r\n    this.argumentTypes = null;\r\n    this.argumentSizes = null;\r\n    this.argumentBitRatios = null;\r\n    this.kernelArguments = null;\r\n    this.kernelConstants = null;\r\n\r\n\r\n    /**\r\n     * The function source\r\n     * @type {String}\r\n     */\r\n    this.source = source;\r\n\r\n    /**\r\n     * The size of the kernel's output\r\n     * @type {Number[]}\r\n     */\r\n    this.output = null;\r\n\r\n    /**\r\n     * Debug mode\r\n     * @type {Boolean}\r\n     */\r\n    this.debug = false;\r\n\r\n    /**\r\n     * Graphical mode\r\n     * @type {Boolean}\r\n     */\r\n    this.graphical = false;\r\n\r\n    /**\r\n     * Maximum loops when using argument values to prevent infinity\r\n     * @type {Number}\r\n     */\r\n    this.loopMaxIterations = 0;\r\n\r\n    /**\r\n     * Constants used in kernel via `this.constants`\r\n     * @type {Object}\r\n     */\r\n    this.constants = null;\r\n    this.constantTypes = null;\r\n    this.constantBitRatios = null;\r\n    this.dynamicArguments = false;\r\n    this.dynamicOutput = false;\r\n\r\n    /**\r\n     *\r\n     * @type {Object}\r\n     */\r\n    this.canvas = null;\r\n\r\n    /**\r\n     *\r\n     * @type {WebGLRenderingContext}\r\n     */\r\n    this.context = null;\r\n\r\n    /**\r\n     *\r\n     * @type {Boolean}\r\n     */\r\n    this.checkContext = null;\r\n\r\n    /**\r\n     *\r\n     * @type {GPU}\r\n     */\r\n    this.gpu = null;\r\n\r\n    /**\r\n     *\r\n     * @type {IGPUFunction[]}\r\n     */\r\n    this.functions = null;\r\n\r\n    /**\r\n     *\r\n     * @type {IGPUNativeFunction[]}\r\n     */\r\n    this.nativeFunctions = null;\r\n\r\n    /**\r\n     *\r\n     * @type {String}\r\n     */\r\n    this.injectedNative = null;\r\n\r\n    /**\r\n     *\r\n     * @type {ISubKernel[]}\r\n     */\r\n    this.subKernels = null;\r\n\r\n    /**\r\n     *\r\n     * @type {Boolean}\r\n     */\r\n    this.validate = true;\r\n\r\n    /**\r\n     * Enforces kernel to write to a new array or texture on run\r\n     * @type {Boolean}\r\n     */\r\n    this.immutable = false;\r\n\r\n    /**\r\n     * Enforces kernel to write to a texture on run\r\n     * @type {Boolean}\r\n     */\r\n    this.pipeline = false;\r\n\r\n    /**\r\n     * Make GPU use single precison or unsigned.  Acceptable values: 'single' or 'unsigned'\r\n     * @type {String|null}\r\n     * @enum 'single' | 'unsigned'\r\n     */\r\n    this.precision = null;\r\n\r\n    /**\r\n     *\r\n     * @type {String|null}\r\n     * @enum 'speed' | 'balanced' | 'precision'\r\n     */\r\n    this.tactic = 'balanced';\r\n\r\n    this.plugins = null;\r\n\r\n    this.returnType = null;\r\n    this.leadingReturnStatement = null;\r\n    this.followingReturnStatement = null;\r\n    this.optimizeFloatMemory = null;\r\n    this.strictIntegers = false;\r\n    this.fixIntegerDivisionAccuracy = null;\r\n    this.warnVarUsage = true;\r\n  }\r\n\r\n  mergeSettings(settings) {\r\n    for (let p in settings) {\r\n      if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\r\n      switch (p) {\r\n        case 'output':\r\n          if (!Array.isArray(settings.output)) {\r\n            this.setOutput(settings.output); // Flatten output object\r\n            continue;\r\n          }\r\n          break;\r\n        case 'functions':\r\n          if (typeof settings.functions[0] === 'function') {\r\n            this.functions = settings.functions.map(source => functionToIFunction(source));\r\n            continue;\r\n          }\r\n          break;\r\n        case 'graphical':\r\n          if (settings[p] && !settings.hasOwnProperty('precision')) {\r\n            this.precision = 'unsigned';\r\n          }\r\n          this[p] = settings[p];\r\n          continue;\r\n      }\r\n      this[p] = settings[p];\r\n    }\r\n\r\n    if (!this.canvas) this.canvas = this.initCanvas();\r\n    if (!this.context) this.context = this.initContext();\r\n    if (!this.plugins) this.plugins = this.initPlugins(settings);\r\n  }\r\n  /**\r\n   * @desc Builds the Kernel, by compiling Fragment and Vertical Shaders,\r\n   * and instantiates the program.\r\n   * @abstract\r\n   */\r\n  build() {\r\n    throw new Error(`\"build\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * @desc Run the kernel program, and send the output to renderOutput\r\n   * <p> This method calls a helper method *renderOutput* to return the result. </p>\r\n   * @returns {Float32Array|Float32Array[]|Float32Array[][]|void} Result The final output of the program, as float, and as Textures for reuse.\r\n   * @abstract\r\n   */\r\n  run() {\r\n    throw new Error(`\"run\" not defined on ${ this.constructor.name }`)\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Object}\r\n   */\r\n  initCanvas() {\r\n    throw new Error(`\"initCanvas\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {Object}\r\n   */\r\n  initContext() {\r\n    throw new Error(`\"initContext\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * @param {IFunctionSettings} settings\r\n   * @return {Object};\r\n   * @abstract\r\n   */\r\n  initPlugins(settings) {\r\n    throw new Error(`\"initPlugins\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * @desc Setup the parameter types for the parameters\r\n   * supplied to the Kernel function\r\n   *\r\n   * @param {IArguments} args - The actual parameters sent to the Kernel\r\n   */\r\n  setupArguments(args) {\r\n    this.kernelArguments = [];\r\n    if (!this.argumentTypes) {\r\n      if (!this.argumentTypes) {\r\n        this.argumentTypes = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n          const argType = getVariableType(args[i], this.strictIntegers);\r\n          const type = argType === 'Integer' ? 'Number' : argType;\r\n          this.argumentTypes.push(type);\r\n          this.kernelArguments.push({\r\n            type\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.argumentTypes.length; i++) {\r\n        this.kernelArguments.push({\r\n          type: this.argumentTypes[i]\r\n        });\r\n      }\r\n    }\r\n\r\n    // setup sizes\r\n    this.argumentSizes = new Array(args.length);\r\n    this.argumentBitRatios = new Int32Array(args.length);\r\n\r\n    for (let i = 0; i < args.length; i++) {\r\n      const arg = args[i];\r\n      this.argumentSizes[i] = arg.constructor === Input ? arg.size : null;\r\n      this.argumentBitRatios[i] = this.getBitRatio(arg);\r\n    }\r\n\r\n    if (this.argumentNames.length !== args.length) {\r\n      throw new Error(`arguments are miss-aligned`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup constants\r\n   */\r\n  setupConstants() {\r\n    this.kernelConstants = [];\r\n    let needsConstantTypes = this.constantTypes === null;\r\n    if (needsConstantTypes) {\r\n      this.constantTypes = {};\r\n    }\r\n    this.constantBitRatios = {};\r\n    if (this.constants) {\r\n      for (let name in this.constants) {\r\n        if (needsConstantTypes) {\r\n          const type = getVariableType(this.constants[name], this.strictIntegers);\r\n          this.constantTypes[name] = type;\r\n          this.kernelConstants.push({\r\n            name,\r\n            type\r\n          });\r\n        } else {\r\n          this.kernelConstants.push({\r\n            name,\r\n            type: this.constantTypes[name]\r\n          });\r\n        }\r\n        this.constantBitRatios[name] = this.getBitRatio(this.constants[name]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param flag\r\n   * @return {Kernel}\r\n   */\r\n  setOptimizeFloatMemory(flag) {\r\n    this.optimizeFloatMemory = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Set output dimensions of the kernel function\r\n   * @param {Array|Object} output - The output array to set the kernel output size to\r\n   */\r\n  setOutput(output) {\r\n    if (output.hasOwnProperty('x')) {\r\n      if (output.hasOwnProperty('y')) {\r\n        if (output.hasOwnProperty('z')) {\r\n          this.output = [output.x, output.y, output.z];\r\n        } else {\r\n          this.output = [output.x, output.y];\r\n        }\r\n      } else {\r\n        this.output = [output.x];\r\n      }\r\n    } else {\r\n      this.output = output;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Toggle debug mode\r\n   * @param {Boolean} flag - true to enable debug\r\n   */\r\n  setDebug(flag) {\r\n    this.debug = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Toggle graphical output mode\r\n   * @param {Boolean} flag - true to enable graphical output\r\n   */\r\n  setGraphical(flag) {\r\n    this.graphical = flag;\r\n    this.precision = 'unsigned';\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Set the maximum number of loop iterations\r\n   * @param {number} max - iterations count\r\n   *\r\n   */\r\n  setLoopMaxIterations(max) {\r\n    this.loopMaxIterations = max;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Set Constants\r\n   */\r\n  setConstants(constants) {\r\n    this.constants = constants;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param [IKernelValueTypes] constantTypes\r\n   * @return {Kernel}\r\n   */\r\n  setConstantTypes(constantTypes) {\r\n    this.constantTypes = constantTypes;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {IFunction[]|KernelFunction[]} functions\r\n   * @return {Kernel}\r\n   */\r\n  setFunctions(functions) {\r\n    if (typeof functions[0] === 'function') {\r\n      this.functions = functions.map(source => functionToIFunction(source));\r\n    } else {\r\n      this.functions = functions;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {IGPUNativeFunction} nativeFunctions\r\n   * @return {Kernel}\r\n   */\r\n  setNativeFunctions(nativeFunctions) {\r\n    this.nativeFunctions = nativeFunctions;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {String} injectedNative\r\n   * @return {Kernel}\r\n   */\r\n  setInjectedNative(injectedNative) {\r\n    this.injectedNative = injectedNative;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set writing to texture on/off\r\n   * @param flag\r\n   * @return {Kernel}\r\n   */\r\n  setPipeline(flag) {\r\n    this.pipeline = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set precision to 'unsigned' or 'single'\r\n   * @param {String} flag 'unsigned' or 'single'\r\n   * @return {Kernel}\r\n   */\r\n  setPrecision(flag) {\r\n    this.precision = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param flag\r\n   * @return {Kernel}\r\n   * @deprecated\r\n   */\r\n  setOutputToTexture(flag) {\r\n    warnDeprecated('method', 'setOutputToTexture', 'setPipeline');\r\n    this.pipeline = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set to immutable\r\n   * @param flag\r\n   * @return {Kernel}\r\n   */\r\n  setImmutable(flag) {\r\n    this.immutable = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Bind the canvas to kernel\r\n   * @param {Object} canvas\r\n   */\r\n  setCanvas(canvas) {\r\n    this.canvas = canvas;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Boolean} flag\r\n   * @return {Kernel}\r\n   */\r\n  setStrictIntegers(flag) {\r\n    this.strictIntegers = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param flag\r\n   * @return {Kernel}\r\n   */\r\n  setDynamicOutput(flag) {\r\n    this.dynamicOutput = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @param flag\r\n   * @return {Kernel}\r\n   */\r\n  setHardcodeConstants(flag) {\r\n    warnDeprecated('method', 'setHardcodeConstants');\r\n    this.setDynamicOutput(flag);\r\n    this.setDynamicArguments(flag);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param flag\r\n   * @return {Kernel}\r\n   */\r\n  setDynamicArguments(flag) {\r\n    this.dynamicArguments = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @param {Boolean} flag\r\n   * @return {Kernel}\r\n   */\r\n  setUseLegacyEncoder(flag) {\r\n    this.useLegacyEncoder = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Boolean} flag\r\n   * @return {Kernel}\r\n   */\r\n  setWarnVarUsage(flag) {\r\n    this.warnVarUsage = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @returns {Object}\r\n   */\r\n  getCanvas() {\r\n    warnDeprecated('method', 'getCanvas');\r\n    return this.canvas;\r\n  }\r\n\r\n  /**\r\n   * @deprecated\r\n   * @returns {Object}\r\n   */\r\n  getWebGl() {\r\n    warnDeprecated('method', 'getWebGl');\r\n    return this.context;\r\n  }\r\n\r\n  /**\r\n   * @desc Bind the webGL instance to kernel\r\n   * @param {WebGLRenderingContext} context - webGl instance to bind\r\n   */\r\n  setContext(context) {\r\n    this.context = context;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param [IKernelValueTypes|GPUVariableType[]] argumentTypes\r\n   * @return {Kernel}\r\n   */\r\n  setArgumentTypes(argumentTypes) {\r\n    if (Array.isArray(argumentTypes)) {\r\n      this.argumentTypes = argumentTypes;\r\n    } else {\r\n      this.argumentTypes = [];\r\n      for (const p in argumentTypes) {\r\n        const argumentIndex = this.argumentNames.indexOf(p);\r\n        if (argumentIndex === -1) throw new Error(`unable to find argument ${ p }`);\r\n        this.argumentTypes[argumentIndex] = argumentTypes[p];\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param [Tactic] tactic\r\n   * @return {Kernel}\r\n   */\r\n  setTactic(tactic) {\r\n    this.tactic = tactic;\r\n    return this;\r\n  }\r\n\r\n  requestFallback(args) {\r\n    if (!this.onRequestFallback) {\r\n      throw new Error(`\"onRequestFallback\" not defined on ${ this.constructor.name }`);\r\n    }\r\n    this.fallbackRequested = true;\r\n    return this.onRequestFallback(args);\r\n  }\r\n\r\n  /**\r\n   * @desc Validate settings\r\n   * @abstract\r\n   */\r\n  validateSettings() {\r\n    throw new Error(`\"validateSettings\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * @desc Add a sub kernel to the root kernel instance.\r\n   * This is what `createKernelMap` uses.\r\n   *\r\n   * @param {ISubKernel} subKernel - function (as a String) of the subKernel to add\r\n   */\r\n  addSubKernel(subKernel) {\r\n    if (this.subKernels === null) {\r\n      this.subKernels = [];\r\n    }\r\n    if (!subKernel.source) throw new Error('subKernel missing \"source\" property');\r\n    if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing \"property\" property');\r\n    if (!subKernel.name) throw new Error('subKernel missing \"name\" property');\r\n    this.subKernels.push(subKernel);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Destroys all memory associated with this kernel\r\n   * @param {Boolean} [removeCanvasReferences] remove any associated canvas references\r\n   */\r\n  destroy(removeCanvasReferences) {\r\n    throw new Error(`\"destroy\" called on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\r\n   * @param value\r\n   * @returns {number}\r\n   */\r\n  getBitRatio(value) {\r\n    if (this.precision === 'single') {\r\n      // 8 and 16 are upconverted to float32\r\n      return 4;\r\n    } else if (Array.isArray(value[0])) {\r\n      return this.getBitRatio(value[0]);\r\n    } else if (value.constructor === Input) {\r\n      return this.getBitRatio(value.value);\r\n    }\r\n    switch (value.constructor) {\r\n      case Uint8ClampedArray:\r\n      case Uint8Array:\r\n      case Int8Array:\r\n        return 1;\r\n      case Uint16Array:\r\n      case Int16Array:\r\n        return 2;\r\n      case Float32Array:\r\n      case Int32Array:\r\n      default:\r\n        return 4;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {number[]}\r\n   */\r\n  getPixels() {\r\n    throw new Error(`\"getPixels\" called on ${ this.constructor.name }`);\r\n  }\r\n\r\n  checkOutput() {\r\n    if (!this.output || !isArray(this.output)) throw new Error('kernel.output not an array');\r\n    if (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');\r\n    for (let i = 0; i < this.output.length; i++) {\r\n      if (isNaN(this.output[i]) || this.output[i] < 1) {\r\n        throw new Error(`${ this.constructor.name }.output[${ i }] incorrectly defined as \\`${ this.output[i] }\\`, needs to be numeric, and greater than 0`);\r\n      }\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    const settings = {\r\n      output: this.output,\r\n      threadDim: this.threadDim,\r\n      pipeline: this.pipeline,\r\n      argumentNames: this.argumentNames,\r\n      argumentsTypes: this.argumentTypes,\r\n      constants: this.constants,\r\n      pluginNames: this.plugins ? this.plugins.map(plugin => plugin.name) : null,\r\n      returnType: this.returnType,\r\n    };\r\n    return {\r\n      settings\r\n    };\r\n  }\r\n}\r\n","/**\r\n * @desc This handles all the raw state, converted state, etc. of a single function.\r\n * [INTERNAL] A collection of functionNodes.\r\n * @class\r\n */\r\nexport class FunctionBuilder {\r\n  /**\r\n   *\r\n   * @param {Kernel} kernel\r\n   * @param {FunctionNode} FunctionNode\r\n   * @param {object} [extraNodeOptions]\r\n   * @returns {FunctionBuilder}\r\n   * @static\r\n   */\r\n  static fromKernel(kernel, FunctionNode, extraNodeOptions) {\r\n    const {\r\n      kernelArguments,\r\n      kernelConstants,\r\n      argumentNames,\r\n      argumentSizes,\r\n      argumentBitRatios,\r\n      constants,\r\n      constantBitRatios,\r\n      debug,\r\n      loopMaxIterations,\r\n      nativeFunctions,\r\n      output,\r\n      optimizeFloatMemory,\r\n      precision,\r\n      plugins,\r\n      source,\r\n      subKernels,\r\n      functions,\r\n      leadingReturnStatement,\r\n      followingReturnStatement,\r\n      dynamicArguments,\r\n      dynamicOutput,\r\n      warnVarUsage,\r\n    } = kernel;\r\n\r\n    const argumentTypes = new Array(kernelArguments.length);\r\n    const constantTypes = {};\r\n\r\n    for (let i = 0; i < kernelArguments.length; i++) {\r\n      argumentTypes[i] = kernelArguments[i].type;\r\n    }\r\n\r\n    for (let i = 0; i < kernelConstants.length; i++) {\r\n      const kernelConstant = kernelConstants[i]\r\n      constantTypes[kernelConstant.name] = kernelConstant.type;\r\n    }\r\n\r\n    const needsArgumentType = (functionName, index) => {\r\n      return functionBuilder.needsArgumentType(functionName, index);\r\n    };\r\n\r\n    const assignArgumentType = (functionName, index, type) => {\r\n      functionBuilder.assignArgumentType(functionName, index, type);\r\n    };\r\n\r\n    const lookupReturnType = (functionName, ast, requestingNode) => {\r\n      return functionBuilder.lookupReturnType(functionName, ast, requestingNode);\r\n    };\r\n\r\n    const lookupFunctionArgumentTypes = (functionName) => {\r\n      return functionBuilder.lookupFunctionArgumentTypes(functionName);\r\n    };\r\n\r\n    const lookupFunctionArgumentName = (functionName, argumentIndex) => {\r\n      return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);\r\n    };\r\n\r\n    const lookupFunctionArgumentBitRatio = (functionName, argumentName) => {\r\n      return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);\r\n    };\r\n\r\n    const triggerImplyArgumentType = (functionName, i, argumentType, requestingNode) => {\r\n      functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);\r\n    };\r\n\r\n    const triggerTrackArgumentSynonym = (functionName, argumentName, calleeFunctionName, argumentIndex) => {\r\n      functionBuilder.trackArgumentSynonym(functionName, argumentName, calleeFunctionName, argumentIndex);\r\n    };\r\n\r\n    const lookupArgumentSynonym = (originFunctionName, functionName, argumentName) => {\r\n      return functionBuilder.lookupArgumentSynonym(originFunctionName, functionName, argumentName);\r\n    };\r\n\r\n    const onFunctionCall = (functionName, calleeFunctionName, args) => {\r\n      functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);\r\n    };\r\n\r\n    const onNestedFunction = (ast, returnType) => {\r\n      const argumentNames = [];\r\n      for (let i = 0; i < ast.params.length; i++) {\r\n        argumentNames.push(ast.params[i].name);\r\n      }\r\n      const nestedFunction = new FunctionNode(null, Object.assign({}, nodeOptions, {\r\n        returnType: null,\r\n        ast,\r\n        name: ast.id.name,\r\n        argumentNames,\r\n        lookupReturnType,\r\n        lookupFunctionArgumentTypes,\r\n        lookupFunctionArgumentName,\r\n        lookupFunctionArgumentBitRatio,\r\n        needsArgumentType,\r\n        assignArgumentType,\r\n        triggerImplyArgumentType,\r\n        triggerTrackArgumentSynonym,\r\n        lookupArgumentSynonym,\r\n        onFunctionCall,\r\n        warnVarUsage,\r\n      }));\r\n      nestedFunction.traceFunctionAST(ast);\r\n      functionBuilder.addFunctionNode(nestedFunction);\r\n    };\r\n\r\n    const nodeOptions = Object.assign({\r\n      isRootKernel: false,\r\n      onNestedFunction,\r\n      lookupReturnType,\r\n      lookupFunctionArgumentTypes,\r\n      lookupFunctionArgumentName,\r\n      lookupFunctionArgumentBitRatio,\r\n      needsArgumentType,\r\n      assignArgumentType,\r\n      triggerImplyArgumentType,\r\n      triggerTrackArgumentSynonym,\r\n      lookupArgumentSynonym,\r\n      onFunctionCall,\r\n      optimizeFloatMemory,\r\n      precision,\r\n      constants,\r\n      constantTypes,\r\n      constantBitRatios,\r\n      debug,\r\n      loopMaxIterations,\r\n      output,\r\n      plugins,\r\n      dynamicArguments,\r\n      dynamicOutput,\r\n    }, extraNodeOptions || {});\r\n\r\n    const rootNodeOptions = Object.assign({}, nodeOptions, {\r\n      isRootKernel: true,\r\n      name: 'kernel',\r\n      argumentNames,\r\n      argumentTypes,\r\n      argumentSizes,\r\n      argumentBitRatios,\r\n      leadingReturnStatement,\r\n      followingReturnStatement,\r\n    });\r\n\r\n    if (typeof source === 'object' && source.functionNodes) {\r\n      return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);\r\n    }\r\n\r\n    const rootNode = new FunctionNode(source, rootNodeOptions);\r\n\r\n    let functionNodes = null;\r\n    if (functions) {\r\n      functionNodes = functions.map((fn) => new FunctionNode(fn.source, {\r\n        returnType: fn.returnType,\r\n        argumentTypes: fn.argumentTypes,\r\n        output,\r\n        plugins,\r\n        constants,\r\n        constantTypes,\r\n        constantBitRatios,\r\n        optimizeFloatMemory,\r\n        precision,\r\n        lookupReturnType,\r\n        lookupFunctionArgumentTypes,\r\n        lookupFunctionArgumentName,\r\n        lookupFunctionArgumentBitRatio,\r\n        needsArgumentType,\r\n        assignArgumentType,\r\n        triggerImplyArgumentType,\r\n        triggerTrackArgumentSynonym,\r\n        lookupArgumentSynonym,\r\n        onFunctionCall,\r\n      }));\r\n    }\r\n\r\n    let subKernelNodes = null;\r\n    if (subKernels) {\r\n      subKernelNodes = subKernels.map((subKernel) => {\r\n        const { name, source } = subKernel;\r\n        return new FunctionNode(source, Object.assign({}, nodeOptions, {\r\n          name,\r\n          isSubKernel: true,\r\n          isRootKernel: false,\r\n        }));\r\n      });\r\n    }\r\n\r\n    const functionBuilder = new FunctionBuilder({\r\n      kernel,\r\n      rootNode,\r\n      functionNodes,\r\n      nativeFunctions,\r\n      subKernelNodes\r\n    });\r\n\r\n    return functionBuilder;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {IFunctionBuilderSettings} [settings]\r\n   */\r\n  constructor(settings) {\r\n    settings = settings || {};\r\n    this.kernel = settings.kernel;\r\n    this.rootNode = settings.rootNode;\r\n    this.functionNodes = settings.functionNodes || [];\r\n    this.subKernelNodes = settings.subKernelNodes || [];\r\n    this.nativeFunctions = settings.nativeFunctions || [];\r\n    this.functionMap = {};\r\n    this.nativeFunctionNames = [];\r\n    this.lookupChain = [];\r\n    this.argumentChain = [];\r\n    this.functionNodeDependencies = {};\r\n    this.functionCalls = {};\r\n\r\n    if (this.rootNode) {\r\n      this.functionMap['kernel'] = this.rootNode;\r\n    }\r\n\r\n    if (this.functionNodes) {\r\n      for (let i = 0; i < this.functionNodes.length; i++) {\r\n        this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];\r\n      }\r\n    }\r\n\r\n    if (this.subKernelNodes) {\r\n      for (let i = 0; i < this.subKernelNodes.length; i++) {\r\n        this.functionMap[this.subKernelNodes[i].name] = this.subKernelNodes[i];\r\n      }\r\n    }\r\n\r\n    if (this.nativeFunctions) {\r\n      for (let i = 0; i < this.nativeFunctions.length; i++) {\r\n        const nativeFunction = this.nativeFunctions[i];\r\n        this.nativeFunctionNames.push(nativeFunction.name);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Add the function node directly\r\n   *\r\n   * @param {FunctionNode} functionNode - functionNode to add\r\n   *\r\n   */\r\n  addFunctionNode(functionNode) {\r\n    if (!functionNode.name) throw new Error('functionNode.name needs set');\r\n    this.functionMap[functionNode.name] = functionNode;\r\n    if (functionNode.isRootKernel) {\r\n      this.rootNode = functionNode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Trace all the depending functions being called, from a single function\r\n   *\r\n   * This allow for 'unneeded' functions to be automatically optimized out.\r\n   * Note that the 0-index, is the starting function trace.\r\n   *\r\n   * @param {String} functionName - Function name to trace from, default to 'kernel'\r\n   * @param {String[]} [retList] - Returning list of function names that is traced. Including itself.\r\n   *\r\n   * @returns {String[]}  Returning list of function names that is traced. Including itself.\r\n   */\r\n  traceFunctionCalls(functionName, retList) {\r\n    functionName = functionName || 'kernel';\r\n    retList = retList || [];\r\n\r\n    if (this.nativeFunctionNames.indexOf(functionName) > -1) {\r\n      if (retList.indexOf(functionName) === -1) {\r\n        retList.push(functionName);\r\n      }\r\n      return retList;\r\n    }\r\n\r\n    const functionNode = this.functionMap[functionName];\r\n    if (functionNode) {\r\n      // Check if function already exists\r\n      const functionIndex = retList.indexOf(functionName);\r\n      if (functionIndex === -1) {\r\n        retList.push(functionName);\r\n        functionNode.toString(); //ensure JS trace is done\r\n        for (let i = 0; i < functionNode.calledFunctions.length; ++i) {\r\n          this.traceFunctionCalls(functionNode.calledFunctions[i], retList);\r\n        }\r\n      } else {\r\n        /**\r\n         * https://github.com/gpujs/gpu.js/issues/207\r\n         * if dependent function is already in the list, because a function depends on it, and because it has\r\n         * already been traced, we know that we must move the dependent function to the end of the the retList.\r\n         * */\r\n        const dependantFunctionName = retList.splice(functionIndex, 1)[0];\r\n        retList.push(dependantFunctionName);\r\n      }\r\n    }\r\n\r\n    return retList;\r\n  }\r\n\r\n  /**\r\n   * @desc Return the string for a function\r\n   * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\r\n   * @returns {String} The full string, of all the various functions. Trace optimized if functionName given\r\n   */\r\n  getPrototypeString(functionName) {\r\n    return this.getPrototypes(functionName).join('\\n');\r\n  }\r\n\r\n  /**\r\n   * @desc Return the string for a function\r\n   * @param {String} [functionName] - Function name to trace from. If null, it returns the WHOLE builder stack\r\n   * @returns {Array} The full string, of all the various functions. Trace optimized if functionName given\r\n   */\r\n  getPrototypes(functionName) {\r\n    if (this.rootNode) {\r\n      this.rootNode.toString();\r\n    }\r\n    if (functionName) {\r\n      return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\r\n    }\r\n    return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));\r\n  }\r\n\r\n  /**\r\n   * @desc Get string from function names\r\n   * @param {String[]} functionList - List of function to build string\r\n   * @returns {String} The string, of all the various functions. Trace optimized if functionName given\r\n   */\r\n  getStringFromFunctionNames(functionList) {\r\n    const ret = [];\r\n    for (let i = 0; i < functionList.length; ++i) {\r\n      const node = this.functionMap[functionList[i]];\r\n      if (node) {\r\n        ret.push(this.functionMap[functionList[i]].toString());\r\n      }\r\n    }\r\n    return ret.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * @desc Return string of all functions converted\r\n   * @param {String[]} functionList - List of function names to build the string.\r\n   * @returns {Array} Prototypes of all functions converted\r\n   */\r\n  getPrototypesFromFunctionNames(functionList) {\r\n    const ret = [];\r\n    for (let i = 0; i < functionList.length; ++i) {\r\n      const functionName = functionList[i];\r\n      const functionIndex = this.nativeFunctionNames.indexOf(functionName);\r\n      if (functionIndex > -1) {\r\n        ret.push(this.nativeFunctions[functionIndex].source);\r\n        continue;\r\n      }\r\n      const node = this.functionMap[functionName];\r\n      if (node) {\r\n        ret.push(node.toString());\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  toJSON() {\r\n    return this.traceFunctionCalls(this.rootNode.name).reverse().map(name => {\r\n      const nativeIndex = this.nativeFunctions.indexOf(name);\r\n      if (nativeIndex > -1) {\r\n        return {\r\n          name,\r\n          source: this.nativeFunctions[nativeIndex].source\r\n        };\r\n      } else if (this.functionMap[name]) {\r\n        return this.functionMap[name].toJSON();\r\n      } else {\r\n        throw new Error(`function ${ name } not found`);\r\n      }\r\n    });\r\n  }\r\n\r\n  fromJSON(jsonFunctionNodes, FunctionNode) {\r\n    this.functionMap = {};\r\n    for (let i = 0; i < jsonFunctionNodes.length; i++) {\r\n      const jsonFunctionNode = jsonFunctionNodes[i];\r\n      this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Get string for a particular function name\r\n   * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\r\n   * @returns {String} settings - The string, of all the various functions. Trace optimized if functionName given\r\n   */\r\n  getString(functionName) {\r\n    if (functionName) {\r\n      return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());\r\n    }\r\n    return this.getStringFromFunctionNames(Object.keys(this.functionMap));\r\n  }\r\n\r\n  lookupReturnType(functionName, ast, requestingNode) {\r\n    if (ast.type !== 'CallExpression') {\r\n      throw new Error(`expected ast type of \"CallExpression\", but is ${ ast.type }`);\r\n    }\r\n    if (this._isNativeFunction(functionName)) {\r\n      return this._lookupNativeFunctionReturnType(functionName);\r\n    } else if (this._isFunction(functionName)) {\r\n      const node = this._getFunction(functionName);\r\n      if (node.returnType) {\r\n        return node.returnType;\r\n      } else {\r\n        for (let i = 0; i < this.lookupChain.length; i++) {\r\n          // detect circlical logic\r\n          if (this.lookupChain[i].ast === ast) {\r\n            // detect if arguments have not resolved, preventing a return type\r\n            // if so, go ahead and resolve them, so we can resolve the return type\r\n            if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {\r\n              const args = ast.arguments;\r\n              for (let j = 0; j < args.length; j++) {\r\n                this.lookupChain.push({\r\n                  name: requestingNode.name,\r\n                  ast: args[i],\r\n                  requestingNode\r\n                });\r\n                node.argumentTypes[j] = requestingNode.getType(args[j]);\r\n                this.lookupChain.pop();\r\n              }\r\n              return node.returnType = node.getType(node.getJsAST());\r\n            }\r\n\r\n            throw new Error('circlical logic detected!');\r\n          }\r\n        }\r\n        // get ready for a ride!\r\n        this.lookupChain.push({\r\n          name: requestingNode.name,\r\n          ast,\r\n          requestingNode\r\n        });\r\n        const type = node.getType(node.getJsAST());\r\n        this.lookupChain.pop();\r\n        return node.returnType = type;\r\n      }\r\n    }\r\n\r\n    // function not found, maybe native?\r\n    return null;\r\n\r\n    /**\r\n     * first iteration\r\n     * kernel.outputs = Array\r\n     * kernel.targets = Array\r\n     * kernel.returns = null\r\n     * kernel.calls.calcErrorOutput = [kernel.output, kernel.targets]\r\n     * kernel.calls.calcDeltas = [calcErrorOutput.returns, kernel.output]\r\n     * calcErrorOutput.output = null\r\n     * calcErrorOutput.targets = null\r\n     * calcErrorOutput.returns = null\r\n     * calcDeltasSigmoid.error = null\r\n     * calcDeltasSigmoid.output = Number\r\n     * calcDeltasSigmoid.returns = null\r\n     *\r\n     * resolvable are:\r\n     * calcErrorOutput.output\r\n     * calcErrorOutput.targets\r\n     * calcErrorOutput.returns\r\n     *\r\n     * second iteration\r\n     * kernel.outputs = Array\r\n     * kernel.targets = Array\r\n     * kernel.returns = null\r\n     * kernel.calls.calcErrorOutput = [kernel.output, kernel.targets]\r\n     * kernel.calls.calcDeltas = [calcErrorOutput.returns, kernel.output]\r\n     * calcErrorOutput.output = Number\r\n     * calcErrorOutput.targets = Array\r\n     * calcErrorOutput.returns = Number\r\n     * calcDeltasSigmoid.error = null\r\n     * calcDeltasSigmoid.output = Number\r\n     * calcDeltasSigmoid.returns = null\r\n     *\r\n     * resolvable are:\r\n     * calcDeltasSigmoid.error\r\n     * calcDeltasSigmoid.returns\r\n     * kernel.returns\r\n     *\r\n     * third iteration\r\n     * kernel.outputs = Array\r\n     * kernel.targets = Array\r\n     * kernel.returns = Number\r\n     * kernel.calls.calcErrorOutput = [kernel.output, kernel.targets]\r\n     * kernel.calls.calcDeltas = [calcErrorOutput.returns, kernel.output]\r\n     * calcErrorOutput.output = Number\r\n     * calcErrorOutput.targets = Array\r\n     * calcErrorOutput.returns = Number\r\n     * calcDeltasSigmoid.error = Number\r\n     * calcDeltasSigmoid.output = Number\r\n     * calcDeltasSigmoid.returns = Number\r\n     *\r\n     *\r\n     */\r\n  }\r\n\r\n  _getFunction(functionName) {\r\n    if (!this._isFunction(functionName)) {\r\n      new Error(`Function ${functionName} not found`);\r\n    }\r\n    return this.functionMap[functionName];\r\n  }\r\n\r\n  _isFunction(functionName) {\r\n    return Boolean(this.functionMap[functionName]);\r\n  }\r\n\r\n  _getNativeFunction(functionName) {\r\n    for (let i = 0; i < this.nativeFunctions.length; i++) {\r\n      if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  _isNativeFunction(functionName) {\r\n    return Boolean(this._getNativeFunction(functionName));\r\n  }\r\n\r\n  _lookupNativeFunctionReturnType(functionName) {\r\n    let nativeFunction = this._getNativeFunction(functionName);\r\n    if (nativeFunction) {\r\n      return nativeFunction.returnType;\r\n    }\r\n    throw new Error(`Native function ${ functionName } not found`);\r\n  }\r\n\r\n  lookupFunctionArgumentTypes(functionName) {\r\n    if (this._isNativeFunction(functionName)) {\r\n      return this._getNativeFunction(functionName).argumentTypes;\r\n    } else if (this._isFunction(functionName)) {\r\n      return this._getFunction(functionName).argumentTypes;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  lookupFunctionArgumentName(functionName, argumentIndex) {\r\n    return this._getFunction(functionName).argumentNames[argumentIndex];\r\n  }\r\n\r\n  lookupFunctionArgumentBitRatio(functionName, argumentName) {\r\n    if (!this._isFunction(functionName)) {\r\n      throw new Error('function not found');\r\n    }\r\n    if (this.rootNode.name === functionName) {\r\n      const i = this.rootNode.argumentNames.indexOf(argumentName);\r\n      if (i !== -1) {\r\n        return this.rootNode.argumentBitRatios[i];\r\n      } else {\r\n        throw new Error('argument bit ratio not found');\r\n      }\r\n    } else {\r\n      const node = this._getFunction(functionName);\r\n      const argumentSynonym = node.argumentSynonym[node.synonymIndex];\r\n      if (!argumentSynonym) {\r\n        throw new Error('argument synonym not found');\r\n      }\r\n      return this.lookupFunctionArgumentBitRatio(argumentSynonym.functionName, argumentSynonym.argumentName);\r\n    }\r\n  }\r\n\r\n  needsArgumentType(functionName, i) {\r\n    if (!this._isFunction(functionName)) return false;\r\n    const fnNode = this._getFunction(functionName);\r\n    return !fnNode.argumentTypes[i];\r\n  }\r\n\r\n  assignArgumentType(functionName, i, argumentType, requestingNode) {\r\n    if (!this._isFunction(functionName)) return;\r\n    const fnNode = this._getFunction(functionName);\r\n    if (!fnNode.argumentTypes[i]) {\r\n      fnNode.argumentTypes[i] = argumentType;\r\n    }\r\n  }\r\n\r\n  trackArgumentSynonym(functionName, argumentName, calleeFunctionName, argumentIndex) {\r\n    if (!this._isFunction(calleeFunctionName)) return;\r\n    const node = this._getFunction(calleeFunctionName);\r\n    if (!node.argumentSynonym) {\r\n      node.argumentSynonym = {};\r\n    }\r\n    const calleeArgumentName = node.argumentNames[argumentIndex];\r\n    if (!node.argumentSynonym[calleeArgumentName]) {\r\n      node.argumentSynonym[calleeArgumentName] = {};\r\n    }\r\n    node.synonymIndex++;\r\n    node.argumentSynonym[node.synonymIndex] = {\r\n      functionName,\r\n      argumentName,\r\n      calleeArgumentName,\r\n      calleeFunctionName,\r\n    };\r\n  }\r\n\r\n  lookupArgumentSynonym(originFunctionName, functionName, argumentName) {\r\n    if (originFunctionName === functionName) return argumentName;\r\n    if (!this._isFunction(functionName)) return null;\r\n    const node = this._getFunction(functionName);\r\n    const argumentSynonym = node.argumentSynonym[node.synonymUseIndex];\r\n    if (!argumentSynonym) return null;\r\n    if (argumentSynonym.calleeArgumentName !== argumentName) return null;\r\n    node.synonymUseIndex++;\r\n    if (originFunctionName !== functionName) {\r\n      return this.lookupArgumentSynonym(originFunctionName, argumentSynonym.functionName, argumentSynonym.argumentName);\r\n    }\r\n    return argumentSynonym.argumentName;\r\n  }\r\n\r\n  trackFunctionCall(functionName, calleeFunctionName, args) {\r\n    if (!this.functionNodeDependencies[functionName]) {\r\n      this.functionNodeDependencies[functionName] = new Set();\r\n      this.functionCalls[functionName] = [];\r\n    }\r\n    this.functionNodeDependencies[functionName].add(calleeFunctionName);\r\n    this.functionCalls[functionName].push(args);\r\n  }\r\n\r\n  getKernelResultType() {\r\n    return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);\r\n  }\r\n\r\n  getSubKernelResultType(index) {\r\n    const subKernelNode = this.subKernelNodes[index];\r\n    let called = false;\r\n    for (let functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {\r\n      const functionCall = this.rootNode.functionCalls[functionCallIndex];\r\n      if (functionCall.ast.callee.name === subKernelNode.name) {\r\n        called = true;\r\n      }\r\n    }\r\n    if (!called) {\r\n      throw new Error(`SubKernel ${ subKernelNode.name } never called by kernel`);\r\n    }\r\n    return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());\r\n  }\r\n\r\n  getReturnTypes() {\r\n    const result = {\r\n      [this.rootNode.name]: this.rootNode.getType(this.rootNode.ast),\r\n    };\r\n    const list = this.traceFunctionCalls(this.rootNode.name);\r\n    for (let i = 0; i < list.length; i++) {\r\n      const functionName = list[i];\r\n      const functionNode = this.functionMap[functionName];\r\n      result[functionName] = functionNode.getType(functionNode.ast);\r\n    }\r\n    return result;\r\n  }\r\n}\r\n","export class FunctionTracer {\r\n  constructor(ast) {\r\n    this.runningContexts = [];\r\n    this.contexts = [];\r\n    this.functionCalls = [];\r\n    this.declarations = [];\r\n    this.identifiers = [];\r\n    this.functions = [];\r\n    this.returnStatements = [];\r\n    this.inLoopInit = false;\r\n    this.scan(ast);\r\n  }\r\n\r\n  get currentContext() {\r\n    return this.runningContexts.length > 0 ? this.runningContexts[this.runningContexts.length - 1] : null;\r\n  }\r\n\r\n  newContext(run) {\r\n    const newContext = Object.assign({}, this.currentContext);\r\n    this.contexts.push(newContext);\r\n    this.runningContexts.push(newContext);\r\n    run();\r\n    this.runningContexts.pop();\r\n  }\r\n\r\n  /**\r\n   * Recursively scans AST for declarations and functions, and add them to their respective context\r\n   * @param ast\r\n   */\r\n  scan(ast) {\r\n    if (Array.isArray(ast)) {\r\n      for (let i = 0; i < ast.length; i++) {\r\n        this.scan(ast[i]);\r\n      }\r\n      return;\r\n    }\r\n    switch (ast.type) {\r\n      case 'Program':\r\n        this.scan(ast.body);\r\n        break;\r\n      case 'BlockStatement':\r\n        this.newContext(() => {\r\n          this.scan(ast.body);\r\n        });\r\n        break;\r\n      case 'AssignmentExpression':\r\n      case 'LogicalExpression':\r\n        this.scan(ast.left);\r\n        this.scan(ast.right);\r\n        break;\r\n      case 'BinaryExpression':\r\n        this.scan(ast.left);\r\n        this.scan(ast.right);\r\n        break;\r\n      case 'UpdateExpression':\r\n      case 'UnaryExpression':\r\n        this.scan(ast.argument);\r\n        break;\r\n      case 'VariableDeclaration':\r\n        this.scan(ast.declarations);\r\n        break;\r\n      case 'VariableDeclarator':\r\n        const { currentContext } = this;\r\n        const declaration = {\r\n          ast: ast,\r\n          context: currentContext,\r\n          name: ast.id.name,\r\n          origin: 'declaration',\r\n          forceInteger: this.inLoopInit,\r\n          assignable: !this.inLoopInit && !currentContext.hasOwnProperty(ast.id.name),\r\n        };\r\n        currentContext[ast.id.name] = declaration;\r\n        this.declarations.push(declaration);\r\n        this.scan(ast.id);\r\n        this.scan(ast.init);\r\n        break;\r\n      case 'FunctionExpression':\r\n      case 'FunctionDeclaration':\r\n        if (this.runningContexts.length === 0) {\r\n          this.scan(ast.body);\r\n        } else {\r\n          this.functions.push(ast);\r\n        }\r\n        break;\r\n      case 'IfStatement':\r\n        this.scan(ast.test);\r\n        this.scan(ast.consequent);\r\n        if (ast.alternate) this.scan(ast.alternate);\r\n        break;\r\n      case 'ForStatement':\r\n        this.newContext(() => {\r\n          this.inLoopInit = true;\r\n          this.scan(ast.init);\r\n          this.inLoopInit = false;\r\n          this.scan(ast.test);\r\n          this.scan(ast.update);\r\n          this.newContext(() => {\r\n            this.scan(ast.body);\r\n          });\r\n        });\r\n        break;\r\n      case 'DoWhileStatement':\r\n      case 'WhileStatement':\r\n        this.newContext(() => {\r\n          this.scan(ast.body);\r\n          this.scan(ast.test);\r\n        });\r\n        break;\r\n      case 'Identifier':\r\n        this.identifiers.push({\r\n          context: this.currentContext,\r\n          ast,\r\n        });\r\n        break;\r\n      case 'ReturnStatement':\r\n        this.returnStatements.push(ast);\r\n        this.scan(ast.argument);\r\n        break;\r\n      case 'MemberExpression':\r\n        this.scan(ast.object);\r\n        this.scan(ast.property);\r\n        break;\r\n      case 'ExpressionStatement':\r\n        this.scan(ast.expression);\r\n        break;\r\n      case 'CallExpression':\r\n        this.functionCalls.push({\r\n          context: this.currentContext,\r\n          ast,\r\n        });\r\n        this.scan(ast.arguments);\r\n        break;\r\n      case 'ArrayExpression':\r\n        this.scan(ast.elements);\r\n        break;\r\n      case 'ConditionalExpression':\r\n        this.scan(ast.test);\r\n        this.scan(ast.alternate);\r\n        this.scan(ast.consequent);\r\n        break;\r\n      case 'SwitchStatement':\r\n        this.scan(ast.discriminant);\r\n        this.scan(ast.cases);\r\n        break;\r\n      case 'SwitchCase':\r\n        this.scan(ast.test);\r\n        this.scan(ast.consequent);\r\n        break;\r\n      case 'ThisExpression':\r\n        this.scan(ast.left);\r\n        this.scan(ast.right);\r\n        break;\r\n      case 'Literal':\r\n      case 'DebuggerStatement':\r\n      case 'EmptyStatement':\r\n      case 'BreakStatement':\r\n      case 'ContinueStatement':\r\n        break;\r\n      default:\r\n        throw new Error(`unhandled type \"${ast.type}\"`);\r\n    }\r\n  }\r\n}\r\n","import { parse } from 'acorn';\r\nimport { FunctionTracer } from './function-tracer';\r\nimport {\r\n  getArgumentNamesFromString,\r\n  getAstString,\r\n  getFunctionNameFromString,\r\n  isFunctionString,\r\n} from '../common';\r\n\r\n/**\r\n *\r\n * @desc Represents a single function, inside JS, webGL, or openGL.\r\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\r\n */\r\nexport class FunctionNode {\r\n  /**\r\n   *\r\n   * @param {string|object} source\r\n   * @param {IFunctionSettings} [settings]\r\n   */\r\n  constructor(source, settings) {\r\n    if (!source && !settings.ast) {\r\n      throw new Error('source parameter is missing');\r\n    }\r\n    settings = settings || {};\r\n    this.source = source;\r\n    this.ast = null;\r\n    this.name = typeof source === 'string' ? settings.isRootKernel ?\r\n      'kernel' :\r\n      (settings.name || getFunctionNameFromString(source)) : null;\r\n    this.calledFunctions = [];\r\n    this.constants = {};\r\n    this.constantTypes = {};\r\n    this.constantBitRatios = {};\r\n    this.isRootKernel = false;\r\n    this.isSubKernel = false;\r\n    this.debug = null;\r\n    this.declarations = null;\r\n    this.functions = null;\r\n    this.identifiers = null;\r\n    this.contexts = null;\r\n    this.functionCalls = null;\r\n    this.states = [];\r\n    this.needsArgumentType = null;\r\n    this.assignArgumentType = null;\r\n    this.lookupReturnType = null;\r\n    this.lookupFunctionArgumentTypes = null;\r\n    this.lookupFunctionArgumentBitRatio = null;\r\n    this.triggerImplyArgumentType = null;\r\n    this.triggerImplyArgumentBitRatio = null;\r\n    this.onNestedFunction = null;\r\n    this.onFunctionCall = null;\r\n    this.optimizeFloatMemory = null;\r\n    this.precision = null;\r\n    this.loopMaxIterations = null;\r\n    this.argumentNames = (typeof this.source === 'string' ? getArgumentNamesFromString(this.source) : null);\r\n    this.argumentTypes = [];\r\n    this.argumentSizes = [];\r\n    this.argumentBitRatios = null;\r\n    this.returnType = null;\r\n    this.output = [];\r\n    this.plugins = null;\r\n    this.leadingReturnStatement = null;\r\n    this.followingReturnStatement = null;\r\n    this.dynamicOutput = null;\r\n    this.dynamicArguments = null;\r\n    this.strictTypingChecking = false;\r\n    this.fixIntegerDivisionAccuracy = null;\r\n    this.warnVarUsage = true;\r\n\r\n    if (settings) {\r\n      for (const p in settings) {\r\n        if (!settings.hasOwnProperty(p)) continue;\r\n        if (!this.hasOwnProperty(p)) continue;\r\n        this[p] = settings[p];\r\n      }\r\n    }\r\n\r\n    this.literalTypes = {};\r\n\r\n    this.validate();\r\n    this._string = null;\r\n    this._internalVariableNames = {};\r\n  }\r\n\r\n  validate() {\r\n    if (typeof this.source !== 'string' && !this.ast) {\r\n      throw new Error('this.source not a string');\r\n    }\r\n\r\n    if (!this.ast && !isFunctionString(this.source)) {\r\n      throw new Error('this.source not a function string');\r\n    }\r\n\r\n    if (!this.name) {\r\n      throw new Error('this.name could not be set');\r\n    }\r\n\r\n    if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {\r\n      throw new Error(`argumentTypes count of ${ this.argumentTypes.length } exceeds ${ this.argumentNames.length }`);\r\n    }\r\n\r\n    if (this.output.length < 1) {\r\n      throw new Error('this.output is not big enough');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {String} name\r\n   * @returns {boolean}\r\n   */\r\n  isIdentifierConstant(name) {\r\n    if (!this.constants) return false;\r\n    return this.constants.hasOwnProperty(name);\r\n  }\r\n\r\n  isInput(argumentName) {\r\n    return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';\r\n  }\r\n\r\n  pushState(state) {\r\n    this.states.push(state);\r\n  }\r\n\r\n  popState(state) {\r\n    if (this.state !== state) {\r\n      throw new Error(`Cannot popState ${ state } when in ${ this.state }`);\r\n    }\r\n    this.states.pop();\r\n  }\r\n\r\n  isState(state) {\r\n    return this.state === state;\r\n  }\r\n\r\n  get state() {\r\n    return this.states[this.states.length - 1];\r\n  }\r\n\r\n  /**\r\n   * @function\r\n   * @name astMemberExpressionUnroll\r\n   * @desc Parses the abstract syntax tree for binary expression.\r\n   *\r\n   * <p>Utility function for astCallExpression.</p>\r\n   *\r\n   * @param {Object} ast - the AST object to parse\r\n   *\r\n   * @returns {String} the function namespace call, unrolled\r\n   */\r\n  astMemberExpressionUnroll(ast) {\r\n    if (ast.type === 'Identifier') {\r\n      return ast.name;\r\n    } else if (ast.type === 'ThisExpression') {\r\n      return 'this';\r\n    }\r\n\r\n    if (ast.type === 'MemberExpression') {\r\n      if (ast.object && ast.property) {\r\n        //babel sniffing\r\n        if (ast.object.hasOwnProperty('name') && ast.object.name[0] === '_') {\r\n          return this.astMemberExpressionUnroll(ast.property);\r\n        }\r\n\r\n        return (\r\n          this.astMemberExpressionUnroll(ast.object) +\r\n          '.' +\r\n          this.astMemberExpressionUnroll(ast.property)\r\n        );\r\n      }\r\n    }\r\n\r\n    //babel sniffing\r\n    if (ast.hasOwnProperty('expressions')) {\r\n      const firstExpression = ast.expressions[0];\r\n      if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {\r\n        return this.astMemberExpressionUnroll(ast.expressions[1]);\r\n      }\r\n    }\r\n\r\n    // Failure, unknown expression\r\n    throw this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the class function JS, and returns its Abstract Syntax Tree object.\r\n   * This is used internally to convert to shader code\r\n   *\r\n   * @param {Object} [inParser] - Parser to use, assumes in scope 'parser' if null or undefined\r\n   *\r\n   * @returns {Object} The function AST Object, note that result is cached under this.ast;\r\n   */\r\n  getJsAST(inParser) {\r\n    if (this.ast) {\r\n      return this.ast;\r\n    }\r\n    if (typeof this.source === 'object') {\r\n      this.traceFunctionAST(this.source);\r\n      return this.ast = this.source;\r\n    }\r\n\r\n    const parser = inParser && inParser.hasOwnProperty('parse') ? inParser.parse : parse\r\n    if (inParser === null) {\r\n      throw new Error('Missing JS to AST parser');\r\n    }\r\n\r\n    const ast = Object.freeze(parser(`const parser_${ this.name } = ${ this.source };`, {\r\n      locations: true\r\n    }));\r\n    // take out the function object, outside the var declarations\r\n    const functionAST = ast.body[0].declarations[0].init;\r\n    this.traceFunctionAST(functionAST);\r\n\r\n    if (!ast) {\r\n      throw new Error('Failed to parse JS code');\r\n    }\r\n\r\n    return this.ast = functionAST;\r\n  }\r\n\r\n  traceFunctionAST(ast) {\r\n    const { contexts, declarations, functions, identifiers, functionCalls } = new FunctionTracer(ast);\r\n    this.contexts = contexts;\r\n    this.identifiers = identifiers;\r\n    this.functionCalls = functionCalls;\r\n    this.declarations = [];\r\n    this.functions = functions;\r\n    for (let i = 0; i < declarations.length; i++) {\r\n      const declaration = declarations[i];\r\n      const { ast, context, name, origin, forceInteger, assignable } = declaration;\r\n      const { init } = ast;\r\n      const dependencies = this.getDependencies(init);\r\n      let valueType = null;\r\n\r\n      if (forceInteger) {\r\n        valueType = 'Integer';\r\n      } else {\r\n        if (init) {\r\n          const realType = this.getType(init);\r\n          switch (realType) {\r\n            case 'Integer':\r\n            case 'Float':\r\n            case 'Number':\r\n              if (init.type === 'MemberExpression') {\r\n                valueType = realType;\r\n              } else {\r\n                valueType = 'Number';\r\n              }\r\n              break;\r\n            case 'LiteralInteger':\r\n              valueType = 'Number';\r\n              break;\r\n            default:\r\n              valueType = realType;\r\n          }\r\n        }\r\n      }\r\n      this.declarations.push({\r\n        valueType,\r\n        dependencies,\r\n        isSafe: this.isSafeDependencies(dependencies),\r\n        ast,\r\n        name,\r\n        context,\r\n        origin,\r\n        assignable,\r\n      });\r\n    }\r\n\r\n    for (let i = 0; i < functions.length; i++) {\r\n      this.onNestedFunction(functions[i]);\r\n    }\r\n  }\r\n\r\n  getDeclaration(ast) {\r\n    for (let i = 0; i < this.identifiers.length; i++) {\r\n      const identifier = this.identifiers[i];\r\n      if (ast === identifier.ast && identifier.context.hasOwnProperty(ast.name)) {\r\n        for (let j = 0; j < this.declarations.length; j++) {\r\n          const declaration = this.declarations[j];\r\n          if (declaration.name === ast.name && declaration.context[ast.name] === identifier.context[ast.name]) {\r\n            return declaration;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @desc Return the type of parameter sent to subKernel/Kernel.\r\n   * @param {Object} ast - Identifier\r\n   * @returns {String} Type of the parameter\r\n   */\r\n  getVariableType(ast) {\r\n    if (ast.type !== 'Identifier') {\r\n      throw new Error(`ast of ${ast.type} not \"Identifier\"`);\r\n    }\r\n    let type = null;\r\n    const argumentIndex = this.argumentNames.indexOf(ast.name);\r\n    if (argumentIndex === -1) {\r\n      const declaration = this.getDeclaration(ast);\r\n      if (declaration) {\r\n        return declaration.valueType;\r\n      }\r\n    } else {\r\n      const argumentType = this.argumentTypes[argumentIndex];\r\n      if (argumentType) {\r\n        type = argumentType;\r\n      }\r\n    }\r\n    if (!type && this.strictTypingChecking) {\r\n      throw new Error(`Declaration of ${name} not found`);\r\n    }\r\n    return type;\r\n  }\r\n\r\n  /**\r\n   * Generally used to lookup the value type returned from a member expressions\r\n   * @param {String} type\r\n   * @return {String}\r\n   */\r\n  getLookupType(type) {\r\n    if (!typeLookupMap.hasOwnProperty(type)) {\r\n      throw new Error(`unknown typeLookupMap ${ type }`);\r\n    }\r\n    return typeLookupMap[type];\r\n  }\r\n\r\n  getConstantType(constantName) {\r\n    if (this.constantTypes[constantName]) {\r\n      const type = this.constantTypes[constantName];\r\n      if (type === 'Float') {\r\n        return 'Number';\r\n      } else {\r\n        return type;\r\n      }\r\n    }\r\n    throw new Error(`Type for constant \"${ constantName }\" not declared`);\r\n  }\r\n\r\n  toString() {\r\n    if (this._string) return this._string;\r\n    return this._string = this.astGeneric(this.getJsAST(), []).join('').trim();\r\n  }\r\n\r\n  toJSON() {\r\n    const settings = {\r\n      source: this.source,\r\n      name: this.name,\r\n      constants: this.constants,\r\n      constantTypes: this.constantTypes,\r\n      isRootKernel: this.isRootKernel,\r\n      isSubKernel: this.isSubKernel,\r\n      debug: this.debug,\r\n      output: this.output,\r\n      loopMaxIterations: this.loopMaxIterations,\r\n      argumentNames: this.argumentNames,\r\n      argumentTypes: this.argumentTypes,\r\n      argumentSizes: this.argumentSizes,\r\n      returnType: this.returnType,\r\n      leadingReturnStatement: this.leadingReturnStatement,\r\n      followingReturnStatement: this.followingReturnStatement,\r\n    };\r\n\r\n    return {\r\n      ast: this.ast,\r\n      settings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Recursively looks up type for ast expression until it's found\r\n   * @param ast\r\n   * @returns {String|null}\r\n   */\r\n  getType(ast) {\r\n    if (Array.isArray(ast)) {\r\n      return this.getType(ast[ast.length - 1]);\r\n    }\r\n    switch (ast.type) {\r\n      case 'BlockStatement':\r\n        return this.getType(ast.body);\r\n      case 'ArrayExpression':\r\n        return `Array(${ ast.elements.length })`;\r\n      case 'Literal':\r\n        const literalKey = `${ast.start},${ast.end}`;\r\n        if (this.literalTypes[literalKey]) {\r\n          return this.literalTypes[literalKey];\r\n        }\r\n        if (Number.isInteger(ast.value)) {\r\n          return 'LiteralInteger';\r\n        } else if (ast.value === true || ast.value === false) {\r\n          return 'Boolean';\r\n        } else {\r\n          return 'Number';\r\n        }\r\n        case 'AssignmentExpression':\r\n          return this.getType(ast.left);\r\n        case 'CallExpression':\r\n          if (this.isAstMathFunction(ast)) {\r\n            return 'Number';\r\n          }\r\n          if (!ast.callee || !ast.callee.name) {\r\n            if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {\r\n              const functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;\r\n              this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\r\n              return this.lookupReturnType(functionName, ast, this);\r\n            }\r\n            throw this.astErrorOutput('Unknown call expression', ast);\r\n          }\r\n          if (ast.callee && ast.callee.name) {\r\n            const functionName = ast.callee.name;\r\n            this.inferArgumentTypesIfNeeded(functionName, ast.arguments);\r\n            return this.lookupReturnType(functionName, ast, this);\r\n          }\r\n          throw this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\r\n        case 'BinaryExpression':\r\n          // modulos is Number\r\n          switch (ast.operator) {\r\n            case '%':\r\n            case '/':\r\n              if (this.fixIntegerDivisionAccuracy) {\r\n                return 'Number';\r\n              } else {\r\n                break;\r\n              }\r\n              case '>':\r\n              case '<':\r\n                return 'Boolean';\r\n              case '&':\r\n              case '|':\r\n              case '^':\r\n              case '<<':\r\n              case '>>':\r\n              case '>>>':\r\n                return 'Integer';\r\n          }\r\n          const type = this.getType(ast.left);\r\n          if (this.isState('skip-literal-correction')) return type;\r\n          if (type === 'LiteralInteger') {\r\n            const rightType = this.getType(ast.right);\r\n            if (rightType === 'LiteralInteger') {\r\n              if (ast.left.value % 1 === 0) {\r\n                return 'Integer';\r\n              } else {\r\n                return 'Float';\r\n              }\r\n            }\r\n            return rightType;\r\n          }\r\n          return typeLookupMap[type] || type;\r\n        case 'UpdateExpression':\r\n          return this.getType(ast.argument);\r\n        case 'UnaryExpression':\r\n          if (ast.operator === '~') {\r\n            return 'Integer';\r\n          }\r\n          return this.getType(ast.argument);\r\n        case 'VariableDeclaration': {\r\n          const declarations = ast.declarations;\r\n          let lastType;\r\n          for (let i = 0; i < declarations.length; i++) {\r\n            const declaration = declarations[i];\r\n            lastType = this.getType(declaration);\r\n          }\r\n          if (!lastType) {\r\n            throw this.astErrorOutput(`Unable to find type for declaration`, ast);\r\n          }\r\n          return lastType;\r\n        }\r\n        case 'VariableDeclarator':\r\n          const declaration = this.getDeclaration(ast.id);\r\n          if (!declaration) {\r\n            throw this.astErrorOutput(`Unable to find declarator`, ast);\r\n          }\r\n\r\n          if (!declaration.valueType) {\r\n            throw this.astErrorOutput(`Unable to find declarator valueType`, ast);\r\n          }\r\n\r\n          return declaration.valueType;\r\n        case 'Identifier':\r\n          if (ast.name === 'Infinity') {\r\n            return 'Number';\r\n          }\r\n          if (this.isAstVariable(ast)) {\r\n            const signature = this.getVariableSignature(ast);\r\n            if (signature === 'value') {\r\n              const type = this.getVariableType(ast);\r\n              if (!type) {\r\n                throw this.astErrorOutput(`Unable to find identifier valueType`, ast);\r\n              }\r\n              return type;\r\n            }\r\n          }\r\n          const origin = this.findIdentifierOrigin(ast);\r\n          if (origin && origin.init) {\r\n            return this.getType(origin.init);\r\n          }\r\n          return null;\r\n        case 'ReturnStatement':\r\n          return this.getType(ast.argument);\r\n        case 'MemberExpression':\r\n          if (this.isAstMathFunction(ast)) {\r\n            switch (ast.property.name) {\r\n              case 'ceil':\r\n                return 'Integer';\r\n              case 'floor':\r\n                return 'Integer';\r\n              case 'round':\r\n                return 'Integer';\r\n            }\r\n            return 'Number';\r\n          }\r\n          if (this.isAstVariable(ast)) {\r\n            const variableSignature = this.getVariableSignature(ast);\r\n            switch (variableSignature) {\r\n              case 'value[]':\r\n                return this.getLookupType(this.getVariableType(ast.object));\r\n              case 'value[][]':\r\n                return this.getLookupType(this.getVariableType(ast.object.object));\r\n              case 'value[][][]':\r\n                return this.getLookupType(this.getVariableType(ast.object.object.object));\r\n              case 'value[][][][]':\r\n                return this.getLookupType(this.getVariableType(ast.object.object.object.object));\r\n              case 'value.thread.value':\r\n              case 'this.thread.value':\r\n                return 'Integer';\r\n              case 'this.output.value':\r\n                return this.dynamicOutput ? 'Integer' : 'LiteralInteger';\r\n              case 'this.constants.value':\r\n                return this.getConstantType(ast.property.name);\r\n              case 'this.constants.value[]':\r\n                return this.getLookupType(this.getConstantType(ast.object.property.name));\r\n              case 'this.constants.value[][]':\r\n                return this.getLookupType(this.getConstantType(ast.object.object.property.name));\r\n              case 'this.constants.value[][][]':\r\n                return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));\r\n              case 'this.constants.value[][][][]':\r\n                return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));\r\n              case 'fn()[]':\r\n                return this.getLookupType(this.getType(ast.object));\r\n              case 'fn()[][]':\r\n                return this.getLookupType(this.getType(ast.object));\r\n              case 'fn()[][][]':\r\n                return this.getLookupType(this.getType(ast.object));\r\n              case 'value.value':\r\n                if (this.isAstMathVariable(ast)) {\r\n                  return 'Number';\r\n                }\r\n                switch (ast.property.name) {\r\n                  case 'r':\r\n                    return this.getLookupType(this.getVariableType(ast.object));\r\n                  case 'g':\r\n                    return this.getLookupType(this.getVariableType(ast.object));\r\n                  case 'b':\r\n                    return this.getLookupType(this.getVariableType(ast.object));\r\n                  case 'a':\r\n                    return this.getLookupType(this.getVariableType(ast.object));\r\n                }\r\n                case '[][]':\r\n                  return 'Number';\r\n            }\r\n            throw this.astErrorOutput('Unhandled getType MemberExpression', ast);\r\n          }\r\n          throw this.astErrorOutput('Unhandled getType MemberExpression', ast);\r\n        case 'ConditionalExpression':\r\n          return this.getType(ast.consequent);\r\n        case 'FunctionDeclaration':\r\n        case 'FunctionExpression':\r\n          const lastReturn = this.findLastReturn(ast.body);\r\n          if (lastReturn) {\r\n            return this.getType(lastReturn);\r\n          }\r\n          return null;\r\n        case 'IfStatement':\r\n          return this.getType(ast.consequent);\r\n        default:\r\n          throw this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\r\n    }\r\n  }\r\n\r\n  inferArgumentTypesIfNeeded(functionName, args) {\r\n    // ensure arguments are filled in, so when we lookup return type, we already can infer it\r\n    for (let i = 0; i < args.length; i++) {\r\n      if (!this.needsArgumentType(functionName, i)) continue;\r\n      const type = this.getType(args[i]);\r\n      if (!type) {\r\n        throw this.astErrorOutput(`Unable to infer argument ${i}`, args[i]);\r\n      }\r\n      this.assignArgumentType(functionName, i, type);\r\n    }\r\n  }\r\n\r\n  isAstMathVariable(ast) {\r\n    const mathProperties = [\r\n      'E',\r\n      'PI',\r\n      'SQRT2',\r\n      'SQRT1_2',\r\n      'LN2',\r\n      'LN10',\r\n      'LOG2E',\r\n      'LOG10E',\r\n    ];\r\n    return ast.type === 'MemberExpression' &&\r\n      ast.object && ast.object.type === 'Identifier' &&\r\n      ast.object.name === 'Math' &&\r\n      ast.property &&\r\n      ast.property.type === 'Identifier' &&\r\n      mathProperties.indexOf(ast.property.name) > -1;\r\n  }\r\n\r\n  isAstMathFunction(ast) {\r\n    const mathFunctions = [\r\n      'abs',\r\n      'acos',\r\n      'asin',\r\n      'atan',\r\n      'atan2',\r\n      'ceil',\r\n      'cos',\r\n      'exp',\r\n      'floor',\r\n      'log',\r\n      'log2',\r\n      'max',\r\n      'min',\r\n      'pow',\r\n      'random',\r\n      'round',\r\n      'sign',\r\n      'sin',\r\n      'sqrt',\r\n      'tan',\r\n    ];\r\n    return ast.type === 'CallExpression' &&\r\n      ast.callee &&\r\n      ast.callee.type === 'MemberExpression' &&\r\n      ast.callee.object &&\r\n      ast.callee.object.type === 'Identifier' &&\r\n      ast.callee.object.name === 'Math' &&\r\n      ast.callee.property &&\r\n      ast.callee.property.type === 'Identifier' &&\r\n      mathFunctions.indexOf(ast.callee.property.name) > -1;\r\n  }\r\n\r\n  isAstVariable(ast) {\r\n    return ast.type === 'Identifier' || ast.type === 'MemberExpression';\r\n  }\r\n\r\n  isSafe(ast) {\r\n    return this.isSafeDependencies(this.getDependencies(ast));\r\n  }\r\n\r\n  isSafeDependencies(dependencies) {\r\n    return dependencies && dependencies.every ? dependencies.every(dependency => dependency.isSafe) : true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param ast\r\n   * @param dependencies\r\n   * @param isNotSafe\r\n   * @return {Array}\r\n   */\r\n  getDependencies(ast, dependencies, isNotSafe) {\r\n    if (!dependencies) {\r\n      dependencies = [];\r\n    }\r\n    if (!ast) return null;\r\n    if (Array.isArray(ast)) {\r\n      for (let i = 0; i < ast.length; i++) {\r\n        this.getDependencies(ast[i], dependencies, isNotSafe);\r\n      }\r\n      return dependencies;\r\n    }\r\n    switch (ast.type) {\r\n      case 'AssignmentExpression':\r\n        this.getDependencies(ast.left, dependencies, isNotSafe);\r\n        this.getDependencies(ast.right, dependencies, isNotSafe);\r\n        return dependencies;\r\n      case 'ConditionalExpression':\r\n        this.getDependencies(ast.test, dependencies, isNotSafe);\r\n        this.getDependencies(ast.alternate, dependencies, isNotSafe);\r\n        this.getDependencies(ast.consequent, dependencies, isNotSafe);\r\n        return dependencies;\r\n      case 'Literal':\r\n        dependencies.push({\r\n          origin: 'literal',\r\n          value: ast.value,\r\n          isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)\r\n        });\r\n        break;\r\n      case 'VariableDeclarator':\r\n        return this.getDependencies(ast.init, dependencies, isNotSafe);\r\n      case 'Identifier':\r\n        const declaration = this.getDeclaration(ast);\r\n        if (declaration) {\r\n          dependencies.push({\r\n            name: ast.name,\r\n            origin: 'declaration',\r\n            isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies),\r\n          });\r\n        } else if (this.argumentNames.indexOf(ast.name) > -1) {\r\n          dependencies.push({\r\n            name: ast.name,\r\n            origin: 'argument',\r\n            isSafe: false,\r\n          });\r\n        } else if (this.strictTypingChecking) {\r\n          throw new Error(`Cannot find identifier origin \"${ast.name}\"`);\r\n        }\r\n        break;\r\n      case 'FunctionDeclaration':\r\n        return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);\r\n      case 'ReturnStatement':\r\n        return this.getDependencies(ast.argument, dependencies);\r\n      case 'BinaryExpression':\r\n        isNotSafe = (ast.operator === '/' || ast.operator === '*');\r\n        this.getDependencies(ast.left, dependencies, isNotSafe);\r\n        this.getDependencies(ast.right, dependencies, isNotSafe);\r\n        return dependencies;\r\n      case 'UnaryExpression':\r\n      case 'UpdateExpression':\r\n        return this.getDependencies(ast.argument, dependencies, isNotSafe);\r\n      case 'VariableDeclaration':\r\n        return this.getDependencies(ast.declarations, dependencies, isNotSafe);\r\n      case 'ArrayExpression':\r\n        dependencies.push({\r\n          origin: 'declaration',\r\n          isSafe: true,\r\n        });\r\n        return dependencies;\r\n      case 'CallExpression':\r\n        dependencies.push({\r\n          origin: 'function',\r\n          isSafe: true,\r\n        });\r\n        return dependencies;\r\n      case 'MemberExpression':\r\n        const details = this.getMemberExpressionDetails(ast);\r\n        switch (details.signature) {\r\n          case 'value[]':\r\n            this.getDependencies(ast.object, dependencies, isNotSafe);\r\n            break;\r\n          case 'value[][]':\r\n            this.getDependencies(ast.object.object, dependencies, isNotSafe);\r\n            break;\r\n          case 'value[][][]':\r\n            this.getDependencies(ast.object.object.object, dependencies, isNotSafe);\r\n            break;\r\n          case 'this.output.value':\r\n            if (this.dynamicOutput) {\r\n              dependencies.push({\r\n                name: details.name,\r\n                origin: 'output',\r\n                isSafe: false,\r\n              });\r\n            }\r\n            break;\r\n        }\r\n        if (details) {\r\n          if (details.property) {\r\n            this.getDependencies(details.property, dependencies, isNotSafe);\r\n          }\r\n          if (details.xProperty) {\r\n            this.getDependencies(details.xProperty, dependencies, isNotSafe);\r\n          }\r\n          if (details.yProperty) {\r\n            this.getDependencies(details.yProperty, dependencies, isNotSafe);\r\n          }\r\n          if (details.zProperty) {\r\n            this.getDependencies(details.zProperty, dependencies, isNotSafe);\r\n          }\r\n          return dependencies;\r\n        }\r\n        default:\r\n          throw this.astErrorOutput(`Unhandled type ${ ast.type } in getDependencies`, ast);\r\n    }\r\n    return dependencies;\r\n  }\r\n\r\n  getVariableSignature(ast) {\r\n    if (!this.isAstVariable(ast)) {\r\n      throw new Error(`ast of type \"${ ast.type }\" is not a variable signature`);\r\n    }\r\n    if (ast.type === 'Identifier') {\r\n      return 'value';\r\n    }\r\n    const signature = [];\r\n    while (true) {\r\n      if (!ast) break;\r\n      if (ast.computed) {\r\n        signature.push('[]');\r\n      } else if (ast.type === 'ThisExpression') {\r\n        signature.unshift('this');\r\n      } else if (ast.property && ast.property.name) {\r\n        if (\r\n          ast.property.name === 'x' ||\r\n          ast.property.name === 'y' ||\r\n          ast.property.name === 'z'\r\n        ) {\r\n          signature.unshift('.value');\r\n        } else if (\r\n          ast.property.name === 'constants' ||\r\n          ast.property.name === 'thread' ||\r\n          ast.property.name === 'output'\r\n        ) {\r\n          signature.unshift('.' + ast.property.name);\r\n        } else {\r\n          signature.unshift('.value');\r\n        }\r\n      } else if (ast.name) {\r\n        signature.unshift('value');\r\n      } else if (ast.callee && ast.callee.name) {\r\n        signature.unshift('fn()');\r\n      } else if (ast.elements) {\r\n        signature.unshift('[]');\r\n      } else {\r\n        signature.unshift('unknown');\r\n      }\r\n      ast = ast.object;\r\n    }\r\n\r\n    const signatureString = signature.join('');\r\n    const allowedExpressions = [\r\n      'value',\r\n      'value[]',\r\n      'value[][]',\r\n      'value[][][]',\r\n      'value[][][][]',\r\n      'value.value',\r\n      'value.thread.value',\r\n      'this.thread.value',\r\n      'this.output.value',\r\n      'this.constants.value',\r\n      'this.constants.value[]',\r\n      'this.constants.value[][]',\r\n      'this.constants.value[][][]',\r\n      'this.constants.value[][][][]',\r\n      'fn()[]',\r\n      'fn()[][]',\r\n      'fn()[][][]',\r\n      '[][]',\r\n    ];\r\n    if (allowedExpressions.indexOf(signatureString) > -1) {\r\n      return signatureString;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  build() {\r\n    return this.toString().length > 0;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for generically to its respective function\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed string array\r\n   */\r\n  astGeneric(ast, retArr) {\r\n    if (ast === null) {\r\n      throw this.astErrorOutput('NULL ast', ast);\r\n    } else {\r\n      if (Array.isArray(ast)) {\r\n        for (let i = 0; i < ast.length; i++) {\r\n          this.astGeneric(ast[i], retArr);\r\n        }\r\n        return retArr;\r\n      }\r\n\r\n      switch (ast.type) {\r\n        case 'FunctionDeclaration':\r\n          return this.astFunctionDeclaration(ast, retArr);\r\n        case 'FunctionExpression':\r\n          return this.astFunctionExpression(ast, retArr);\r\n        case 'ReturnStatement':\r\n          return this.astReturnStatement(ast, retArr);\r\n        case 'Literal':\r\n          return this.astLiteral(ast, retArr);\r\n        case 'BinaryExpression':\r\n          return this.astBinaryExpression(ast, retArr);\r\n        case 'Identifier':\r\n          return this.astIdentifierExpression(ast, retArr);\r\n        case 'AssignmentExpression':\r\n          return this.astAssignmentExpression(ast, retArr);\r\n        case 'ExpressionStatement':\r\n          return this.astExpressionStatement(ast, retArr);\r\n        case 'EmptyStatement':\r\n          return this.astEmptyStatement(ast, retArr);\r\n        case 'BlockStatement':\r\n          return this.astBlockStatement(ast, retArr);\r\n        case 'IfStatement':\r\n          return this.astIfStatement(ast, retArr);\r\n        case 'SwitchStatement':\r\n          return this.astSwitchStatement(ast, retArr);\r\n        case 'BreakStatement':\r\n          return this.astBreakStatement(ast, retArr);\r\n        case 'ContinueStatement':\r\n          return this.astContinueStatement(ast, retArr);\r\n        case 'ForStatement':\r\n          return this.astForStatement(ast, retArr);\r\n        case 'WhileStatement':\r\n          return this.astWhileStatement(ast, retArr);\r\n        case 'DoWhileStatement':\r\n          return this.astDoWhileStatement(ast, retArr);\r\n        case 'VariableDeclaration':\r\n          return this.astVariableDeclaration(ast, retArr);\r\n        case 'VariableDeclarator':\r\n          return this.astVariableDeclarator(ast, retArr);\r\n        case 'ThisExpression':\r\n          return this.astThisExpression(ast, retArr);\r\n        case 'SequenceExpression':\r\n          return this.astSequenceExpression(ast, retArr);\r\n        case 'UnaryExpression':\r\n          return this.astUnaryExpression(ast, retArr);\r\n        case 'UpdateExpression':\r\n          return this.astUpdateExpression(ast, retArr);\r\n        case 'LogicalExpression':\r\n          return this.astLogicalExpression(ast, retArr);\r\n        case 'MemberExpression':\r\n          return this.astMemberExpression(ast, retArr);\r\n        case 'CallExpression':\r\n          return this.astCallExpression(ast, retArr);\r\n        case 'ArrayExpression':\r\n          return this.astArrayExpression(ast, retArr);\r\n        case 'DebuggerStatement':\r\n          return this.astDebuggerStatement(ast, retArr);\r\n        case 'ConditionalExpression':\r\n          return this.astConditionalExpression(ast, retArr);\r\n      }\r\n\r\n      throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);\r\n    }\r\n  }\r\n  /**\r\n   * @desc To throw the AST error, with its location.\r\n   * @param {string} error - the error message output\r\n   * @param {Object} ast - the AST object where the error is\r\n   */\r\n  astErrorOutput(error, ast) {\r\n    if (typeof this.source !== 'string') {\r\n      return new Error(error);\r\n    }\r\n\r\n    const debugString = getAstString(this.source, ast);\r\n    const leadingSource = this.source.substr(ast.start);\r\n    const splitLines = leadingSource.split(/\\n/);\r\n    const lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;\r\n    return new Error(`${error} on line ${ splitLines.length }, position ${ lineBefore.length }:\\n ${ debugString }`);\r\n  }\r\n\r\n  astDebuggerStatement(arrNode, retArr) {\r\n    return retArr;\r\n  }\r\n\r\n  astConditionalExpression(ast, retArr) {\r\n    if (ast.type !== 'ConditionalExpression') {\r\n      throw this.astErrorOutput('Not a conditional expression', ast);\r\n    }\r\n    retArr.push('(');\r\n    this.astGeneric(ast.test, retArr);\r\n    retArr.push('?');\r\n    this.astGeneric(ast.consequent, retArr);\r\n    retArr.push(':');\r\n    this.astGeneric(ast.alternate, retArr);\r\n    retArr.push(')');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} ast\r\n   * @param {String[]} retArr\r\n   * @returns {String[]}\r\n   */\r\n  astFunction(ast, retArr) {\r\n    throw new Error(`\"astFunction\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for to its *named function declaration*\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astFunctionDeclaration(ast, retArr) {\r\n    if (this.isChildFunction(ast)) {\r\n      return retArr;\r\n    }\r\n    return this.astFunction(ast, retArr);\r\n  }\r\n  astFunctionExpression(ast, retArr) {\r\n    if (this.isChildFunction(ast)) {\r\n      return retArr;\r\n    }\r\n    return this.astFunction(ast, retArr);\r\n  }\r\n  isChildFunction(ast) {\r\n    for (let i = 0; i < this.functions.length; i++) {\r\n      if (this.functions[i] === ast) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  astReturnStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astLiteral(ast, retArr) {\r\n    this.literalTypes[`${ast.start},${ast.end}`] = 'Number';\r\n    return retArr;\r\n  }\r\n  astBinaryExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astIdentifierExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astAssignmentExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *generic expression* statement\r\n   * @param {Object} esNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astExpressionStatement(esNode, retArr) {\r\n    this.astGeneric(esNode.expression, retArr);\r\n    retArr.push(';');\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for an *Empty* Statement\r\n   * @param {Object} eNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astEmptyStatement(eNode, retArr) {\r\n    return retArr;\r\n  }\r\n  astBlockStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astIfStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astSwitchStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Break* Statement\r\n   * @param {Object} brNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astBreakStatement(brNode, retArr) {\r\n    retArr.push('break;');\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Continue* Statement\r\n   * @param {Object} crNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astContinueStatement(crNode, retArr) {\r\n    retArr.push('continue;\\n');\r\n    return retArr;\r\n  }\r\n  astForStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astWhileStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astDoWhileStatement(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\r\n   * @param {Object} varDecNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astVariableDeclaration(varDecNode, retArr) {\r\n    const declarations = varDecNode.declarations;\r\n    if (!declarations || !declarations[0] || !declarations[0].init) {\r\n      throw this.astErrorOutput('Unexpected expression', varDecNode);\r\n    }\r\n    const result = [];\r\n    const firstDeclaration = declarations[0];\r\n    const init = firstDeclaration.init;\r\n    let type = this.isState('in-for-loop-init') ? 'Integer' : this.getType(init);\r\n    if (type === 'LiteralInteger') {\r\n      // We had the choice to go either float or int, choosing float\r\n      type = 'Number';\r\n    }\r\n    const markupType = typeMap[type];\r\n    if (!markupType) {\r\n      throw this.astErrorOutput(`Markup type ${ markupType } not handled`, varDecNode);\r\n    }\r\n    let dependencies = this.getDependencies(firstDeclaration.init);\r\n    throw new Error('remove me');\r\n    this.declarations[firstDeclaration.id.name] = Object.freeze({\r\n      type,\r\n      dependencies,\r\n      isSafe: dependencies.every(dependency => dependency.isSafe)\r\n    });\r\n    const initResult = [`${type} user_${firstDeclaration.id.name}=`];\r\n    this.astGeneric(init, initResult);\r\n    result.push(initResult.join(''));\r\n\r\n    // first declaration is done, now any added ones setup\r\n    for (let i = 1; i < declarations.length; i++) {\r\n      const declaration = declarations[i];\r\n      dependencies = this.getDependencies(declaration);\r\n      throw new Error('Remove me');\r\n      this.declarations[declaration.id.name] = Object.freeze({\r\n        type,\r\n        dependencies,\r\n        isSafe: false\r\n      });\r\n      this.astGeneric(declaration, result);\r\n    }\r\n\r\n    retArr.push(retArr, result.join(','));\r\n    retArr.push(';');\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Variable Declarator*\r\n   * @param {Object} iVarDecNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astVariableDeclarator(iVarDecNode, retArr) {\r\n    this.astGeneric(iVarDecNode.id, retArr);\r\n    if (iVarDecNode.init !== null) {\r\n      retArr.push('=');\r\n      this.astGeneric(iVarDecNode.init, retArr);\r\n    }\r\n    return retArr;\r\n  }\r\n  astThisExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astSequenceExpression(sNode, retArr) {\r\n    for (let i = 0; i < sNode.expressions.length; i++) {\r\n      if (i > 0) {\r\n        retArr.push(',');\r\n      }\r\n      this.astGeneric(sNode.expressions, retArr);\r\n    }\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Unary* Expression\r\n   * @param {Object} uNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astUnaryExpression(uNode, retArr) {\r\n    const unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);\r\n    if (unaryResult) {\r\n      return retArr;\r\n    }\r\n\r\n    if (uNode.prefix) {\r\n      retArr.push(uNode.operator);\r\n      this.astGeneric(uNode.argument, retArr);\r\n    } else {\r\n      this.astGeneric(uNode.argument, retArr);\r\n      retArr.push(uNode.operator);\r\n    }\r\n\r\n    return retArr;\r\n  }\r\n\r\n  checkAndUpconvertBitwiseUnary(uNode, retArr) {}\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Update* Expression\r\n   * @param {Object} uNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astUpdateExpression(uNode, retArr) {\r\n    if (uNode.prefix) {\r\n      retArr.push(uNode.operator);\r\n      this.astGeneric(uNode.argument, retArr);\r\n    } else {\r\n      this.astGeneric(uNode.argument, retArr);\r\n      retArr.push(uNode.operator);\r\n    }\r\n\r\n    return retArr;\r\n  }\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Logical* Expression\r\n   * @param {Object} logNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astLogicalExpression(logNode, retArr) {\r\n    retArr.push('(');\r\n    this.astGeneric(logNode.left, retArr);\r\n    retArr.push(logNode.operator);\r\n    this.astGeneric(logNode.right, retArr);\r\n    retArr.push(')');\r\n    return retArr;\r\n  }\r\n  astMemberExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astCallExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n  astArrayExpression(ast, retArr) {\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param ast\r\n   * @return {IFunctionNodeMemberExpressionDetails}\r\n   */\r\n  getMemberExpressionDetails(ast) {\r\n    if (ast.type !== 'MemberExpression') {\r\n      throw this.astErrorOutput(`Expression ${ ast.type } not a MemberExpression`, ast);\r\n    }\r\n    let name = null;\r\n    let type = null;\r\n    const variableSignature = this.getVariableSignature(ast);\r\n    switch (variableSignature) {\r\n      case 'value':\r\n        return null;\r\n      case 'value.thread.value':\r\n      case 'this.thread.value':\r\n      case 'this.output.value':\r\n        return {\r\n          signature: variableSignature,\r\n            type: 'Integer',\r\n            name: ast.property.name\r\n        };\r\n      case 'value[]':\r\n        if (typeof ast.object.name !== 'string') {\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        name = ast.object.name;\r\n        return {\r\n          name,\r\n          origin: 'user',\r\n            signature: variableSignature,\r\n            type: this.getVariableType(ast.object),\r\n            xProperty: ast.property\r\n        };\r\n      case 'value[][]':\r\n        if (typeof ast.object.object.name !== 'string') {\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        name = ast.object.object.name;\r\n        return {\r\n          name,\r\n          origin: 'user',\r\n            signature: variableSignature,\r\n            type: this.getVariableType(ast.object.object),\r\n            yProperty: ast.object.property,\r\n            xProperty: ast.property,\r\n        };\r\n      case 'value[][][]':\r\n        if (typeof ast.object.object.object.name !== 'string') {\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        name = ast.object.object.object.name;\r\n        return {\r\n          name,\r\n          origin: 'user',\r\n            signature: variableSignature,\r\n            type: this.getVariableType(ast.object.object.object),\r\n            zProperty: ast.object.object.property,\r\n            yProperty: ast.object.property,\r\n            xProperty: ast.property,\r\n        };\r\n      case 'value[][][][]':\r\n        if (typeof ast.object.object.object.object.name !== 'string') {\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        name = ast.object.object.object.object.name;\r\n        return {\r\n          name,\r\n          origin: 'user',\r\n            signature: variableSignature,\r\n            type: this.getVariableType(ast.object.object.object.object),\r\n            zProperty: ast.object.object.property,\r\n            yProperty: ast.object.property,\r\n            xProperty: ast.property,\r\n        };\r\n      case 'value.value':\r\n        if (typeof ast.property.name !== 'string') {\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        if (this.isAstMathVariable(ast)) {\r\n          name = ast.property.name;\r\n          return {\r\n            name,\r\n            origin: 'Math',\r\n            type: 'Number',\r\n            signature: variableSignature,\r\n          };\r\n        }\r\n        switch (ast.property.name) {\r\n          case 'r':\r\n          case 'g':\r\n          case 'b':\r\n          case 'a':\r\n            name = ast.object.name;\r\n            return {\r\n              name,\r\n              property: ast.property.name,\r\n                origin: 'user',\r\n                signature: variableSignature,\r\n                type: 'Number'\r\n            };\r\n          default:\r\n            throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        case 'this.constants.value':\r\n          if (typeof ast.property.name !== 'string') {\r\n            throw this.astErrorOutput('Unexpected expression', ast);\r\n          }\r\n          name = ast.property.name;\r\n          type = this.getConstantType(name);\r\n          if (!type) {\r\n            throw this.astErrorOutput('Constant has no type', ast);\r\n          }\r\n          return {\r\n            name,\r\n            type,\r\n            origin: 'constants',\r\n              signature: variableSignature,\r\n          };\r\n        case 'this.constants.value[]':\r\n          if (typeof ast.object.property.name !== 'string') {\r\n            throw this.astErrorOutput('Unexpected expression', ast);\r\n          }\r\n          name = ast.object.property.name;\r\n          type = this.getConstantType(name);\r\n          if (!type) {\r\n            throw this.astErrorOutput('Constant has no type', ast);\r\n          }\r\n          return {\r\n            name,\r\n            type,\r\n            origin: 'constants',\r\n              signature: variableSignature,\r\n              xProperty: ast.property,\r\n          };\r\n        case 'this.constants.value[][]': {\r\n          if (typeof ast.object.object.property.name !== 'string') {\r\n            throw this.astErrorOutput('Unexpected expression', ast);\r\n          }\r\n          name = ast.object.object.property.name;\r\n          type = this.getConstantType(name);\r\n          if (!type) {\r\n            throw this.astErrorOutput('Constant has no type', ast);\r\n          }\r\n          return {\r\n            name,\r\n            type,\r\n            origin: 'constants',\r\n            signature: variableSignature,\r\n            yProperty: ast.object.property,\r\n            xProperty: ast.property,\r\n          };\r\n        }\r\n        case 'this.constants.value[][][]': {\r\n          if (typeof ast.object.object.object.property.name !== 'string') {\r\n            throw this.astErrorOutput('Unexpected expression', ast);\r\n          }\r\n          name = ast.object.object.object.property.name;\r\n          type = this.getConstantType(name);\r\n          if (!type) {\r\n            throw this.astErrorOutput('Constant has no type', ast);\r\n          }\r\n          return {\r\n            name,\r\n            type,\r\n            origin: 'constants',\r\n            signature: variableSignature,\r\n            zProperty: ast.object.object.property,\r\n            yProperty: ast.object.property,\r\n            xProperty: ast.property,\r\n          };\r\n        }\r\n        case 'fn()[]':\r\n        case '[][]':\r\n          return {\r\n            signature: variableSignature,\r\n              property: ast.property,\r\n          };\r\n        default:\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n    }\r\n  }\r\n\r\n  findIdentifierOrigin(astToFind) {\r\n    const stack = [this.ast];\r\n\r\n    while (stack.length > 0) {\r\n      const atNode = stack[0];\r\n      if (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {\r\n        return atNode;\r\n      }\r\n      stack.shift();\r\n      if (atNode.argument) {\r\n        stack.push(atNode.argument);\r\n      } else if (atNode.body) {\r\n        stack.push(atNode.body);\r\n      } else if (atNode.declarations) {\r\n        stack.push(atNode.declarations);\r\n      } else if (Array.isArray(atNode)) {\r\n        for (let i = 0; i < atNode.length; i++) {\r\n          stack.push(atNode[i]);\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  findLastReturn(ast) {\r\n    const stack = [ast || this.ast];\r\n\r\n    while (stack.length > 0) {\r\n      const atNode = stack.pop();\r\n      if (atNode.type === 'ReturnStatement') {\r\n        return atNode;\r\n      }\r\n      if (atNode.type === 'FunctionDeclaration') {\r\n        continue;\r\n      }\r\n      if (atNode.argument) {\r\n        stack.push(atNode.argument);\r\n      } else if (atNode.body) {\r\n        stack.push(atNode.body);\r\n      } else if (atNode.declarations) {\r\n        stack.push(atNode.declarations);\r\n      } else if (Array.isArray(atNode)) {\r\n        for (let i = 0; i < atNode.length; i++) {\r\n          stack.push(atNode[i]);\r\n        }\r\n      } else if (atNode.consequent) {\r\n        stack.push(atNode.consequent);\r\n      } else if (atNode.cases) {\r\n        stack.push(atNode.cases);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getInternalVariableName(name) {\r\n    if (!this._internalVariableNames.hasOwnProperty(name)) {\r\n      this._internalVariableNames[name] = 0;\r\n    }\r\n    this._internalVariableNames[name]++;\r\n    if (this._internalVariableNames[name] === 1) {\r\n      return name;\r\n    }\r\n    return name + this._internalVariableNames[name];\r\n  }\r\n\r\n  varWarn() {\r\n    console.warn('var declarations are deprecated, weird things happen when falling back to CPU because var scope differs in javascript than in most languages.  Use const or let');\r\n  }\r\n}\r\n\r\nconst typeLookupMap = {\r\n  'Number': 'Number',\r\n  'Float': 'Float',\r\n  'Integer': 'Integer',\r\n  'Array': 'Number',\r\n  'Array(2)': 'Number',\r\n  'Array(3)': 'Number',\r\n  'Array(4)': 'Number',\r\n  'Array2D': 'Number',\r\n  'Array3D': 'Number',\r\n  'Input': 'Number',\r\n  'HTMLImage': 'Array(4)',\r\n  'HTMLVideo': 'Array(4)',\r\n  'HTMLImageArray': 'Array(4)',\r\n  'NumberTexture': 'Number',\r\n  'MemoryOptimizedNumberTexture': 'Number',\r\n  'Array1D(2)': 'Array(2)',\r\n  'Array1D(3)': 'Array(3)',\r\n  'Array1D(4)': 'Array(4)',\r\n  'Array2D(2)': 'Array(2)',\r\n  'Array2D(3)': 'Array(3)',\r\n  'Array2D(4)': 'Array(4)',\r\n  'Array3D(2)': 'Array(2)',\r\n  'Array3D(3)': 'Array(3)',\r\n  'Array3D(4)': 'Array(4)',\r\n  'ArrayTexture(1)': 'Number',\r\n  'ArrayTexture(2)': 'Array(2)',\r\n  'ArrayTexture(3)': 'Array(3)',\r\n  'ArrayTexture(4)': 'Array(4)',\r\n};\r\n","import { FunctionNode } from '../function-node';\r\n\r\n/**\r\n * @desc [INTERNAL] Represents a single function, inside JS\r\n *\r\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\r\n */\r\nexport class CPUFunctionNode extends FunctionNode {\r\n  /**\r\n   * @desc Parses the abstract syntax tree for to its *named function*\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astFunction(ast, retArr) {\r\n\r\n    // Setup function return type and name\r\n    if (!this.isRootKernel) {\r\n      retArr.push('function');\r\n      retArr.push(' ');\r\n      retArr.push(this.name);\r\n      retArr.push('(');\r\n\r\n      // Arguments handling\r\n      for (let i = 0; i < this.argumentNames.length; ++i) {\r\n        const argumentName = this.argumentNames[i];\r\n\r\n        if (i > 0) {\r\n          retArr.push(', ');\r\n        }\r\n        retArr.push('user_');\r\n        retArr.push(argumentName);\r\n      }\r\n\r\n      // Function opening\r\n      retArr.push(') {\\n');\r\n    }\r\n\r\n    // Body statement iteration\r\n    for (let i = 0; i < ast.body.body.length; ++i) {\r\n      this.astGeneric(ast.body.body[i], retArr);\r\n      retArr.push('\\n');\r\n    }\r\n\r\n    if (!this.isRootKernel) {\r\n      // Function closing\r\n      retArr.push('}\\n');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for to *return* statement\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astReturnStatement(ast, retArr) {\r\n    const type = this.returnType || this.getType(ast.argument);\r\n\r\n    if (!this.returnType) {\r\n      this.returnType = type;\r\n    }\r\n\r\n    if (this.isRootKernel) {\r\n      retArr.push(this.leadingReturnStatement);\r\n      this.astGeneric(ast.argument, retArr);\r\n      retArr.push(';\\n');\r\n      retArr.push(this.followingReturnStatement);\r\n      retArr.push('continue;\\n');\r\n    } else if (this.isSubKernel) {\r\n      retArr.push(`subKernelResult_${ this.name } = `);\r\n      this.astGeneric(ast.argument, retArr);\r\n      retArr.push(';');\r\n      retArr.push(`return subKernelResult_${ this.name };`);\r\n    } else {\r\n      retArr.push('return ');\r\n      this.astGeneric(ast.argument, retArr);\r\n      retArr.push(';');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *literal value*\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astLiteral(ast, retArr) {\r\n\r\n    // Reject non numeric literals\r\n    if (isNaN(ast.value)) {\r\n      throw this.astErrorOutput(\r\n        'Non-numeric literal not supported : ' + ast.value,\r\n        ast\r\n      );\r\n    }\r\n\r\n    retArr.push(ast.value);\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *binary* expression\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astBinaryExpression(ast, retArr) {\r\n    retArr.push('(');\r\n    this.astGeneric(ast.left, retArr);\r\n    retArr.push(ast.operator);\r\n    this.astGeneric(ast.right, retArr);\r\n    retArr.push(')');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *identifier* expression\r\n   * @param {Object} idtNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astIdentifierExpression(idtNode, retArr) {\r\n    if (idtNode.type !== 'Identifier') {\r\n      throw this.astErrorOutput(\r\n        'IdentifierExpression - not an Identifier',\r\n        idtNode\r\n      );\r\n    }\r\n\r\n    switch (idtNode.name) {\r\n      case 'Infinity':\r\n        retArr.push('Infinity');\r\n        break;\r\n      default:\r\n        if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {\r\n          retArr.push('constants_' + idtNode.name);\r\n        } else {\r\n          retArr.push('user_' + idtNode.name);\r\n        }\r\n    }\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *for-loop* expression\r\n   * @param {Object} forNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed webgl string\r\n   */\r\n  astForStatement(forNode, retArr) {\r\n    if (forNode.type !== 'ForStatement') {\r\n      throw this.astErrorOutput('Invalid for statement', forNode);\r\n    }\r\n\r\n    const initArr = [];\r\n    const testArr = [];\r\n    const updateArr = [];\r\n    const bodyArr = [];\r\n    let isSafe = null;\r\n\r\n    if (forNode.init) {\r\n      this.pushState('in-for-loop-init');\r\n      this.astGeneric(forNode.init, initArr);\r\n      for (let i = 0; i < initArr.length; i++) {\r\n        if (initArr[i].includes && initArr[i].includes(',')) {\r\n          isSafe = false;\r\n        }\r\n      }\r\n      this.popState('in-for-loop-init');\r\n    } else {\r\n      isSafe = false;\r\n    }\r\n\r\n    if (forNode.test) {\r\n      this.astGeneric(forNode.test, testArr);\r\n    } else {\r\n      isSafe = false;\r\n    }\r\n\r\n    if (forNode.update) {\r\n      this.astGeneric(forNode.update, updateArr);\r\n    } else {\r\n      isSafe = false;\r\n    }\r\n\r\n    if (forNode.body) {\r\n      this.pushState('loop-body');\r\n      this.astGeneric(forNode.body, bodyArr);\r\n      this.popState('loop-body');\r\n    }\r\n\r\n    // have all parts, now make them safe\r\n    if (isSafe === null) {\r\n      isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\r\n    }\r\n\r\n    if (isSafe) {\r\n      retArr.push(`for (${initArr.join('')};${testArr.join('')};${updateArr.join('')}){\\n`);\r\n      retArr.push(bodyArr.join(''));\r\n      retArr.push('}\\n');\r\n    } else {\r\n      const iVariableName = this.getInternalVariableName('safeI');\r\n      if (initArr.length > 0) {\r\n        retArr.push(initArr.join(''), ';\\n');\r\n      }\r\n      retArr.push(`for (let ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\r\n      if (testArr.length > 0) {\r\n        retArr.push(`if (!${testArr.join('')}) break;\\n`);\r\n      }\r\n      retArr.push(bodyArr.join(''));\r\n      retArr.push(`\\n${updateArr.join('')};`);\r\n      retArr.push('}\\n');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *while* loop\r\n   * @param {Object} whileNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed javascript string\r\n   */\r\n  astWhileStatement(whileNode, retArr) {\r\n    if (whileNode.type !== 'WhileStatement') {\r\n      throw this.astErrorOutput(\r\n        'Invalid while statement',\r\n        whileNode\r\n      );\r\n    }\r\n\r\n    retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\r\n    retArr.push('if (');\r\n    this.astGeneric(whileNode.test, retArr);\r\n    retArr.push(') {\\n');\r\n    this.astGeneric(whileNode.body, retArr);\r\n    retArr.push('} else {\\n');\r\n    retArr.push('break;\\n');\r\n    retArr.push('}\\n');\r\n    retArr.push('}\\n');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *do while* loop\r\n   * @param {Object} doWhileNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed webgl string\r\n   */\r\n  astDoWhileStatement(doWhileNode, retArr) {\r\n    if (doWhileNode.type !== 'DoWhileStatement') {\r\n      throw this.astErrorOutput(\r\n        'Invalid while statement',\r\n        doWhileNode\r\n      );\r\n    }\r\n\r\n    retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\r\n    this.astGeneric(doWhileNode.body, retArr);\r\n    retArr.push('if (!');\r\n    this.astGeneric(doWhileNode.test, retArr);\r\n    retArr.push(') {\\n');\r\n    retArr.push('break;\\n');\r\n    retArr.push('}\\n');\r\n    retArr.push('}\\n');\r\n\r\n    return retArr;\r\n\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Assignment* Expression\r\n   * @param {Object} assNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astAssignmentExpression(assNode, retArr) {\r\n    const declaration = this.getDeclaration(assNode.left);\r\n    if (declaration && !declaration.assignable) {\r\n      throw new this.astErrorOutput(`Variable ${assNode.left.name} is not assignable here`, assNode);\r\n    }\r\n    this.astGeneric(assNode.left, retArr);\r\n    retArr.push(assNode.operator);\r\n    this.astGeneric(assNode.right, retArr);\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Block* statement\r\n   * @param {Object} bNode - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astBlockStatement(bNode, retArr) {\r\n    if (this.isState('loop-body')) {\r\n      this.pushState('block-body'); // this prevents recursive removal of braces\r\n      for (let i = 0; i < bNode.body.length; i++) {\r\n        this.astGeneric(bNode.body[i], retArr);\r\n      }\r\n      this.popState('block-body');\r\n    } else {\r\n      retArr.push('{\\n');\r\n      for (let i = 0; i < bNode.body.length; i++) {\r\n        this.astGeneric(bNode.body[i], retArr);\r\n      }\r\n      retArr.push('}\\n');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\r\n   * @param {Object} varDecNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astVariableDeclaration(varDecNode, retArr) {\r\n    if (varDecNode.kind === 'var' && this.warnVarUsage) {\r\n      this.varWarn();\r\n    }\r\n    retArr.push(`${varDecNode.kind} `);\r\n    const { declarations } = varDecNode;\r\n    for (let i = 0; i < declarations.length; i++) {\r\n      if (i > 0) {\r\n        retArr.push(',');\r\n      }\r\n      this.astGeneric(declarations[i], retArr);\r\n    }\r\n    if (!this.isState('in-for-loop-init')) {\r\n      retArr.push(';');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *If* Statement\r\n   * @param {Object} ifNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astIfStatement(ifNode, retArr) {\r\n    retArr.push('if (');\r\n    this.astGeneric(ifNode.test, retArr);\r\n    retArr.push(')');\r\n    if (ifNode.consequent.type === 'BlockStatement') {\r\n      this.astGeneric(ifNode.consequent, retArr);\r\n    } else {\r\n      retArr.push(' {\\n');\r\n      this.astGeneric(ifNode.consequent, retArr);\r\n      retArr.push('\\n}\\n');\r\n    }\r\n\r\n    if (ifNode.alternate) {\r\n      retArr.push('else ');\r\n      if (ifNode.alternate.type === 'BlockStatement') {\r\n        this.astGeneric(ifNode.alternate, retArr);\r\n      } else {\r\n        retArr.push(' {\\n');\r\n        this.astGeneric(ifNode.alternate, retArr);\r\n        retArr.push('\\n}\\n');\r\n      }\r\n    }\r\n    return retArr;\r\n\r\n  }\r\n\r\n  astSwitchStatement(ast, retArr) {\r\n    const { discriminant, cases } = ast;\r\n    retArr.push('switch (');\r\n    this.astGeneric(discriminant, retArr);\r\n    retArr.push(') {\\n');\r\n    for (let i = 0; i < cases.length; i++) {\r\n      if (cases[i].test === null) {\r\n        retArr.push('default:\\n');\r\n        this.astGeneric(cases[i].consequent, retArr);\r\n        if (cases[i].consequent && cases[i].consequent.length > 0) {\r\n          retArr.push('break;\\n');\r\n        }\r\n        continue;\r\n      }\r\n      retArr.push('case ');\r\n      this.astGeneric(cases[i].test, retArr);\r\n      retArr.push(':\\n');\r\n      if (cases[i].consequent && cases[i].consequent.length > 0) {\r\n        this.astGeneric(cases[i].consequent, retArr);\r\n        retArr.push('break;\\n');\r\n      }\r\n    }\r\n    retArr.push('\\n}');\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *This* expression\r\n   * @param {Object} tNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astThisExpression(tNode, retArr) {\r\n    retArr.push('_this');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Member* Expression\r\n   * @param {Object} mNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astMemberExpression(mNode, retArr) {\r\n    const {\r\n      signature,\r\n      type,\r\n      property,\r\n      xProperty,\r\n      yProperty,\r\n      zProperty,\r\n      name,\r\n      origin\r\n    } = this.getMemberExpressionDetails(mNode);\r\n    switch (signature) {\r\n      case 'this.thread.value':\r\n        retArr.push(`_this.thread.${ name }`);\r\n        return retArr;\r\n      case 'this.output.value':\r\n        switch (name) {\r\n          case 'x':\r\n            retArr.push('outputX');\r\n            break;\r\n          case 'y':\r\n            retArr.push('outputY');\r\n            break;\r\n          case 'z':\r\n            retArr.push('outputZ');\r\n            break;\r\n          default:\r\n            throw this.astErrorOutput('Unexpected expression', mNode);\r\n        }\r\n        return retArr;\r\n      case 'value':\r\n        throw this.astErrorOutput('Unexpected expression', mNode);\r\n      case 'value[]':\r\n      case 'value[][]':\r\n      case 'value[][][]':\r\n      case 'value.value':\r\n        if (origin === 'Math') {\r\n          retArr.push(Math[name]);\r\n          return retArr;\r\n        }\r\n        switch (property) {\r\n          case 'r':\r\n            retArr.push(`user_${ name }[0]`);\r\n            return retArr;\r\n          case 'g':\r\n            retArr.push(`user_${ name }[1]`);\r\n            return retArr;\r\n          case 'b':\r\n            retArr.push(`user_${ name }[2]`);\r\n            return retArr;\r\n          case 'a':\r\n            retArr.push(`user_${ name }[3]`);\r\n            return retArr;\r\n        }\r\n        break;\r\n      case 'this.constants.value':\r\n      case 'this.constants.value[]':\r\n      case 'this.constants.value[][]':\r\n      case 'this.constants.value[][][]':\r\n        break;\r\n      case 'fn()[]':\r\n        this.astGeneric(mNode.object, retArr);\r\n        retArr.push('[');\r\n        this.astGeneric(mNode.property, retArr);\r\n        retArr.push(']');\r\n        return retArr;\r\n      default:\r\n        throw this.astErrorOutput('Unexpected expression', mNode);\r\n    }\r\n\r\n    if (!mNode.computed) {\r\n      // handle simple types\r\n      switch (type) {\r\n        case 'Number':\r\n        case 'Integer':\r\n        case 'Float':\r\n        case 'Boolean':\r\n          retArr.push(`${origin}_${name}`);\r\n          return retArr;\r\n      }\r\n    }\r\n\r\n    // handle more complex types\r\n    // argument may have come from a parent\r\n    const markupName = `${origin}_${name}`;\r\n\r\n    switch (type) {\r\n      case 'Array(2)':\r\n      case 'Array(3)':\r\n      case 'Array(4)':\r\n      case 'HTMLImageArray':\r\n      case 'ArrayTexture(1)':\r\n      case 'ArrayTexture(2)':\r\n      case 'ArrayTexture(3)':\r\n      case 'ArrayTexture(4)':\r\n      case 'HTMLImage':\r\n      default:\r\n        let size;\r\n        let isInput;\r\n        if (origin === 'constants') {\r\n          const constant = this.constants[name];\r\n          isInput = this.constantTypes[name] === 'Input';\r\n          size = isInput ? constant.size : null;\r\n        } else {\r\n          isInput = this.isInput(name);\r\n          size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name)] : null;\r\n        }\r\n        retArr.push(`${ markupName }`);\r\n        if (zProperty && yProperty) {\r\n          if (isInput) {\r\n            retArr.push('[(');\r\n            this.astGeneric(zProperty, retArr);\r\n            retArr.push(`*${ this.dynamicArguments ? '(outputY * outputX)' : size[1] * size[0] })+(`);\r\n            this.astGeneric(yProperty, retArr);\r\n            retArr.push(`*${ this.dynamicArguments ? 'outputX' : size[0] })+`);\r\n            this.astGeneric(xProperty, retArr);\r\n            retArr.push(']');\r\n          } else {\r\n            retArr.push('[');\r\n            this.astGeneric(zProperty, retArr);\r\n            retArr.push(']');\r\n            retArr.push('[');\r\n            this.astGeneric(yProperty, retArr);\r\n            retArr.push(']');\r\n            retArr.push('[');\r\n            this.astGeneric(xProperty, retArr);\r\n            retArr.push(']');\r\n          }\r\n        } else if (yProperty) {\r\n          if (isInput) {\r\n            retArr.push('[(');\r\n            this.astGeneric(yProperty, retArr);\r\n            retArr.push(`*${ this.dynamicArguments ? 'outputX' : size[0] })+`);\r\n            this.astGeneric(xProperty, retArr);\r\n            retArr.push(']');\r\n          } else {\r\n            retArr.push('[');\r\n            this.astGeneric(yProperty, retArr);\r\n            retArr.push(']');\r\n            retArr.push('[');\r\n            this.astGeneric(xProperty, retArr);\r\n            retArr.push(']');\r\n          }\r\n        } else if (typeof xProperty !== 'undefined') {\r\n          retArr.push('[');\r\n          this.astGeneric(xProperty, retArr);\r\n          retArr.push(']');\r\n        }\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *call* expression\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns  {Array} the append retArr\r\n   */\r\n  astCallExpression(ast, retArr) {\r\n    if (ast.type !== 'CallExpression') {\r\n      // Failure, unknown expression\r\n      throw this.astErrorOutput('Unknown CallExpression', ast);\r\n    }\r\n    // Get the full function call, unrolled\r\n    let functionName = this.astMemberExpressionUnroll(ast.callee);\r\n\r\n    // Register the function into the called registry\r\n    if (this.calledFunctions.indexOf(functionName) < 0) {\r\n      this.calledFunctions.push(functionName);\r\n    }\r\n\r\n    const isMathFunction = this.isAstMathFunction(ast);\r\n\r\n    // track the function was called\r\n    if (this.onFunctionCall) {\r\n      this.onFunctionCall(this.name, functionName, ast.arguments);\r\n    }\r\n\r\n    // Call the function\r\n    retArr.push(functionName);\r\n\r\n    // Open arguments space\r\n    retArr.push('(');\r\n    const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\r\n    // Add the arguments\r\n    for (let i = 0; i < ast.arguments.length; ++i) {\r\n      const argument = ast.arguments[i];\r\n\r\n      // in order to track return type, even though this is CPU\r\n      let argumentType = this.getType(argument);\r\n      if (!targetTypes[i]) {\r\n        this.triggerImplyArgumentType(functionName, i, argumentType, this);\r\n      }\r\n\r\n      if (i > 0) {\r\n        retArr.push(', ');\r\n      }\r\n      this.astGeneric(argument, retArr);\r\n    }\r\n    // Close arguments space\r\n    retArr.push(')');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Array* Expression\r\n   * @param {Object} arrNode - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astArrayExpression(arrNode, retArr) {\r\n    const arrLen = arrNode.elements.length;\r\n\r\n    retArr.push('new Float32Array([');\r\n    for (let i = 0; i < arrLen; ++i) {\r\n      if (i > 0) {\r\n        retArr.push(', ');\r\n      }\r\n      const subNode = arrNode.elements[i];\r\n      this.astGeneric(subNode, retArr)\r\n    }\r\n    retArr.push('])');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  astDebuggerStatement(arrNode, retArr) {\r\n    retArr.push('debugger;');\r\n    return retArr;\r\n  }\r\n}\r\n","import { utils } from '../../utils'\r\n\r\nfunction constantsToString(constants, types) {\r\n  const results = [];\r\n  for (const name in types) {\r\n    if (!types.hasOwnProperty(name)) continue;\r\n    const type = types[name];\r\n    const constant = constants[name];\r\n    switch (type) {\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n      case 'Boolean':\r\n        results.push(`${name}:${constant}`);\r\n        break;\r\n      case 'Array(2)':\r\n      case 'Array(3)':\r\n      case 'Array(4)':\r\n        results.push(`${name}:new ${constant.constructor.name}(${JSON.stringify(Array.from(constant))})`);\r\n        break;\r\n    }\r\n  }\r\n  return `{ ${ results.join() } }`;\r\n}\r\n\r\nexport function cpuKernelString(cpuKernel, name) {\r\n  const header = [];\r\n  const thisProperties = [];\r\n  const beforeReturn = [];\r\n\r\n  const useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());\r\n\r\n  header.push(\r\n    '  const { context, canvas, constants: incomingConstants } = settings;',\r\n    `  const output = new Int32Array(${JSON.stringify(Array.from(cpuKernel.output))});`,\r\n    `  const _constantTypes = ${JSON.stringify(cpuKernel.constantTypes)};`,\r\n    `  const _constants = ${constantsToString(cpuKernel.constants, cpuKernel.constantTypes)};`,\r\n  );\r\n\r\n  thisProperties.push(\r\n    '    constants: _constants,',\r\n    '    context,',\r\n    '    output,',\r\n    '    thread: {x: 0, y: 0, z: 0},',\r\n  );\r\n\r\n  if (cpuKernel.graphical) {\r\n    header.push(`  const _imageData = context.createImageData(${cpuKernel.output[0]}, ${cpuKernel.output[1]});`);\r\n    header.push(`  const _colorData = new Uint8ClampedArray(${cpuKernel.output[0]} * ${cpuKernel.output[1]} * 4);`);\r\n\r\n    const colorFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.color.toString(), {\r\n      thisLookup: (propertyName) => {\r\n        switch (propertyName) {\r\n          case '_colorData':\r\n            return '_colorData';\r\n          case '_imageData':\r\n            return '_imageData';\r\n          case 'output':\r\n            return 'output';\r\n          case 'thread':\r\n            return 'this.thread';\r\n        }\r\n        return JSON.stringify(cpuKernel[propertyName]);\r\n      },\r\n      findDependency: (object, name) => {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    const getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.getPixels.toString(), {\r\n      thisLookup: (propertyName) => {\r\n        switch (propertyName) {\r\n          case '_colorData':\r\n            return '_colorData';\r\n          case '_imageData':\r\n            return '_imageData';\r\n          case 'output':\r\n            return 'output';\r\n          case 'thread':\r\n            return 'this.thread';\r\n        }\r\n        return JSON.stringify(cpuKernel[propertyName]);\r\n      },\r\n      findDependency: () => {\r\n        return null;\r\n      }\r\n    });\r\n\r\n    thisProperties.push(\r\n      '    _imageData,',\r\n      '    _colorData,',\r\n      `    color: ${colorFn},`,\r\n    );\r\n\r\n    beforeReturn.push(\r\n      `  kernel.getPixels = ${getPixelsFn};`\r\n    );\r\n  }\r\n\r\n  const constantTypes = [];\r\n  const constantKeys = Object.keys(cpuKernel.constantTypes);\r\n  for (let i = 0; i < constantKeys.length; i++) {\r\n    constantTypes.push(cpuKernel.constantTypes[constantKeys]);\r\n  }\r\n  if (cpuKernel.argumentTypes.indexOf('HTMLImageArray') !== -1 || constantTypes.indexOf('HTMLImageArray') !== -1) {\r\n    const flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._imageTo3DArray.toString(), {\r\n      doNotDefine: ['canvas'],\r\n      findDependency: (object, name) => {\r\n        if (object === 'this') {\r\n          return (useFunctionKeyword ? 'function ' : '') + cpuKernel[name].toString();\r\n        }\r\n        return null;\r\n      },\r\n      thisLookup: (propertyName) => {\r\n        switch (propertyName) {\r\n          case 'canvas':\r\n            return;\r\n          case 'context':\r\n            return 'context';\r\n        }\r\n      }\r\n    });\r\n    beforeReturn.push(flattenedImageTo3DArray);\r\n    thisProperties.push(`    _mediaTo2DArray,`);\r\n    thisProperties.push(`    _imageTo3DArray,`);\r\n  } else if (cpuKernel.argumentTypes.indexOf('HTMLImage') !== -1 || constantTypes.indexOf('HTMLImage') !== -1) {\r\n    const flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._mediaTo2DArray.toString(), {\r\n      findDependency: (object, name) => {\r\n        return null;\r\n      },\r\n      thisLookup: (propertyName) => {\r\n        switch (propertyName) {\r\n          case 'canvas':\r\n            return 'settings.canvas';\r\n          case 'context':\r\n            return 'settings.context';\r\n        }\r\n        throw new Error('unhandled thisLookup');\r\n      }\r\n    });\r\n    beforeReturn.push(flattenedImageTo2DArray);\r\n    thisProperties.push(`    _mediaTo2DArray,`);\r\n  }\r\n\r\n  return `function(settings) {\r\n${ header.join('\\n') }\r\n  for (const p in _constantTypes) {\r\n    if (!_constantTypes.hasOwnProperty(p)) continue;\r\n    const type = _constantTypes[p];\r\n    switch (type) {\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n      case 'Boolean':\r\n      case 'Array(2)':\r\n      case 'Array(3)':\r\n      case 'Array(4)':\r\n        if (incomingConstants.hasOwnProperty(p)) {\r\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\r\n        }\r\n        continue;\r\n    }\r\n    if (!incomingConstants.hasOwnProperty(p)) {\r\n      throw new Error('constant ' + p + ' not found');\r\n    }\r\n    _constants[p] = incomingConstants[p];\r\n  }\r\n  const kernel = (function() {\r\n${cpuKernel._kernelString}\r\n  })\r\n    .apply({ ${thisProperties.join('\\n')} });\r\n  ${ beforeReturn.join('\\n') }\r\n  return kernel;\r\n}`;\r\n}\r\n","import { Kernel } from '../kernel';\r\nimport { FunctionBuilder } from '../function-builder';\r\nimport { CPUFunctionNode } from './function-node';\r\nimport { utils } from '../../utils';\r\nimport { cpuKernelString } from './kernel-string';\r\n\r\n/**\r\n * @desc Kernel Implementation for CPU.\r\n * <p>Instantiates properties to the CPU Kernel.</p>\r\n */\r\nexport class CPUKernel extends Kernel {\r\n  static getFeatures() {\r\n    return this.features;\r\n  }\r\n  static get features() {\r\n    return Object.freeze({\r\n      kernelMap: true,\r\n      isIntegerDivisionAccurate: true\r\n    });\r\n  }\r\n  static get isSupported() {\r\n    return true;\r\n  }\r\n  static isContextMatch(context) {\r\n    return false;\r\n  }\r\n  /**\r\n   * @desc The current mode in which gpu.js is executing.\r\n   */\r\n  static get mode() {\r\n    return 'cpu';\r\n  }\r\n\r\n  static nativeFunctionArguments() {\r\n    return null;\r\n  }\r\n\r\n  static nativeFunctionReturnType() {\r\n    return null;\r\n  }\r\n\r\n  static combineKernels(combinedKernel) {\r\n    return combinedKernel;\r\n  }\r\n\r\n  constructor(source, settings) {\r\n    super(source, settings);\r\n    this.mergeSettings(source.settings || settings);\r\n\r\n    this._imageData = null;\r\n    this._colorData = null;\r\n    this._kernelString = null;\r\n    this.thread = {\r\n      x: 0,\r\n      y: 0,\r\n      z: 0\r\n    };\r\n    this.translatedSources = null;\r\n  }\r\n\r\n  initCanvas() {\r\n    if (typeof document !== 'undefined') {\r\n      return document.createElement('canvas');\r\n    } else if (typeof OffscreenCanvas !== 'undefined') {\r\n      return new OffscreenCanvas(0, 0);\r\n    }\r\n  }\r\n\r\n  initContext() {\r\n    if (!this.canvas) return null;\r\n    return this.canvas.getContext('2d');\r\n  }\r\n\r\n  initPlugins(settings) {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * @desc Validate settings related to Kernel, such as dimensions size, and auto output support.\r\n   * @param {IArguments} args\r\n   */\r\n  validateSettings(args) {\r\n    if (!this.output || this.output.length === 0) {\r\n      if (args.length !== 1) {\r\n        throw new Error('Auto output only supported for kernels with only one input');\r\n      }\r\n\r\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\r\n      if (argType === 'Array') {\r\n        this.output = utils.getDimensions(argType);\r\n      } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\r\n        this.output = args[0].output;\r\n      } else {\r\n        throw new Error('Auto output not supported for input type: ' + argType);\r\n      }\r\n    }\r\n\r\n    if (this.graphical) {\r\n      if (this.output.length !== 2) {\r\n        throw new Error('Output must have 2 dimensions on graphical mode');\r\n      }\r\n    }\r\n\r\n    this.checkOutput();\r\n  }\r\n\r\n  translateSource() {\r\n    this.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';\r\n    if (this.subKernels) {\r\n      const followingReturnStatement = []\r\n      for (let i = 0; i < this.subKernels.length; i++) {\r\n        const {\r\n          name\r\n        } = this.subKernels[i];\r\n        followingReturnStatement.push(this.output.length > 1 ? `resultX_${ name }[x] = subKernelResult_${ name };\\n` : `result_${ name }[x] = subKernelResult_${ name };\\n`);\r\n      }\r\n      this.followingReturnStatement = followingReturnStatement.join('');\r\n    }\r\n    const functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);\r\n    this.translatedSources = functionBuilder.getPrototypes('kernel');\r\n    if (!this.graphical && !this.returnType) {\r\n      this.returnType = functionBuilder.getKernelResultType();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Builds the Kernel, by generating the kernel\r\n   * string using thread dimensions, and arguments\r\n   * supplied to the kernel.\r\n   *\r\n   * <p>If the graphical flag is enabled, canvas is used.</p>\r\n   */\r\n  build() {\r\n    this.setupConstants();\r\n    this.setupArguments(arguments);\r\n    this.validateSettings(arguments);\r\n    this.translateSource();\r\n\r\n    if (this.graphical) {\r\n      const {\r\n        canvas,\r\n        output\r\n      } = this;\r\n      if (!canvas) {\r\n        throw new Error('no canvas available for using graphical output');\r\n      }\r\n      const width = output[0];\r\n      const height = output[1] || 1;\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      this._imageData = this.context.createImageData(width, height);\r\n      this._colorData = new Uint8ClampedArray(width * height * 4);\r\n    }\r\n\r\n    const kernelString = this.getKernelString();\r\n    this.kernelString = kernelString;\r\n\r\n    if (this.debug) {\r\n      console.log('Function output:');\r\n      console.log(kernelString);\r\n    }\r\n\r\n    try {\r\n      this.run = new Function([], kernelString).bind(this)();\r\n    } catch (e) {\r\n      console.error('An error occurred compiling the javascript: ', e);\r\n    }\r\n  }\r\n\r\n  color(r, g, b, a) {\r\n    if (typeof a === 'undefined') {\r\n      a = 1;\r\n    }\r\n\r\n    r = Math.floor(r * 255);\r\n    g = Math.floor(g * 255);\r\n    b = Math.floor(b * 255);\r\n    a = Math.floor(a * 255);\r\n\r\n    const width = this.output[0];\r\n    const height = this.output[1];\r\n\r\n    const x = this.thread.x;\r\n    const y = height - this.thread.y - 1;\r\n\r\n    const index = x + y * width;\r\n\r\n    this._colorData[index * 4 + 0] = r;\r\n    this._colorData[index * 4 + 1] = g;\r\n    this._colorData[index * 4 + 2] = b;\r\n    this._colorData[index * 4 + 3] = a;\r\n  }\r\n\r\n  /**\r\n   * @desc Generates kernel string for this kernel program.\r\n   *\r\n   * <p>If sub-kernels are supplied, they are also factored in.\r\n   * This string can be saved by calling the `toString` method\r\n   * and then can be reused later.</p>\r\n   *\r\n   * @returns {String} result\r\n   *\r\n   */\r\n  getKernelString() {\r\n    if (this._kernelString !== null) return this._kernelString;\r\n\r\n    let kernelThreadString = null;\r\n    let {\r\n      translatedSources\r\n    } = this;\r\n    if (translatedSources.length > 1) {\r\n      translatedSources = translatedSources.filter(fn => {\r\n        if (/^function/.test(fn)) return fn;\r\n        kernelThreadString = fn;\r\n        return false;\r\n      })\r\n    } else {\r\n      kernelThreadString = translatedSources.shift();\r\n    }\r\n    return this._kernelString = `  const LOOP_MAX = ${ this._getLoopMaxString() };\r\n  ${ this.injectedNative || '' }\r\n  const _this = this;\r\n  ${ this._processConstants() }\r\n  return (${ this.argumentNames.map(argumentName => 'user_' + argumentName).join(', ') }) => {\r\n    ${ this._processArguments() }\r\n    ${ this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString) }\r\n    ${ translatedSources.length > 0 ? translatedSources.join('\\n') : '' }\r\n  };`;\r\n  }\r\n\r\n  /**\r\n   * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\r\n   */\r\n  toString() {\r\n    return cpuKernelString(this);\r\n  }\r\n\r\n  /**\r\n   * @desc Get the maximum loop size String.\r\n   * @returns {String} result\r\n   */\r\n  _getLoopMaxString() {\r\n    return (\r\n      this.loopMaxIterations ?\r\n      ` ${ parseInt(this.loopMaxIterations) };` :\r\n      ' 1000;'\r\n    );\r\n  }\r\n\r\n  _processConstants() {\r\n    if (!this.constants) return '';\r\n\r\n    const result = [];\r\n    for (let p in this.constants) {\r\n      const type = this.constantTypes[p];\r\n      switch (type) {\r\n        case 'HTMLImage':\r\n        case 'HTMLVideo':\r\n          result.push(`    const constants_${p} = this._mediaTo2DArray(this.constants.${p});\\n`);\r\n          break;\r\n        case 'HTMLImageArray':\r\n          result.push(`    const constants_${p} = this._imageTo3DArray(this.constants.${p});\\n`);\r\n          break;\r\n        case 'Input':\r\n          result.push(`    const constants_${p} = this.constants.${p}.value;\\n`);\r\n          break;\r\n        default:\r\n          result.push(`    const constants_${p} = this.constants.${p};\\n`);\r\n      }\r\n    }\r\n    return result.join('');\r\n  }\r\n\r\n  _processArguments() {\r\n    const result = [];\r\n    for (let i = 0; i < this.argumentTypes.length; i++) {\r\n      const variableName = `user_${this.argumentNames[i]}`;\r\n      switch (this.argumentTypes[i]) {\r\n        case 'HTMLImage':\r\n        case 'HTMLVideo':\r\n          result.push(`    ${variableName} = this._mediaTo2DArray(${variableName});\\n`);\r\n          break;\r\n        case 'HTMLImageArray':\r\n          result.push(`    ${variableName} = this._imageTo3DArray(${variableName});\\n`);\r\n          break;\r\n        case 'Input':\r\n          result.push(`    ${variableName} = ${variableName}.value;\\n`);\r\n          break;\r\n        case 'ArrayTexture(1)':\r\n        case 'ArrayTexture(2)':\r\n        case 'ArrayTexture(3)':\r\n        case 'ArrayTexture(4)':\r\n        case 'NumberTexture':\r\n        case 'MemoryOptimizedNumberTexture':\r\n          result.push(`\r\n    if (${variableName}.toArray) {\r\n      if (!_this.textureCache) {\r\n        _this.textureCache = [];\r\n        _this.arrayCache = [];\r\n      }\r\n      const textureIndex = _this.textureCache.indexOf(${variableName});\r\n      if (textureIndex !== -1) {\r\n        ${variableName} = _this.arrayCache[textureIndex];\r\n      } else {\r\n        _this.textureCache.push(${variableName});\r\n        ${variableName} = ${variableName}.toArray();\r\n        _this.arrayCache.push(${variableName});\r\n      }\r\n    }`);\r\n          break;\r\n      }\r\n    }\r\n    return result.join('');\r\n  }\r\n\r\n  _mediaTo2DArray(media) {\r\n    const canvas = this.canvas;\r\n    const width = media.width > 0 ? media.width : media.videoWidth;\r\n    const height = media.height > 0 ? media.height : media.videoHeight;\r\n    if (canvas.width < width) {\r\n      canvas.width = width;\r\n    }\r\n    if (canvas.height < height) {\r\n      canvas.height = height;\r\n    }\r\n    const ctx = this.context;\r\n    ctx.drawImage(media, 0, 0, width, height);\r\n    const pixelsData = ctx.getImageData(0, 0, width, height).data;\r\n    const imageArray = new Array(height);\r\n    let index = 0;\r\n    for (let y = height - 1; y >= 0; y--) {\r\n      const row = imageArray[y] = new Array(width);\r\n      for (let x = 0; x < width; x++) {\r\n        const pixel = new Float32Array(4);\r\n        pixel[0] = pixelsData[index++] / 255; // r\r\n        pixel[1] = pixelsData[index++] / 255; // g\r\n        pixel[2] = pixelsData[index++] / 255; // b\r\n        pixel[3] = pixelsData[index++] / 255; // a\r\n        row[x] = pixel;\r\n      }\r\n    }\r\n    return imageArray;\r\n  }\r\n\r\n  getPixels(flip) {\r\n    const [width, height] = this.output;\r\n    // cpu is not flipped by default\r\n    return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);\r\n  }\r\n\r\n  _imageTo3DArray(images) {\r\n    const imagesArray = new Array(images.length);\r\n    for (let i = 0; i < images.length; i++) {\r\n      imagesArray[i] = this._mediaTo2DArray(images[i]);\r\n    }\r\n    return imagesArray;\r\n  }\r\n\r\n  _resultKernelBody(kernelString) {\r\n    switch (this.output.length) {\r\n      case 1:\r\n        return this._resultKernel1DLoop(kernelString) + this._kernelOutput();\r\n      case 2:\r\n        return this._resultKernel2DLoop(kernelString) + this._kernelOutput();\r\n      case 3:\r\n        return this._resultKernel3DLoop(kernelString) + this._kernelOutput();\r\n      default:\r\n        throw new Error('unsupported size kernel');\r\n    }\r\n  }\r\n\r\n  _graphicalKernelBody(kernelThreadString) {\r\n    switch (this.output.length) {\r\n      case 2:\r\n        return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();\r\n      default:\r\n        throw new Error('unsupported size kernel');\r\n    }\r\n  }\r\n\r\n  _graphicalOutput() {\r\n    return `\r\n    this._imageData.data.set(this._colorData);\r\n    this.context.putImageData(this._imageData, 0, 0);\r\n    return;`\r\n  }\r\n\r\n  _getKernelResultTypeConstructorString() {\r\n    switch (this.returnType) {\r\n      case 'LiteralInteger':\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n        return 'Float32Array';\r\n      case 'Array(2)':\r\n      case 'Array(3)':\r\n      case 'Array(4)':\r\n        return 'Array';\r\n      default:\r\n        if (this.graphical) {\r\n          return 'Float32Array';\r\n        }\r\n        throw new Error(`unhandled returnType ${ this.returnType }`);\r\n    }\r\n  }\r\n\r\n  _resultKernel1DLoop(kernelString) {\r\n    const {\r\n      output\r\n    } = this;\r\n    const constructorString = this._getKernelResultTypeConstructorString();\r\n    return `  const outputX = _this.output[0];\r\n    const result = new ${constructorString}(outputX);\r\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new ${constructorString}(outputX);\\n`).join('    ') }\r\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\r\n    for (let x = 0; x < outputX; x++) {\r\n      this.thread.x = x;\r\n      this.thread.y = 0;\r\n      this.thread.z = 0;\r\n      ${ kernelString }\r\n    }`;\r\n  }\r\n\r\n  _resultKernel2DLoop(kernelString) {\r\n    const {\r\n      output\r\n    } = this;\r\n    const constructorString = this._getKernelResultTypeConstructorString();\r\n    return `  const outputX = _this.output[0];\r\n    const outputY = _this.output[1];\r\n    const result = new Array(outputY);\r\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputY);\\n`).join('    ') }\r\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\r\n    for (let y = 0; y < outputY; y++) {\r\n      this.thread.z = 0;\r\n      this.thread.y = y;\r\n      const resultX = result[y] = new ${constructorString}(outputX);\r\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\r\n      for (let x = 0; x < outputX; x++) {\r\n        this.thread.x = x;\r\n        ${ kernelString }\r\n      }\r\n    }`;\r\n  }\r\n\r\n  _graphicalKernel2DLoop(kernelString) {\r\n    const {\r\n      output\r\n    } = this;\r\n    const constructorString = this._getKernelResultTypeConstructorString();\r\n    return `  const outputX = _this.output[0];\r\n    const outputY = _this.output[1];\r\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputY);\\n`).join('    ') }\r\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\r\n    for (let y = 0; y < outputY; y++) {\r\n      this.thread.z = 0;\r\n      this.thread.y = y;\r\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('') }\r\n      for (let x = 0; x < outputX; x++) {\r\n        this.thread.x = x;\r\n        ${ kernelString }\r\n      }\r\n    }`;\r\n  }\r\n\r\n  _resultKernel3DLoop(kernelString) {\r\n    const {\r\n      output\r\n    } = this;\r\n    const constructorString = this._getKernelResultTypeConstructorString();\r\n    return `  const outputX = _this.output[0];\r\n    const outputY = _this.output[1];\r\n    const outputZ = _this.output[2];\r\n    const result = new Array(outputZ);\r\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(outputZ);\\n`).join('    ') }\r\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\r\n    for (let z = 0; z < outputZ; z++) {\r\n      this.thread.z = z;\r\n      const resultY = result[z] = new Array(outputY);\r\n      ${ this._mapSubKernels(subKernel => `const resultY_${ subKernel.name } = result_${subKernel.name}[z] = new Array(outputY);\\n`).join('      ') }\r\n      for (let y = 0; y < outputY; y++) {\r\n        this.thread.y = y;\r\n        const resultX = resultY[y] = new ${constructorString}(outputX);\r\n        ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = resultY_${subKernel.name}[y] = new ${constructorString}(outputX);\\n`).join('        ') }\r\n        for (let x = 0; x < outputX; x++) {\r\n          this.thread.x = x;\r\n          ${ kernelString }\r\n        }\r\n      }\r\n    }`;\r\n  }\r\n\r\n  _kernelOutput() {\r\n    if (!this.subKernels) {\r\n      return '\\n    return result;';\r\n    }\r\n    return `\\n    return {\r\n      result: result,\r\n      ${ this.subKernels.map(subKernel => `${ subKernel.property }: result_${ subKernel.name }`).join(',\\n      ') }\r\n    };`;\r\n  }\r\n\r\n  _mapSubKernels(fn) {\r\n    return this.subKernels === null ? [''] :\r\n      this.subKernels.map(fn);\r\n  }\r\n\r\n\r\n\r\n  destroy(removeCanvasReference) {\r\n    if (removeCanvasReference) {\r\n      delete this.canvas;\r\n    }\r\n  }\r\n\r\n  static destroyContext(context) {}\r\n\r\n  toJSON() {\r\n    const json = super.toJSON();\r\n    json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();\r\n    return json;\r\n  }\r\n\r\n  setOutput(output) {\r\n    super.setOutput(output);\r\n    const [width, height] = this.output;\r\n    if (this.graphical) {\r\n      this._imageData = this.context.createImageData(width, height);\r\n      this._colorData = new Uint8ClampedArray(width * height * 4);\r\n    }\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { Texture } from '../../../texture';\r\n\r\nexport class GLTextureFloat extends Texture {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(1)';\r\n  }\r\n  renderRawOutput() {\r\n    const { context: gl } = this;\r\n    const framebuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n    gl.framebufferTexture2D(\r\n      gl.FRAMEBUFFER,\r\n      gl.COLOR_ATTACHMENT0,\r\n      gl.TEXTURE_2D,\r\n      this.texture,\r\n      0\r\n    );\r\n    const result = new Float32Array(this.size[0] * this.size[1] * 4);\r\n    gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.FLOAT, result);\r\n    return result;\r\n  }\r\n  renderValues() {\r\n    return this.renderRawOutput();\r\n  }\r\n  toArray() {\r\n    return utils.erectFloat(this.renderValues(), this.output[0]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray2Float extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(2)';\r\n  }\r\n  toArray() {\r\n    return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray2Float2D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(2)';\r\n  }\r\n  toArray() {\r\n    return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray2Float3D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(2)';\r\n  }\r\n  toArray() {\r\n    return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray3Float extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(3)';\r\n  }\r\n  toArray() {\r\n    return utils.erectArray3(this.renderValues(), this.output[0]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray3Float2D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(3)';\r\n  }\r\n  toArray() {\r\n    return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray3Float3D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(3)';\r\n  }\r\n  toArray() {\r\n    return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray4Float extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(4)';\r\n  }\r\n  toArray() {\r\n    return utils.erectArray4(this.renderValues(), this.output[0]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray4Float2D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(4)';\r\n  }\r\n  toArray() {\r\n    return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureArray4Float3D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(4)';\r\n  }\r\n  toArray() {\r\n    return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureFloat2D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(1)';\r\n  }\r\n  toArray() {\r\n    return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureFloat3D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(1)';\r\n  }\r\n  toArray() {\r\n    return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureMemoryOptimized extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'MemoryOptimizedNumberTexture';\r\n  }\r\n  toArray() {\r\n    return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureMemoryOptimized2D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'MemoryOptimizedNumberTexture';\r\n  }\r\n  toArray() {\r\n    return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureFloat } from './float';\r\n\r\nexport class GLTextureMemoryOptimized3D extends GLTextureFloat {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'MemoryOptimizedNumberTexture';\r\n  }\r\n  toArray() {\r\n    return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { Texture } from '../../../texture';\r\n\r\nexport class GLTextureUnsigned extends Texture {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'NumberTexture';\r\n  }\r\n  renderRawOutput() {\r\n    const { context: gl } = this;\r\n    const framebuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\r\n    gl.framebufferTexture2D(\r\n      gl.FRAMEBUFFER,\r\n      gl.COLOR_ATTACHMENT0,\r\n      gl.TEXTURE_2D,\r\n      this.texture,\r\n      0\r\n    );\r\n    const result = new Uint8Array(this.size[0] * this.size[1] * 4);\r\n    gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\r\n    return result;\r\n  }\r\n  renderValues() {\r\n    return new Float32Array(this.renderRawOutput().buffer);\r\n  }\r\n  toArray() {\r\n    return utils.erectPackedFloat(this.renderValues(), this.output[0]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureUnsigned } from './unsigned';\r\n\r\nexport class GLTextureUnsigned2D extends GLTextureUnsigned {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'NumberTexture';\r\n  }\r\n  toArray() {\r\n    return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { GLTextureUnsigned } from './unsigned';\r\n\r\nexport class GLTextureUnsigned3D extends GLTextureUnsigned {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'NumberTexture';\r\n  }\r\n  toArray() {\r\n    return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);\r\n  }\r\n}\r\n","import { GLTextureUnsigned } from './unsigned';\r\n\r\nexport class GLTextureGraphical extends GLTextureUnsigned {\r\n  constructor(settings) {\r\n    super(settings);\r\n    this.type = 'ArrayTexture(4)';\r\n  }\r\n  toArray() {\r\n    return this.renderValues();\r\n  }\r\n}\r\n","import { Kernel } from '../kernel';\r\nimport { utils } from '../../utils';\r\nimport { GLTextureArray2Float } from './texture/array-2-float';\r\nimport { GLTextureArray2Float2D } from './texture/array-2-float-2d';\r\nimport { GLTextureArray2Float3D } from './texture/array-2-float-3d';\r\nimport { GLTextureArray3Float } from './texture/array-3-float';\r\nimport { GLTextureArray3Float2D } from './texture/array-3-float-2d';\r\nimport { GLTextureArray3Float3D } from './texture/array-3-float-3d';\r\nimport { GLTextureArray4Float } from './texture/array-4-float';\r\nimport { GLTextureArray4Float2D } from './texture/array-4-float-2d';\r\nimport { GLTextureArray4Float3D } from './texture/array-4-float-3d';\r\nimport { GLTextureFloat } from './texture/float';\r\nimport { GLTextureFloat2D } from './texture/float-2d';\r\nimport { GLTextureFloat3D } from './texture/float-3d';\r\nimport { GLTextureMemoryOptimized } from './texture/memory-optimized';\r\nimport { GLTextureMemoryOptimized2D } from './texture/memory-optimized-2d';\r\nimport { GLTextureMemoryOptimized3D } from './texture/memory-optimized-3d';\r\nimport { GLTextureUnsigned } from './texture/unsigned';\r\nimport { GLTextureUnsigned2D } from './texture/unsigned-2d';\r\nimport { GLTextureUnsigned3D } from './texture/unsigned-3d';\r\nimport { GLTextureGraphical } from './texture/graphical';\r\n\r\n/**\r\n * @abstract\r\n * @extends Kernel\r\n */\r\nexport class GLKernel extends Kernel {\r\n  static get mode() {\r\n    return 'gpu';\r\n  }\r\n\r\n  static getIsFloatRead() {\r\n    const kernelString = `function kernelFunction() {\r\n      return 1;\r\n    }`;\r\n    const kernel = new this(kernelString, {\r\n      context: this.testContext,\r\n      canvas: this.testCanvas,\r\n      validate: false,\r\n      output: [1],\r\n      precision: 'single',\r\n      returnType: 'Number',\r\n      tactic: 'speed',\r\n    });\r\n    kernel.build();\r\n    kernel.run();\r\n    const result = kernel.renderOutput();\r\n    kernel.destroy(true);\r\n    return result[0] === 1;\r\n  }\r\n\r\n  static getIsIntegerDivisionAccurate() {\r\n    function kernelFunction(v1, v2) {\r\n      return v1[this.thread.x] / v2[this.thread.x];\r\n    }\r\n    const kernel = new this(kernelFunction.toString(), {\r\n      context: this.testContext,\r\n      canvas: this.testCanvas,\r\n      validate: false,\r\n      output: [2],\r\n      returnType: 'Number',\r\n      precision: 'unsigned',\r\n      tactic: 'speed',\r\n    });\r\n    const args = [\r\n      [6, 6030401],\r\n      [3, 3991]\r\n    ];\r\n    kernel.build.apply(kernel, args);\r\n    kernel.run.apply(kernel, args);\r\n    const result = kernel.renderOutput();\r\n    kernel.destroy(true);\r\n    // have we not got whole numbers for 6/3 or 6030401/3991\r\n    // add more here if others see this problem\r\n    return result[0] === 2 && result[1] === 1511;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  static get testCanvas() {\r\n    throw new Error(`\"testCanvas\" not defined on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  static get testContext() {\r\n    throw new Error(`\"testContext\" not defined on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   * @type {IKernelFeatures}\r\n   */\r\n  static get features() {\r\n    throw new Error(`\"features\" not defined on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   */\r\n  static setupFeatureChecks() {\r\n    throw new Error(`\"setupFeatureChecks\" not defined on ${ this.name }`);\r\n  }\r\n\r\n  /**\r\n   * @desc Fix division by factor of 3 FP accuracy bug\r\n   * @param {Boolean} fix - should fix\r\n   */\r\n  setFixIntegerDivisionAccuracy(fix) {\r\n    this.fixIntegerDivisionAccuracy = fix;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Toggle output mode\r\n   * @param {String} flag - 'single' or 'unsigned'\r\n   */\r\n  setPrecision(flag) {\r\n    this.precision = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Toggle texture output mode\r\n   * @param {Boolean} flag - true to enable floatTextures\r\n   * @deprecated\r\n   */\r\n  setFloatTextures(flag) {\r\n    utils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');\r\n    this.floatTextures = flag;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * A highly readable very forgiving micro-parser for a glsl function that gets argument types\r\n   * @param {String} source\r\n   * @returns {{argumentTypes: String[], argumentNames: String[]}}\r\n   */\r\n  static nativeFunctionArguments(source) {\r\n    const argumentTypes = [];\r\n    const argumentNames = [];\r\n    const states = [];\r\n    const isStartingVariableName = /^[a-zA-Z_]/;\r\n    const isVariableChar = /[a-zA-Z_0-9]/;\r\n    let i = 0;\r\n    let argumentName = null;\r\n    let argumentType = null;\r\n    while (i < source.length) {\r\n      const char = source[i];\r\n      const nextChar = source[i + 1];\r\n      const state = states.length > 0 ? states[states.length - 1] : null;\r\n\r\n      // begin MULTI_LINE_COMMENT handling\r\n      if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {\r\n        states.push('MULTI_LINE_COMMENT');\r\n        i += 2;\r\n        continue;\r\n      } else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {\r\n        states.pop();\r\n        i += 2;\r\n        continue;\r\n      }\r\n      // end MULTI_LINE_COMMENT handling\r\n\r\n      // begin COMMENT handling\r\n      else if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {\r\n        states.push('COMMENT');\r\n        i += 2;\r\n        continue;\r\n      } else if (state === 'COMMENT' && char === '\\n') {\r\n        states.pop();\r\n        i++;\r\n        continue;\r\n      }\r\n      // end COMMENT handling\r\n\r\n      // being FUNCTION_ARGUMENTS handling\r\n      else if (state === null && char === '(') {\r\n        states.push('FUNCTION_ARGUMENTS');\r\n        i++;\r\n        continue;\r\n      } else if (state === 'FUNCTION_ARGUMENTS') {\r\n        if (char === ')') {\r\n          states.pop();\r\n          break;\r\n        }\r\n        if (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {\r\n          states.push('DECLARE_VARIABLE');\r\n          argumentType = 'float';\r\n          argumentName = '';\r\n          i += 6;\r\n          continue;\r\n        } else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {\r\n          states.push('DECLARE_VARIABLE');\r\n          argumentType = 'int';\r\n          argumentName = '';\r\n          i += 4;\r\n          continue;\r\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {\r\n          states.push('DECLARE_VARIABLE');\r\n          argumentType = 'vec2';\r\n          argumentName = '';\r\n          i += 5;\r\n          continue;\r\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {\r\n          states.push('DECLARE_VARIABLE');\r\n          argumentType = 'vec3';\r\n          argumentName = '';\r\n          i += 5;\r\n          continue;\r\n        } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {\r\n          states.push('DECLARE_VARIABLE');\r\n          argumentType = 'vec4';\r\n          argumentName = '';\r\n          i += 5;\r\n          continue;\r\n        }\r\n      }\r\n      // end FUNCTION_ARGUMENTS handling\r\n\r\n      // begin DECLARE_VARIABLE handling\r\n      else if (state === 'DECLARE_VARIABLE') {\r\n        if (argumentName === '') {\r\n          if (char === ' ') {\r\n            i++;\r\n            continue;\r\n          }\r\n          if (!isStartingVariableName.test(char)) {\r\n            throw new Error('variable name is not expected string');\r\n          }\r\n        }\r\n        argumentName += char;\r\n        if (!isVariableChar.test(nextChar)) {\r\n          states.pop();\r\n          argumentNames.push(argumentName);\r\n          argumentTypes.push(typeMap[argumentType]);\r\n        }\r\n      }\r\n      // end DECLARE_VARIABLE handling\r\n\r\n      // Progress to next character\r\n      i++;\r\n    }\r\n    if (states.length > 0) {\r\n      throw new Error('GLSL function was not parsable');\r\n    }\r\n    return {\r\n      argumentNames,\r\n      argumentTypes,\r\n    };\r\n  }\r\n\r\n  static nativeFunctionReturnType(source) {\r\n    return typeMap[source.match(/int|float|vec[2-4]/)[0]];\r\n  }\r\n\r\n  static combineKernels(combinedKernel, lastKernel) {\r\n    combinedKernel.apply(null, arguments);\r\n    const {\r\n      texSize,\r\n      context,\r\n      threadDim\r\n    } = lastKernel.texSize;\r\n    let result;\r\n    if (lastKernel.precision === 'single') {\r\n      const w = texSize[0];\r\n      const h = Math.ceil(texSize[1] / 4);\r\n      result = new Float32Array(w * h * 4 * 4);\r\n      context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);\r\n    } else {\r\n      const bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\r\n      context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);\r\n      result = new Float32Array(bytes.buffer);\r\n    }\r\n\r\n    result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\r\n\r\n    if (lastKernel.output.length === 1) {\r\n      return result;\r\n    } else if (lastKernel.output.length === 2) {\r\n      return utils.splitArray(result, lastKernel.output[0]);\r\n    } else if (lastKernel.output.length === 3) {\r\n      const cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);\r\n      return cube.map(function(x) {\r\n        return utils.splitArray(x, lastKernel.output[0]);\r\n      });\r\n    }\r\n  }\r\n\r\n  constructor(source, settings) {\r\n    super(source, settings);\r\n    this.transferValues = null;\r\n    this.formatValues = null;\r\n    this.TextureConstructor = null;\r\n    this.renderOutput = null;\r\n    this.renderRawOutput = null;\r\n    this.texSize = null;\r\n    this.translatedSource = null;\r\n    this.renderStrategy = null;\r\n    this.compiledFragmentShader = null;\r\n    this.compiledVertexShader = null;\r\n  }\r\n\r\n  checkTextureSize() {\r\n    const { features } = this.constructor;\r\n    if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {\r\n      throw new Error(`Texture size [${this.texSize[0]},${this.texSize[1]}] generated by kernel is larger than supported size [${features.maxTextureSize},${features.maxTextureSize}]`);\r\n    }\r\n  }\r\n\r\n  translateSource() {\r\n    throw new Error(`\"translateSource\" not defined on ${this.constructor.name}`);\r\n  }\r\n\r\n  /**\r\n   * Picks a render strategy for the now finally parsed kernel\r\n   * @param args\r\n   * @return {null|KernelOutput}\r\n   */\r\n  pickRenderStrategy(args) {\r\n    if (this.graphical) {\r\n      this.renderRawOutput = this.readPackedPixelsToUint8Array;\r\n      this.transferValues = (pixels) => pixels;\r\n      this.TextureConstructor = GLTextureGraphical;\r\n      return null;\r\n    }\r\n    if (this.precision === 'unsigned') {\r\n      this.renderRawOutput = this.readPackedPixelsToUint8Array;\r\n      this.transferValues = this.readPackedPixelsToFloat32Array;\r\n      if (this.pipeline) {\r\n        this.renderOutput = this.renderTexture;\r\n        if (this.subKernels !== null) {\r\n          this.renderKernels = this.renderKernelsToTextures;\r\n        }\r\n        switch (this.returnType) {\r\n          case 'LiteralInteger':\r\n          case 'Float':\r\n          case 'Number':\r\n          case 'Integer':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureUnsigned3D;\r\n              this.renderStrategy = renderStrategy.PackedPixelTo3DFloat;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureUnsigned2D;\r\n              this.renderStrategy = renderStrategy.PackedPixelTo2DFloat;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureUnsigned;\r\n              this.renderStrategy = renderStrategy.PackedPixelToFloat;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n          case 'Array(3)':\r\n          case 'Array(4)':\r\n            return this.requestFallback(args);\r\n        }\r\n      } else {\r\n        if (this.subKernels !== null) {\r\n          this.renderKernels = this.renderKernelsToArrays;\r\n        }\r\n        switch (this.returnType) {\r\n          case 'LiteralInteger':\r\n          case 'Float':\r\n          case 'Number':\r\n          case 'Integer':\r\n            this.renderOutput = this.renderValues;\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureUnsigned3D;\r\n              this.renderStrategy = renderStrategy.PackedPixelTo3DFloat;\r\n              this.formatValues = utils.erect3DPackedFloat;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureUnsigned2D;\r\n              this.renderStrategy = renderStrategy.PackedPixelTo2DFloat;\r\n              this.formatValues = utils.erect2DPackedFloat;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureUnsigned;\r\n              this.renderStrategy = renderStrategy.PackedPixelToFloat;\r\n              this.formatValues = utils.erectPackedFloat;\r\n              return null;\r\n            }\r\n\r\n            break;\r\n          case 'Array(2)':\r\n          case 'Array(3)':\r\n          case 'Array(4)':\r\n            return this.requestFallback(args);\r\n        }\r\n      }\r\n    } else if (this.precision === 'single') {\r\n      this.renderRawOutput = this.readFloatPixelsToFloat32Array;\r\n      this.transferValues = this.readFloatPixelsToFloat32Array;\r\n      if (this.pipeline) {\r\n        this.renderStrategy = renderStrategy.FloatTexture;\r\n        this.renderOutput = this.renderTexture;\r\n        if (this.subKernels !== null) {\r\n          this.renderKernels = this.renderKernelsToTextures;\r\n        }\r\n        switch (this.returnType) {\r\n          case 'LiteralInteger':\r\n          case 'Float':\r\n          case 'Number':\r\n          case 'Integer':\r\n            if (this.optimizeFloatMemory) {\r\n              if (this.output[2] > 0) {\r\n                this.TextureConstructor = GLTextureMemoryOptimized3D;\r\n                return null;\r\n              } else if (this.output[1] > 0) {\r\n                this.TextureConstructor = GLTextureMemoryOptimized2D;\r\n                return null;\r\n              } else {\r\n                this.TextureConstructor = GLTextureMemoryOptimized;\r\n                return null;\r\n              }\r\n            } else {\r\n              if (this.output[2] > 0) {\r\n                this.TextureConstructor = GLTextureFloat3D;\r\n                return null;\r\n              } else if (this.output[1] > 0) {\r\n                this.TextureConstructor = GLTextureFloat2D;\r\n                return null;\r\n              } else {\r\n                this.TextureConstructor = GLTextureFloat;\r\n                return null;\r\n              }\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray2Float3D;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray2Float2D;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray2Float;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(3)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray3Float3D;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray3Float2D;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray3Float;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(4)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray4Float3D;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray4Float2D;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray4Float;\r\n              return null;\r\n            }\r\n        }\r\n      }\r\n      this.renderOutput = this.renderValues;\r\n      if (this.subKernels !== null) {\r\n        this.renderKernels = this.renderKernelsToArrays;\r\n      }\r\n      if (this.optimizeFloatMemory) {\r\n        switch (this.returnType) {\r\n          case 'LiteralInteger':\r\n          case 'Float':\r\n          case 'Number':\r\n          case 'Integer':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureMemoryOptimized3D;\r\n              this.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimized3DFloat;\r\n              this.formatValues = utils.erectMemoryOptimized3DFloat;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureMemoryOptimized2D;\r\n              this.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimized2DFloat;\r\n              this.formatValues = utils.erectMemoryOptimized2DFloat;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureMemoryOptimized;\r\n              this.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimizedFloat;\r\n              this.formatValues = utils.erectMemoryOptimizedFloat;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray2Float3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DArray2;\r\n              this.formatValues = utils.erect3DArray2;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray2Float2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DArray2;\r\n              this.formatValues = utils.erect2DArray2;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray2Float;\r\n              this.renderStrategy = renderStrategy.FloatPixelToArray2;\r\n              this.formatValues = utils.erectArray2;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(3)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray3Float3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DArray3;\r\n              this.formatValues = utils.erect3DArray3;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray3Float2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DArray3;\r\n              this.formatValues = utils.erect2DArray3;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray3Float;\r\n              this.renderStrategy = renderStrategy.FloatPixelToArray3;\r\n              this.formatValues = utils.erectArray3;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(4)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray4Float3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DArray4;\r\n              this.formatValues = utils.erect3DArray4;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray4Float2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DArray4;\r\n              this.formatValues = utils.erect2DArray4;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray4Float;\r\n              this.renderStrategy = renderStrategy.FloatPixelToArray4;\r\n              this.formatValues = utils.erectArray4;\r\n              return null;\r\n            }\r\n        }\r\n      } else {\r\n        switch (this.returnType) {\r\n          case 'LiteralInteger':\r\n          case 'Float':\r\n          case 'Number':\r\n          case 'Integer':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureFloat3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DFloat;\r\n              this.formatValues = utils.erect3DFloat;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureFloat2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DFloat;\r\n              this.formatValues = utils.erect2DFloat;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureFloat;\r\n              this.renderStrategy = renderStrategy.FloatPixelToFloat;\r\n              this.formatValues = utils.erectFloat;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray2Float3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DArray2;\r\n              this.formatValues = utils.erect3DArray2;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray2Float2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DArray2;\r\n              this.formatValues = utils.erect2DArray2;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray2Float;\r\n              this.renderStrategy = renderStrategy.FloatPixelToArray2;\r\n              this.formatValues = utils.erectArray2;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(3)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray3Float3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DArray3;\r\n              this.formatValues = utils.erect3DArray3;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray3Float2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DArray3;\r\n              this.formatValues = utils.erect2DArray3;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray3Float;\r\n              this.renderStrategy = renderStrategy.FloatPixelToArray3;\r\n              this.formatValues = utils.erectArray3;\r\n              return null;\r\n            }\r\n            break;\r\n          case 'Array(4)':\r\n            if (this.output[2] > 0) {\r\n              this.TextureConstructor = GLTextureArray4Float3D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo3DArray4;\r\n              this.formatValues = utils.erect3DArray4;\r\n              return null;\r\n            } else if (this.output[1] > 0) {\r\n              this.TextureConstructor = GLTextureArray4Float2D;\r\n              this.renderStrategy = renderStrategy.FloatPixelTo2DArray4;\r\n              this.formatValues = utils.erect2DArray4;\r\n              return null;\r\n            } else {\r\n              this.TextureConstructor = GLTextureArray4Float;\r\n              this.renderStrategy = renderStrategy.FloatPixelToArray4;\r\n              this.formatValues = utils.erectArray4;\r\n              return null;\r\n            }\r\n        }\r\n      }\r\n    } else {\r\n      throw new Error(`unhandled precision of \"${this.precision}\"`);\r\n    }\r\n\r\n    throw new Error(`unhandled return type \"${this.returnType}\"`);\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @returns String\r\n   */\r\n  getKernelString() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n\r\n  getMainResultTexture() {\r\n    switch (this.returnType) {\r\n      case 'LiteralInteger':\r\n      case 'Float':\r\n      case 'Integer':\r\n      case 'Number':\r\n        return this.getMainResultNumberTexture();\r\n      case 'Array(2)':\r\n        return this.getMainResultArray2Texture();\r\n      case 'Array(3)':\r\n        return this.getMainResultArray3Texture();\r\n      case 'Array(4)':\r\n        return this.getMainResultArray4Texture();\r\n      default:\r\n        throw new Error(`unhandled returnType type ${ this.returnType }`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultKernelNumberTexture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultSubKernelNumberTexture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultKernelArray2Texture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultSubKernelArray2Texture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultKernelArray3Texture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultSubKernelArray3Texture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultKernelArray4Texture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultSubKernelArray4Texture() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultGraphical() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultMemoryOptimizedFloats() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @returns String[]\r\n   */\r\n  getMainResultPackedPixels() {\r\n    throw new Error(`abstract method call`);\r\n  }\r\n\r\n  getMainResultString() {\r\n    if (this.graphical) {\r\n      return this.getMainResultGraphical();\r\n    } else if (this.precision === 'single') {\r\n      if (this.optimizeFloatMemory) {\r\n        return this.getMainResultMemoryOptimizedFloats();\r\n      }\r\n      return this.getMainResultTexture();\r\n    } else {\r\n      return this.getMainResultPackedPixels();\r\n    }\r\n  }\r\n\r\n  getMainResultNumberTexture() {\r\n    return utils.linesToString(this.getMainResultKernelNumberTexture()) +\r\n      utils.linesToString(this.getMainResultSubKernelNumberTexture());\r\n  }\r\n\r\n  getMainResultArray2Texture() {\r\n    return utils.linesToString(this.getMainResultKernelArray2Texture()) +\r\n      utils.linesToString(this.getMainResultSubKernelArray2Texture());\r\n  }\r\n\r\n  getMainResultArray3Texture() {\r\n    return utils.linesToString(this.getMainResultKernelArray3Texture()) +\r\n      utils.linesToString(this.getMainResultSubKernelArray3Texture());\r\n  }\r\n\r\n  getMainResultArray4Texture() {\r\n    return utils.linesToString(this.getMainResultKernelArray4Texture()) +\r\n      utils.linesToString(this.getMainResultSubKernelArray4Texture());\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {string}\r\n   */\r\n  getFloatTacticDeclaration() {\r\n    switch (this.tactic) {\r\n      case 'speed':\r\n        return 'precision lowp float;\\n';\r\n      case 'performance':\r\n        return 'precision highp float;\\n';\r\n      case 'balanced':\r\n      default:\r\n        return 'precision mediump float;\\n';\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {string}\r\n   */\r\n  getIntTacticDeclaration() {\r\n    switch (this.tactic) {\r\n      case 'speed':\r\n        return 'precision lowp int;\\n';\r\n      case 'performance':\r\n        return 'precision highp int;\\n';\r\n      case 'balanced':\r\n      default:\r\n        return 'precision mediump int;\\n';\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @return {string}\r\n   */\r\n  getSampler2DTacticDeclaration() {\r\n    switch (this.tactic) {\r\n      case 'speed':\r\n        return 'precision lowp sampler2D;\\n';\r\n      case 'performance':\r\n        return 'precision highp sampler2D;\\n';\r\n      case 'balanced':\r\n      default:\r\n        return 'precision mediump sampler2D;\\n';\r\n    }\r\n  }\r\n\r\n  getSampler2DArrayTacticDeclaration() {\r\n    switch (this.tactic) {\r\n      case 'speed':\r\n        return 'precision lowp sampler2DArray;\\n';\r\n      case 'performance':\r\n        return 'precision highp sampler2DArray;\\n';\r\n      case 'balanced':\r\n      default:\r\n        return 'precision mediump sampler2DArray;\\n';\r\n    }\r\n  }\r\n\r\n  renderTexture() {\r\n    return new this.TextureConstructor({\r\n      texture: this.outputTexture,\r\n      size: this.texSize,\r\n      dimensions: this.threadDim,\r\n      output: this.output,\r\n      context: this.context,\r\n    });\r\n  }\r\n  readPackedPixelsToUint8Array() {\r\n    if (this.precision !== 'unsigned') throw new Error('Requires this.precision to be \"unsigned\"');\r\n    const {\r\n      texSize,\r\n      context: gl\r\n    } = this;\r\n    const result = new Uint8Array(texSize[0] * texSize[1] * 4);\r\n    gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\r\n    return result;\r\n  }\r\n\r\n  readPackedPixelsToFloat32Array() {\r\n    return new Float32Array(this.readPackedPixelsToUint8Array().buffer);\r\n  }\r\n\r\n  readFloatPixelsToFloat32Array() {\r\n    if (this.precision !== 'single') throw new Error('Requires this.precision to be \"single\"');\r\n    const {\r\n      texSize,\r\n      context: gl\r\n    } = this;\r\n    const w = texSize[0];\r\n    const h = texSize[1];\r\n    const result = new Float32Array(w * h * 4);\r\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\r\n    return result;\r\n  }\r\n\r\n  readMemoryOptimizedFloatPixelsToFloat32Array() {\r\n    if (this.precision !== 'single') throw new Error('Requires this.precision to be \"single\"');\r\n    const {\r\n      texSize,\r\n      context: gl\r\n    } = this;\r\n    const w = texSize[0];\r\n    const h = texSize[1];\r\n    const result = new Float32Array(w * h * 4);\r\n    gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Boolean} [flip]\r\n   * @return {Uint8Array}\r\n   */\r\n  getPixels(flip) {\r\n    const {\r\n      context: gl,\r\n      output\r\n    } = this;\r\n    const [width, height] = output;\r\n    const pixels = new Uint8Array(width * height * 4);\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\r\n    // flipped by default, so invert\r\n    return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);\r\n  }\r\n\r\n  renderKernelsToArrays() {\r\n    const result = {\r\n      result: this.renderOutput(),\r\n    };\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      result[this.subKernels[i].property] = new this.TextureConstructor({\r\n        texture: this.subKernelOutputTextures[i],\r\n        size: this.texSize,\r\n        dimensions: this.threadDim,\r\n        output: this.output,\r\n        context: this.context,\r\n      }).toArray();\r\n    }\r\n    return result;\r\n  }\r\n\r\n  renderKernelsToTextures() {\r\n    const result = {\r\n      result: this.renderOutput(),\r\n    };\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      result[this.subKernels[i].property] = new this.TextureConstructor({\r\n        texture: this.subKernelOutputTextures[i],\r\n        size: this.texSize,\r\n        dimensions: this.threadDim,\r\n        output: this.output,\r\n        context: this.context,\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  setOutput(output) {\r\n    super.setOutput(output);\r\n    if (this.program) {\r\n      this.threadDim = [this.output[0], this.output[1] || 1, this.output[2] || 1];\r\n      this.texSize = utils.getKernelTextureSize({\r\n        optimizeFloatMemory: this.optimizeFloatMemory,\r\n        precision: this.precision,\r\n      }, this.output);\r\n      const { context: gl } = this;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n      this.updateMaxTexSize();\r\n      this.framebuffer.width = this.texSize[0];\r\n      this.framebuffer.height = this.texSize[1];\r\n      this.context.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\r\n      this.canvas.width = this.maxTexSize[0];\r\n      this.canvas.height = this.maxTexSize[1];\r\n      this._setupOutputTexture();\r\n      if (this.subKernels && this.subKernels.length > 0) {\r\n        this._setupSubOutputTextures();\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n  renderValues() {\r\n    return this.formatValues(\r\n      this.transferValues(),\r\n      this.output[0],\r\n      this.output[1],\r\n      this.output[2]\r\n    );\r\n  }\r\n}\r\n\r\nexport const renderStrategy = Object.freeze({\r\n  PackedPixelToUint8Array: Symbol('PackedPixelToUint8Array'),\r\n  PackedPixelToFloat: Symbol('PackedPixelToFloat'),\r\n  PackedPixelTo2DFloat: Symbol('PackedPixelTo2DFloat'),\r\n  PackedPixelTo3DFloat: Symbol('PackedPixelTo3DFloat'),\r\n  PackedTexture: Symbol('PackedTexture'),\r\n  FloatPixelToFloat32Array: Symbol('FloatPixelToFloat32Array'),\r\n  FloatPixelToFloat: Symbol('FloatPixelToFloat'),\r\n  FloatPixelTo2DFloat: Symbol('FloatPixelTo2DFloat'),\r\n  FloatPixelTo3DFloat: Symbol('FloatPixelTo3DFloat'),\r\n  FloatPixelToArray2: Symbol('FloatPixelToArray2'),\r\n  FloatPixelTo2DArray2: Symbol('FloatPixelTo2DArray2'),\r\n  FloatPixelTo3DArray2: Symbol('FloatPixelTo3DArray2'),\r\n  FloatPixelToArray3: Symbol('FloatPixelToArray3'),\r\n  FloatPixelTo2DArray3: Symbol('FloatPixelTo2DArray3'),\r\n  FloatPixelTo3DArray3: Symbol('FloatPixelTo3DArray3'),\r\n  FloatPixelToArray4: Symbol('FloatPixelToArray4'),\r\n  FloatPixelTo2DArray4: Symbol('FloatPixelTo2DArray4'),\r\n  FloatPixelTo3DArray4: Symbol('FloatPixelTo3DArray4'),\r\n  FloatTexture: Symbol('FloatTexture'),\r\n  MemoryOptimizedFloatPixelToMemoryOptimizedFloat: Symbol('MemoryOptimizedFloatPixelToFloat'),\r\n  MemoryOptimizedFloatPixelToMemoryOptimized2DFloat: Symbol('MemoryOptimizedFloatPixelTo2DFloat'),\r\n  MemoryOptimizedFloatPixelToMemoryOptimized3DFloat: Symbol('MemoryOptimizedFloatPixelTo3DFloat'),\r\n});\r\n\r\nconst typeMap = {\r\n  int: 'Integer',\r\n  float: 'Number',\r\n  vec2: 'Array(2)',\r\n  vec3: 'Array(3)',\r\n  vec4: 'Array(4)',\r\n};\r\n","import { utils } from '../../utils';\r\nimport { FunctionNode } from '../function-node';\r\n// Closure capture for the ast function, prevent collision with existing AST functions\r\n// The prefixes to use\r\nconst jsMathPrefix = 'Math.';\r\nconst localPrefix = 'this.';\r\n\r\n/**\r\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to toString its respective WebGL code\r\n * @extends FunctionNode\r\n * @returns the converted WebGL function string\r\n */\r\nexport class WebGLFunctionNode extends FunctionNode {\r\n  constructor(source, settings) {\r\n    super(source, settings);\r\n    if (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {\r\n      this.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for to its *named function*\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astFunction(ast, retArr) {\r\n    // Setup function return type and name\r\n    if (this.isRootKernel) {\r\n      retArr.push('void');\r\n    } else {\r\n      // looking up return type, this is a little expensive, and can be avoided if returnType is set\r\n      let lastReturn = null;\r\n      if (!this.returnType) {\r\n        const lastReturn = this.findLastReturn();\r\n        if (lastReturn) {\r\n          this.returnType = this.getType(ast.body);\r\n          if (this.returnType === 'LiteralInteger') {\r\n            this.returnType = 'Number';\r\n          }\r\n        }\r\n      }\r\n\r\n      const { returnType } = this;\r\n      if (!returnType) {\r\n        retArr.push('void');\r\n      } else {\r\n        const type = typeMap[returnType];\r\n        if (!type) {\r\n          throw new Error(`unknown type ${returnType}`);\r\n        }\r\n        retArr.push(type);\r\n      }\r\n    }\r\n    retArr.push(' ');\r\n    retArr.push(this.name);\r\n    retArr.push('(');\r\n\r\n    if (!this.isRootKernel) {\r\n      // Arguments handling\r\n      for (let i = 0; i < this.argumentNames.length; ++i) {\r\n        const argumentName = this.argumentNames[i];\r\n\r\n        if (i > 0) {\r\n          retArr.push(', ');\r\n        }\r\n        let argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];\r\n        // The type is too loose ended, here we descide to solidify a type, lets go with float\r\n        if (!argumentType) {\r\n          throw this.astErrorOutput(`Unknown argument ${argumentName} type`, ast);\r\n        }\r\n        if (argumentType === 'LiteralInteger') {\r\n          this.argumentTypes[i] = argumentType = 'Number';\r\n        }\r\n        const type = typeMap[argumentType];\r\n        if (!type) {\r\n          throw this.astErrorOutput('Unexpected expression', ast);\r\n        }\r\n        retArr.push(type);\r\n        retArr.push(' ');\r\n        retArr.push('user_');\r\n        retArr.push(argumentName);\r\n      }\r\n    }\r\n\r\n    // Function opening\r\n    retArr.push(') {\\n');\r\n\r\n    // Body statement iteration\r\n    for (let i = 0; i < ast.body.body.length; ++i) {\r\n      this.astGeneric(ast.body.body[i], retArr);\r\n      retArr.push('\\n');\r\n    }\r\n\r\n    // Function closing\r\n    retArr.push('}\\n');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for to *return* statement\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astReturnStatement(ast, retArr) {\r\n    if (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);\r\n    this.pushState('skip-literal-correction');\r\n    const type = this.getType(ast.argument);\r\n    this.popState('skip-literal-correction');\r\n\r\n    const result = [];\r\n\r\n    if (!this.returnType) {\r\n      if (type === 'LiteralInteger' || type === 'Integer') {\r\n        this.returnType = 'Number';\r\n      } else {\r\n        this.returnType = type;\r\n      }\r\n    }\r\n\r\n    switch (this.returnType) {\r\n      case 'LiteralInteger':\r\n      case 'Number':\r\n      case 'Float':\r\n        switch (type) {\r\n          case 'Integer':\r\n            result.push('float(');\r\n            this.astGeneric(ast.argument, result);\r\n            result.push(')');\r\n            break;\r\n          case 'LiteralInteger':\r\n            this.castLiteralToFloat(ast.argument, result);\r\n\r\n            // Running astGeneric forces the LiteralInteger to pick a type, and here, if we are returning a float, yet\r\n            // the LiteralInteger has picked to be an integer because of constraints on it we cast it to float.\r\n            if (this.getType(ast) === 'Integer') {\r\n              result.unshift('float(');\r\n              result.push(')');\r\n            }\r\n            break;\r\n          default:\r\n            this.astGeneric(ast.argument, result);\r\n        }\r\n        break;\r\n      case 'Integer':\r\n        switch (type) {\r\n          case 'Float':\r\n          case 'Number':\r\n            this.castValueToInteger(ast.argument, result);\r\n            break;\r\n          case 'LiteralInteger':\r\n            this.castLiteralToInteger(ast.argument, result);\r\n            break;\r\n          default:\r\n            this.astGeneric(ast.argument, result);\r\n        }\r\n        break;\r\n      case 'Array(4)':\r\n      case 'Array(3)':\r\n      case 'Array(2)':\r\n      case 'Input':\r\n        this.astGeneric(ast.argument, result);\r\n        break;\r\n      default:\r\n        throw this.astErrorOutput(`unhandled return type ${this.returnType}`, ast);\r\n    }\r\n\r\n    if (this.isRootKernel) {\r\n      retArr.push(`kernelResult = ${ result.join('') };`);\r\n      retArr.push('return;');\r\n    } else if (this.isSubKernel) {\r\n      retArr.push(`subKernelResult_${ this.name } = ${ result.join('') };`);\r\n      retArr.push(`return subKernelResult_${ this.name };`);\r\n    } else {\r\n      retArr.push(`return ${ result.join('') };`);\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *literal value*\r\n   *\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   *\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astLiteral(ast, retArr) {\r\n    // Reject non numeric literals\r\n    if (isNaN(ast.value)) {\r\n      throw this.astErrorOutput(\r\n        'Non-numeric literal not supported : ' + ast.value,\r\n        ast\r\n      );\r\n    }\r\n\r\n    const key = `${ast.start},${ast.end}`;\r\n    if (Number.isInteger(ast.value)) {\r\n      if (this.isState('in-for-loop-init') || this.isState('casting-to-integer') || this.isState('building-integer')) {\r\n        this.literalTypes[key] = 'Integer';\r\n        retArr.push(`${ast.value}`);\r\n      } else if (this.isState('casting-to-float') || this.isState('building-float')) {\r\n        this.literalTypes[key] = 'Number';\r\n        retArr.push(`${ast.value}.0`);\r\n      } else {\r\n        this.literalTypes[key] = 'Number';\r\n        retArr.push(`${ast.value}.0`);\r\n      }\r\n    } else if (this.isState('casting-to-integer') || this.isState('building-integer')) {\r\n      this.literalTypes[key] = 'Integer';\r\n      retArr.push(Math.round(ast.value));\r\n    } else {\r\n      this.literalTypes[key] = 'Number';\r\n      retArr.push(`${ast.value}`);\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *binary* expression\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astBinaryExpression(ast, retArr) {\r\n    if (this.checkAndUpconvertOperator(ast, retArr)) {\r\n      return retArr;\r\n    }\r\n\r\n    if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {\r\n      retArr.push('div_with_int_check(');\r\n      this.pushState('building-float');\r\n      switch (this.getType(ast.left)) {\r\n        case 'Integer':\r\n          this.castValueToFloat(ast.left, retArr);\r\n          break;\r\n        case 'LiteralInteger':\r\n          this.castLiteralToFloat(ast.left, retArr);\r\n          break;\r\n        default:\r\n          this.astGeneric(ast.left, retArr);\r\n      }\r\n      retArr.push(', ');\r\n      switch (this.getType(ast.right)) {\r\n        case 'Integer':\r\n          this.castValueToFloat(ast.right, retArr);\r\n          break;\r\n        case 'LiteralInteger':\r\n          this.castLiteralToFloat(ast.right, retArr);\r\n          break;\r\n        default:\r\n          this.astGeneric(ast.right, retArr);\r\n      }\r\n      this.popState('building-float');\r\n      retArr.push(')');\r\n      return retArr;\r\n    }\r\n\r\n    retArr.push('(');\r\n    const leftType = this.getType(ast.left) || 'Number';\r\n    const rightType = this.getType(ast.right) || 'Number';\r\n    if (!leftType || !rightType) {\r\n      throw this.astErrorOutput(`Unhandled binary expression`, ast);\r\n    }\r\n    const key = leftType + ' & ' + rightType;\r\n    switch (key) {\r\n      case 'Integer & Integer':\r\n        this.pushState('building-integer');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.astGeneric(ast.right, retArr);\r\n        this.popState('building-integer');\r\n        break;\r\n      case 'Number & Float':\r\n      case 'Float & Number':\r\n      case 'Float & Float':\r\n      case 'Number & Number':\r\n        this.pushState('building-float');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.astGeneric(ast.right, retArr);\r\n        this.popState('building-float');\r\n        break;\r\n      case 'LiteralInteger & LiteralInteger':\r\n        if (this.isState('casting-to-integer') || this.isState('building-integer')) {\r\n          this.pushState('building-integer');\r\n          this.astGeneric(ast.left, retArr);\r\n          retArr.push(operatorMap[ast.operator] || ast.operator);\r\n          this.astGeneric(ast.right, retArr);\r\n          this.popState('building-integer');\r\n        } else {\r\n          this.pushState('building-float');\r\n          this.castLiteralToFloat(ast.left, retArr);\r\n          retArr.push(operatorMap[ast.operator] || ast.operator);\r\n          this.castLiteralToFloat(ast.right, retArr);\r\n          this.popState('building-float');\r\n        }\r\n        break;\r\n\r\n      case 'Integer & Float':\r\n      case 'Integer & Number':\r\n        if (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {\r\n          // if right value is actually a float, don't loose that information, cast left to right rather than the usual right to left\r\n          if (!Number.isInteger(ast.right.value)) {\r\n            this.pushState('building-float');\r\n            this.castValueToFloat(ast.left, retArr);\r\n            retArr.push(operatorMap[ast.operator] || ast.operator);\r\n            this.astGeneric(ast.right, retArr);\r\n            this.popState('building-float');\r\n            break;\r\n          }\r\n        }\r\n        this.pushState('building-integer');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.pushState('casting-to-integer');\r\n        if (ast.right.type === 'Literal') {\r\n          const literalResult = [];\r\n          this.astGeneric(ast.right, literalResult);\r\n          const literalType = this.getType(ast.right);\r\n          if (literalType === 'Integer') {\r\n            retArr.push(literalResult.join(''));\r\n          } else {\r\n            throw this.astErrorOutput(`Unhandled binary expression with literal`, ast);\r\n          }\r\n        } else {\r\n          retArr.push('int(');\r\n          this.astGeneric(ast.right, retArr);\r\n          retArr.push(')');\r\n        }\r\n        this.popState('casting-to-integer');\r\n        this.popState('building-integer');\r\n        break;\r\n      case 'Integer & LiteralInteger':\r\n        this.pushState('building-integer');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.castLiteralToInteger(ast.right, retArr);\r\n        this.popState('building-integer');\r\n        break;\r\n\r\n      case 'Number & Integer':\r\n        this.pushState('building-float');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.castValueToFloat(ast.right, retArr);\r\n        this.popState('building-float');\r\n        break;\r\n      case 'Float & LiteralInteger':\r\n      case 'Number & LiteralInteger':\r\n        if (this.isState('in-for-loop-test')) {\r\n          this.pushState('building-integer');\r\n          retArr.push('int(');\r\n          this.astGeneric(ast.left, retArr);\r\n          retArr.push(')');\r\n          retArr.push(operatorMap[ast.operator] || ast.operator);\r\n          this.castLiteralToInteger(ast.right, retArr);\r\n          this.popState('building-integer');\r\n        } else {\r\n          this.pushState('building-float');\r\n          this.astGeneric(ast.left, retArr);\r\n          retArr.push(operatorMap[ast.operator] || ast.operator);\r\n          this.castLiteralToFloat(ast.right, retArr);\r\n          this.popState('building-float');\r\n        }\r\n        break;\r\n      case 'LiteralInteger & Float':\r\n      case 'LiteralInteger & Number':\r\n        if (this.isState('in-for-loop-test') || this.isState('in-for-loop-init') || this.isState('casting-to-integer')) {\r\n          this.pushState('building-integer');\r\n          this.castLiteralToInteger(ast.left, retArr);\r\n          retArr.push(operatorMap[ast.operator] || ast.operator);\r\n          this.castValueToInteger(ast.right, retArr);\r\n          this.popState('building-integer');\r\n        } else {\r\n          this.pushState('building-float');\r\n          this.astGeneric(ast.left, retArr);\r\n          retArr.push(operatorMap[ast.operator] || ast.operator);\r\n          this.pushState('casting-to-float');\r\n          this.astGeneric(ast.right, retArr);\r\n          this.popState('casting-to-float');\r\n          this.popState('building-float');\r\n        }\r\n        break;\r\n      case 'LiteralInteger & Integer':\r\n        this.pushState('building-integer');\r\n        this.castLiteralToInteger(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.astGeneric(ast.right, retArr);\r\n        this.popState('building-integer');\r\n        break;\r\n\r\n      case 'Boolean & Boolean':\r\n        this.pushState('building-boolean');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.astGeneric(ast.right, retArr);\r\n        this.popState('building-boolean');\r\n        break;\r\n\r\n      case 'Float & Integer':\r\n        this.pushState('building-float');\r\n        this.astGeneric(ast.left, retArr);\r\n        retArr.push(operatorMap[ast.operator] || ast.operator);\r\n        this.castValueToFloat(ast.right, retArr);\r\n        this.popState('building-float');\r\n        break;\r\n\r\n      default:\r\n        throw this.astErrorOutput(`Unhandled binary expression between ${key}`, ast);\r\n    }\r\n    retArr.push(')');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  checkAndUpconvertOperator(ast, retArr) {\r\n    const bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);\r\n    if (bitwiseResult) {\r\n      return bitwiseResult;\r\n    }\r\n    const upconvertableOperators = {\r\n      '%': 'mod',\r\n      '**': 'pow',\r\n    };\r\n    const foundOperator = upconvertableOperators[ast.operator];\r\n    if (!foundOperator) return null;\r\n    retArr.push(foundOperator);\r\n    retArr.push('(');\r\n    switch (this.getType(ast.left)) {\r\n      case 'Integer':\r\n        this.castValueToFloat(ast.left, retArr);\r\n        break;\r\n      case 'LiteralInteger':\r\n        this.castLiteralToFloat(ast.left, retArr);\r\n        break;\r\n      default:\r\n        this.astGeneric(ast.left, retArr);\r\n    }\r\n    retArr.push(',');\r\n    switch (this.getType(ast.right)) {\r\n      case 'Integer':\r\n        this.castValueToFloat(ast.right, retArr);\r\n        break;\r\n      case 'LiteralInteger':\r\n        this.castLiteralToFloat(ast.right, retArr);\r\n        break;\r\n      default:\r\n        this.astGeneric(ast.right, retArr);\r\n    }\r\n    retArr.push(')');\r\n    return retArr;\r\n  }\r\n\r\n  checkAndUpconvertBitwiseOperators(ast, retArr) {\r\n    const upconvertableOperators = {\r\n      '&': 'bitwiseAnd',\r\n      '|': 'bitwiseOr',\r\n      '^': 'bitwiseXOR',\r\n      '<<': 'bitwiseZeroFillLeftShift',\r\n      '>>': 'bitwiseSignedRightShift',\r\n      '>>>': 'bitwiseZeroFillRightShift',\r\n    };\r\n    const foundOperator = upconvertableOperators[ast.operator];\r\n    if (!foundOperator) return null;\r\n    retArr.push(foundOperator);\r\n    retArr.push('(');\r\n    const leftType = this.getType(ast.left);\r\n    switch (leftType) {\r\n      case 'Number':\r\n      case 'Float':\r\n        this.castValueToInteger(ast.left, retArr);\r\n        break;\r\n      case 'LiteralInteger':\r\n        this.castLiteralToInteger(ast.left, retArr);\r\n        break;\r\n      default:\r\n        this.astGeneric(ast.left, retArr);\r\n    }\r\n    retArr.push(',');\r\n    const rightType = this.getType(ast.right);\r\n    switch (rightType) {\r\n      case 'Number':\r\n      case 'Float':\r\n        this.castValueToInteger(ast.right, retArr);\r\n        break;\r\n      case 'LiteralInteger':\r\n        this.castLiteralToInteger(ast.right, retArr);\r\n        break;\r\n      default:\r\n        this.astGeneric(ast.right, retArr);\r\n    }\r\n    retArr.push(')');\r\n    return retArr;\r\n  }\r\n\r\n  checkAndUpconvertBitwiseUnary(ast, retArr) {\r\n    const upconvertableOperators = {\r\n      '~': 'bitwiseNot',\r\n    };\r\n    const foundOperator = upconvertableOperators[ast.operator];\r\n    if (!foundOperator) return null;\r\n    retArr.push(foundOperator);\r\n    retArr.push('(');\r\n    switch (this.getType(ast.argument)) {\r\n      case 'Number':\r\n      case 'Float':\r\n        this.castValueToInteger(ast.argument, retArr);\r\n        break;\r\n      case 'LiteralInteger':\r\n        this.castLiteralToInteger(ast.argument, retArr);\r\n        break;\r\n      default:\r\n        this.astGeneric(ast.argument, retArr);\r\n    }\r\n    retArr.push(')');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Object} ast\r\n   * @param {Array} retArr\r\n   * @return {String[]}\r\n   */\r\n  castLiteralToInteger(ast, retArr) {\r\n    this.pushState('casting-to-integer');\r\n    this.astGeneric(ast, retArr);\r\n    this.popState('casting-to-integer');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Object} ast\r\n   * @param {Array} retArr\r\n   * @return {String[]}\r\n   */\r\n  castLiteralToFloat(ast, retArr) {\r\n    this.pushState('casting-to-float');\r\n    this.astGeneric(ast, retArr);\r\n    this.popState('casting-to-float');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Object} ast\r\n   * @param {Array} retArr\r\n   * @return {String[]}\r\n   */\r\n  castValueToInteger(ast, retArr) {\r\n    this.pushState('casting-to-integer');\r\n    retArr.push('int(');\r\n    this.astGeneric(ast, retArr);\r\n    retArr.push(')');\r\n    this.popState('casting-to-integer');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Object} ast\r\n   * @param {Array} retArr\r\n   * @return {String[]}\r\n   */\r\n  castValueToFloat(ast, retArr) {\r\n    this.pushState('casting-to-float');\r\n    retArr.push('float(');\r\n    this.astGeneric(ast, retArr);\r\n    retArr.push(')');\r\n    this.popState('casting-to-float');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *identifier* expression\r\n   * @param {Object} idtNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astIdentifierExpression(idtNode, retArr) {\r\n    if (idtNode.type !== 'Identifier') {\r\n      throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\r\n    }\r\n\r\n    const type = this.getType(idtNode);\r\n\r\n    if (idtNode.name === 'Infinity') {\r\n      // https://stackoverflow.com/a/47543127/1324039\r\n      retArr.push('3.402823466e+38');\r\n    } else if (type === 'Boolean') {\r\n      if (this.argumentNames.indexOf(idtNode.name) > -1) {\r\n        retArr.push(`bool(user_${idtNode.name})`);\r\n      } else {\r\n        retArr.push(`user_${idtNode.name}`);\r\n      }\r\n    } else {\r\n      retArr.push(`user_${idtNode.name}`);\r\n    }\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *for-loop* expression\r\n   * @param {Object} forNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed webgl string\r\n   */\r\n  astForStatement(forNode, retArr) {\r\n    if (forNode.type !== 'ForStatement') {\r\n      throw this.astErrorOutput('Invalid for statement', forNode);\r\n    }\r\n\r\n    const initArr = [];\r\n    const testArr = [];\r\n    const updateArr = [];\r\n    const bodyArr = [];\r\n    let isSafe = null;\r\n\r\n    if (forNode.init) {\r\n      this.pushState('in-for-loop-init');\r\n      this.astGeneric(forNode.init, initArr);\r\n      const { declarations } = forNode.init;\r\n      for (let i = 0; i < declarations.length; i++) {\r\n        if (declarations[i].init && declarations[i].init.type !== 'Literal') {\r\n          isSafe = false;\r\n        }\r\n      }\r\n      if (isSafe) {\r\n        for (let i = 0; i < initArr.length; i++) {\r\n          if (initArr[i].includes && initArr[i].includes(',')) {\r\n            isSafe = false;\r\n          }\r\n        }\r\n      }\r\n      this.popState('in-for-loop-init');\r\n    } else {\r\n      isSafe = false;\r\n    }\r\n\r\n    if (forNode.test) {\r\n      this.pushState('in-for-loop-test');\r\n      this.astGeneric(forNode.test, testArr);\r\n      this.popState('in-for-loop-test');\r\n    } else {\r\n      isSafe = false;\r\n    }\r\n\r\n    if (forNode.update) {\r\n      this.astGeneric(forNode.update, updateArr);\r\n    } else {\r\n      isSafe = false;\r\n    }\r\n\r\n    if (forNode.body) {\r\n      this.pushState('loop-body');\r\n      this.astGeneric(forNode.body, bodyArr);\r\n      this.popState('loop-body');\r\n    }\r\n\r\n    // have all parts, now make them safe\r\n    if (isSafe === null) {\r\n      isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\r\n    }\r\n\r\n    if (isSafe) {\r\n      retArr.push(`for (${initArr.join('')};${testArr.join('')};${updateArr.join('')}){\\n`);\r\n      retArr.push(bodyArr.join(''));\r\n      retArr.push('}\\n');\r\n    } else {\r\n      const iVariableName = this.getInternalVariableName('safeI');\r\n      if (initArr.length > 0) {\r\n        retArr.push(initArr.join(''), ';\\n');\r\n      }\r\n      retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\r\n      if (testArr.length > 0) {\r\n        retArr.push(`if (!${testArr.join('')}) break;\\n`);\r\n      }\r\n      retArr.push(bodyArr.join(''));\r\n      retArr.push(`\\n${updateArr.join('')};`);\r\n      retArr.push('}\\n');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *while* loop\r\n   * @param {Object} whileNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed webgl string\r\n   */\r\n  astWhileStatement(whileNode, retArr) {\r\n    if (whileNode.type !== 'WhileStatement') {\r\n      throw this.astErrorOutput('Invalid while statement', whileNode);\r\n    }\r\n\r\n    const iVariableName = this.getInternalVariableName('safeI');\r\n    retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\r\n    retArr.push('if (!');\r\n    this.astGeneric(whileNode.test, retArr);\r\n    retArr.push(') break;\\n');\r\n    this.astGeneric(whileNode.body, retArr);\r\n    retArr.push('}\\n');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *do while* loop\r\n   * @param {Object} doWhileNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the parsed webgl string\r\n   */\r\n  astDoWhileStatement(doWhileNode, retArr) {\r\n    if (doWhileNode.type !== 'DoWhileStatement') {\r\n      throw this.astErrorOutput('Invalid while statement', doWhileNode);\r\n    }\r\n\r\n    const iVariableName = this.getInternalVariableName('safeI');\r\n    retArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\r\n    this.astGeneric(doWhileNode.body, retArr);\r\n    retArr.push('if (!');\r\n    this.astGeneric(doWhileNode.test, retArr);\r\n    retArr.push(') break;\\n');\r\n    retArr.push('}\\n');\r\n\r\n    return retArr;\r\n  }\r\n\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Assignment* Expression\r\n   * @param {Object} assNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astAssignmentExpression(assNode, retArr) {\r\n    // TODO: casting needs implemented here\r\n    if (assNode.operator === '%=') {\r\n      this.astGeneric(assNode.left, retArr);\r\n      retArr.push('=');\r\n      retArr.push('mod(');\r\n      this.astGeneric(assNode.left, retArr);\r\n      retArr.push(',');\r\n      this.astGeneric(assNode.right, retArr);\r\n      retArr.push(')');\r\n    } else if (assNode.operator === '**=') {\r\n      this.astGeneric(assNode.left, retArr);\r\n      retArr.push('=');\r\n      retArr.push('pow(');\r\n      this.astGeneric(assNode.left, retArr);\r\n      retArr.push(',');\r\n      this.astGeneric(assNode.right, retArr);\r\n      retArr.push(')');\r\n    } else {\r\n      const leftType = this.getType(assNode.left);\r\n      const rightType = this.getType(assNode.right);\r\n      this.astGeneric(assNode.left, retArr);\r\n      retArr.push(assNode.operator);\r\n      if (leftType !== 'Integer' && rightType === 'Integer') {\r\n        retArr.push('float(');\r\n        this.astGeneric(assNode.right, retArr);\r\n        retArr.push(')');\r\n      } else {\r\n        this.astGeneric(assNode.right, retArr);\r\n      }\r\n      return retArr;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Block* statement\r\n   * @param {Object} bNode - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astBlockStatement(bNode, retArr) {\r\n    if (this.isState('loop-body')) {\r\n      this.pushState('block-body'); // this prevents recursive removal of braces\r\n      for (let i = 0; i < bNode.body.length; i++) {\r\n        this.astGeneric(bNode.body[i], retArr);\r\n      }\r\n      this.popState('block-body');\r\n    } else {\r\n      retArr.push('{\\n');\r\n      for (let i = 0; i < bNode.body.length; i++) {\r\n        this.astGeneric(bNode.body[i], retArr);\r\n      }\r\n      retArr.push('}\\n');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Variable Declaration*\r\n   * @param {Object} varDecNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astVariableDeclaration(varDecNode, retArr) {\r\n    if (varDecNode.kind === 'var' && this.warnVarUsage) {\r\n      this.varWarn();\r\n    }\r\n    const declarations = varDecNode.declarations;\r\n    if (!declarations || !declarations[0] || !declarations[0].init) {\r\n      throw this.astErrorOutput('Unexpected expression', varDecNode);\r\n    }\r\n    const result = [];\r\n    let lastType = null;\r\n    const inForLoopInit = this.isState('in-for-loop-init');\r\n    for (let i = 0; i < declarations.length; i++) {\r\n      const declaration = declarations[i];\r\n      const init = declaration.init;\r\n      const info = this.getDeclaration(declaration.id);\r\n      const valueType = info.valueType;\r\n      const actualType = this.getType(declaration.init);\r\n      let dependencies = info.dependencies;\r\n      let type = inForLoopInit ? 'Integer' : actualType;\r\n      if (type === 'LiteralInteger') {\r\n        // We had the choice to go either float or int, choosing float\r\n        type = 'Number';\r\n      }\r\n      const markupType = typeMap[type];\r\n      if (!markupType) {\r\n        throw this.astErrorOutput(`Markup type ${ markupType } not handled`, varDecNode);\r\n      }\r\n      const declarationResult = [];\r\n      if (actualType === 'Integer' && type === 'Integer' && !inForLoopInit) {\r\n        // Since we are assigning to a float, ensure valueType is reset to that\r\n        info.valueType = 'Number';\r\n        if (i === 0 || lastType === null) {\r\n          declarationResult.push('float ');\r\n        } else if (type !== lastType) {\r\n          throw new Error('Unhandled declaration');\r\n        } else {\r\n          declarationResult.push(',');\r\n        }\r\n        lastType = type;\r\n        declarationResult.push(`user_${declaration.id.name}=`);\r\n        declarationResult.push('float(');\r\n        this.astGeneric(init, declarationResult);\r\n        declarationResult.push(')');\r\n      } else {\r\n        // Since we are assigning to a float, ensure valueType is reset to that\r\n        info.valueType = type;\r\n        if (i === 0 || lastType === null) {\r\n          declarationResult.push(`${markupType} `);\r\n        } else if (type !== lastType) {\r\n          result.push(';');\r\n          declarationResult.push(`${markupType} `);\r\n        } else {\r\n          declarationResult.push(',');\r\n        }\r\n        lastType = type;\r\n        declarationResult.push(`user_${declaration.id.name}=`);\r\n        if (actualType === 'Number' && type === 'Integer') {\r\n          if (init.left && init.left.type === 'Literal') {\r\n            this.astGeneric(init, declarationResult);\r\n          } else {\r\n            declarationResult.push('int(');\r\n            this.astGeneric(init, declarationResult);\r\n            declarationResult.push(')');\r\n          }\r\n        } else {\r\n          this.astGeneric(init, declarationResult);\r\n        }\r\n      }\r\n      result.push(declarationResult.join(''));\r\n    }\r\n\r\n    retArr.push(result.join(''));\r\n    if (!inForLoopInit) {\r\n      retArr.push(';');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *If* Statement\r\n   * @param {Object} ifNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astIfStatement(ifNode, retArr) {\r\n    retArr.push('if (');\r\n    this.astGeneric(ifNode.test, retArr);\r\n    retArr.push(')');\r\n    if (ifNode.consequent.type === 'BlockStatement') {\r\n      this.astGeneric(ifNode.consequent, retArr);\r\n    } else {\r\n      retArr.push(' {\\n');\r\n      this.astGeneric(ifNode.consequent, retArr);\r\n      retArr.push('\\n}\\n');\r\n    }\r\n\r\n    if (ifNode.alternate) {\r\n      retArr.push('else ');\r\n      if (ifNode.alternate.type === 'BlockStatement') {\r\n        this.astGeneric(ifNode.alternate, retArr);\r\n      } else {\r\n        retArr.push(' {\\n');\r\n        this.astGeneric(ifNode.alternate, retArr);\r\n        retArr.push('\\n}\\n');\r\n      }\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  astSwitchStatement(ast, retArr) {\r\n    if (ast.type !== 'SwitchStatement') {\r\n      throw this.astErrorOutput('Invalid switch statement', ast);\r\n    }\r\n    const { discriminant, cases } = ast;\r\n    const type = this.getType(discriminant);\r\n    const varName = `switchDiscriminant${ast.start}_${ast.end}`;\r\n    switch (type) {\r\n      case 'Float':\r\n      case 'Number':\r\n        retArr.push(`float ${varName} = `);\r\n        this.astGeneric(discriminant, retArr);\r\n        retArr.push(';\\n');\r\n        break;\r\n      case 'Integer':\r\n        retArr.push(`int ${varName} = `);\r\n        this.astGeneric(discriminant, retArr);\r\n        retArr.push(';\\n');\r\n        break;\r\n    }\r\n    // switch with just a default:\r\n    if (cases.length === 1 && !cases[0].test) {\r\n      this.astGeneric(cases[0].consequent, retArr);\r\n      return retArr;\r\n    }\r\n\r\n    // regular switches:\r\n    let fallingThrough = false;\r\n    let defaultResult = [];\r\n    let movingDefaultToEnd = false;\r\n    let pastFirstIf = false;\r\n    for (let i = 0; i < cases.length; i++) {\r\n      // default\r\n      if (!cases[i].test) {\r\n        if (cases.length > i + 1) {\r\n          movingDefaultToEnd = true;\r\n          this.astGeneric(cases[i].consequent, defaultResult);\r\n          continue;\r\n        } else {\r\n          retArr.push(' else {\\n');\r\n        }\r\n      } else {\r\n        // all others\r\n        if (i === 0 || !pastFirstIf) {\r\n          pastFirstIf = true;\r\n          retArr.push(`if (${varName} == `);\r\n        } else {\r\n          if (fallingThrough) {\r\n            retArr.push(`${varName} == `);\r\n            fallingThrough = false;\r\n          } else {\r\n            retArr.push(` else if (${varName} == `);\r\n          }\r\n        }\r\n        if (type === 'Integer') {\r\n          const testType = this.getType(cases[i].test);\r\n          switch (testType) {\r\n            case 'Number':\r\n            case 'Float':\r\n              this.castValueToInteger(cases[i].test, retArr);\r\n              break;\r\n            case 'LiteralInteger':\r\n              this.castLiteralToInteger(cases[i].test, retArr);\r\n              break;\r\n          }\r\n        } else if (type === 'Float') {\r\n          const testType = this.getType(cases[i].test);\r\n          switch (testType) {\r\n            case 'LiteralInteger':\r\n              this.castLiteralToFloat(cases[i].test, retArr);\r\n              break;\r\n            case 'Integer':\r\n              this.castValueToFloat(cases[i].test, retArr);\r\n              break;\r\n          }\r\n        } else {\r\n          throw new Error('unhanlded');\r\n        }\r\n        if (!cases[i].consequent || cases[i].consequent.length === 0) {\r\n          fallingThrough = true;\r\n          retArr.push(' || ');\r\n          continue;\r\n        }\r\n        retArr.push(`) {\\n`);\r\n      }\r\n      this.astGeneric(cases[i].consequent, retArr);\r\n      retArr.push('\\n}');\r\n    }\r\n    if (movingDefaultToEnd) {\r\n      retArr.push(' else {');\r\n      retArr.push(defaultResult.join(''));\r\n      retArr.push('}');\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *This* expression\r\n   * @param {Object} tNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astThisExpression(tNode, retArr) {\r\n    retArr.push('this');\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Member* Expression\r\n   * @param {Object} mNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astMemberExpression(mNode, retArr) {\r\n    const {\r\n      property,\r\n      name,\r\n      signature,\r\n      origin,\r\n      type,\r\n      xProperty,\r\n      yProperty,\r\n      zProperty\r\n    } = this.getMemberExpressionDetails(mNode);\r\n    switch (signature) {\r\n      case 'value.thread.value':\r\n      case 'this.thread.value':\r\n        if (name !== 'x' && name !== 'y' && name !== 'z') {\r\n          throw this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);\r\n        }\r\n        retArr.push(`threadId.${name}`);\r\n        return retArr;\r\n      case 'this.output.value':\r\n        if (this.dynamicOutput) {\r\n          switch (name) {\r\n            case 'x':\r\n              if (this.isState('casting-to-float')) {\r\n                retArr.push('float(uOutputDim.x)');\r\n              } else {\r\n                retArr.push('uOutputDim.x');\r\n              }\r\n              break;\r\n            case 'y':\r\n              if (this.isState('casting-to-float')) {\r\n                retArr.push('float(uOutputDim.y)');\r\n              } else {\r\n                retArr.push('uOutputDim.y');\r\n              }\r\n              break;\r\n            case 'z':\r\n              if (this.isState('casting-to-float')) {\r\n                retArr.push('float(uOutputDim.z)');\r\n              } else {\r\n                retArr.push('uOutputDim.z');\r\n              }\r\n              break;\r\n            default:\r\n              throw this.astErrorOutput('Unexpected expression', mNode);\r\n          }\r\n        } else {\r\n          switch (name) {\r\n            case 'x':\r\n              if (this.isState('casting-to-integer')) {\r\n                retArr.push(this.output[0]);\r\n              } else {\r\n                retArr.push(this.output[0], '.0');\r\n              }\r\n              break;\r\n            case 'y':\r\n              if (this.isState('casting-to-integer')) {\r\n                retArr.push(this.output[1]);\r\n              } else {\r\n                retArr.push(this.output[1], '.0');\r\n              }\r\n              break;\r\n            case 'z':\r\n              if (this.isState('casting-to-integer')) {\r\n                retArr.push(this.output[2]);\r\n              } else {\r\n                retArr.push(this.output[2], '.0');\r\n              }\r\n              break;\r\n            default:\r\n              throw this.astErrorOutput('Unexpected expression', mNode);\r\n          }\r\n        }\r\n        return retArr;\r\n      case 'value':\r\n        throw this.astErrorOutput('Unexpected expression', mNode);\r\n      case 'value[]':\r\n      case 'value[][]':\r\n      case 'value[][][]':\r\n      case 'value[][][][]':\r\n      case 'value.value':\r\n        if (origin === 'Math') {\r\n          retArr.push(Math[name]);\r\n          return retArr;\r\n        }\r\n        switch (property) {\r\n          case 'r':\r\n            retArr.push(`user_${ name }.r`);\r\n            return retArr;\r\n          case 'g':\r\n            retArr.push(`user_${ name }.g`);\r\n            return retArr;\r\n          case 'b':\r\n            retArr.push(`user_${ name }.b`);\r\n            return retArr;\r\n          case 'a':\r\n            retArr.push(`user_${ name }.a`);\r\n            return retArr;\r\n        }\r\n        break;\r\n      case 'this.constants.value':\r\n        if (typeof xProperty === 'undefined') {\r\n          switch (type) {\r\n            case 'Array(2)':\r\n            case 'Array(3)':\r\n            case 'Array(4)':\r\n              retArr.push(`constants_${ name }`);\r\n              return retArr;\r\n          }\r\n        }\r\n        case 'this.constants.value[]':\r\n        case 'this.constants.value[][]':\r\n        case 'this.constants.value[][][]':\r\n        case 'this.constants.value[][][][]':\r\n          break;\r\n        case 'fn()[]':\r\n          this.astCallExpression(mNode.object, retArr);\r\n          retArr.push('[');\r\n          retArr.push(this.memberExpressionPropertyMarkup(property));\r\n          retArr.push(']');\r\n          return retArr;\r\n        case '[][]':\r\n          this.astArrayExpression(mNode.object, retArr);\r\n          retArr.push('[');\r\n          retArr.push(this.memberExpressionPropertyMarkup(property));\r\n          retArr.push(']');\r\n          return retArr;\r\n        default:\r\n          throw this.astErrorOutput('Unexpected expression', mNode);\r\n    }\r\n\r\n    if (mNode.computed === false) {\r\n      // handle simple types\r\n      switch (type) {\r\n        case 'Number':\r\n        case 'Integer':\r\n        case 'Float':\r\n        case 'Boolean':\r\n          retArr.push(`${origin}_${name}`);\r\n          return retArr;\r\n      }\r\n    }\r\n\r\n    // handle more complex types\r\n    // argument may have come from a parent\r\n    const markupName = `${origin}_${name}`;\r\n\r\n    switch (type) {\r\n      case 'Array(2)':\r\n      case 'Array(3)':\r\n      case 'Array(4)':\r\n        // Get from local vec4\r\n        this.astGeneric(mNode.object, retArr);\r\n        retArr.push('[');\r\n        retArr.push(this.memberExpressionPropertyMarkup(xProperty));\r\n        retArr.push(']');\r\n        break;\r\n      case 'HTMLImageArray':\r\n        retArr.push(`getImage3D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'ArrayTexture(1)':\r\n        retArr.push(`getFloatFromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'Array1D(2)':\r\n      case 'Array2D(2)':\r\n      case 'Array3D(2)':\r\n        retArr.push(`getMemoryOptimizedVec2(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'ArrayTexture(2)':\r\n        retArr.push(`getVec2FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'Array1D(3)':\r\n      case 'Array2D(3)':\r\n      case 'Array3D(3)':\r\n        retArr.push(`getMemoryOptimizedVec3(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'ArrayTexture(3)':\r\n        retArr.push(`getVec3FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'Array1D(4)':\r\n      case 'Array2D(4)':\r\n      case 'Array3D(4)':\r\n        retArr.push(`getMemoryOptimizedVec4(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'ArrayTexture(4)':\r\n      case 'HTMLImage':\r\n      case 'HTMLVideo':\r\n        retArr.push(`getVec4FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      case 'NumberTexture':\r\n      case 'Array':\r\n      case 'Array2D':\r\n      case 'Array3D':\r\n      case 'Array4D':\r\n      case 'Input':\r\n      case 'Number':\r\n      case 'Float':\r\n      case 'Integer':\r\n        if (this.precision === 'single') {\r\n          // bitRatio is always 4 here, javascript doesn't yet have 8 or 16 bit support\r\n          // TODO: make 8 or 16 bit work anyway!\r\n          retArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\r\n          this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n          retArr.push(')');\r\n        } else {\r\n          const bitRatio = (origin === 'user' ?\r\n            this.lookupFunctionArgumentBitRatio(this.name, name) :\r\n            this.constantBitRatios[name]\r\n          );\r\n          switch (bitRatio) {\r\n            case 1:\r\n              retArr.push(`get8(${markupName}, ${markupName}Size, ${markupName}Dim, `);\r\n              break;\r\n            case 2:\r\n              retArr.push(`get16(${markupName}, ${markupName}Size, ${markupName}Dim, `);\r\n              break;\r\n            case 4:\r\n            case 0:\r\n              retArr.push(`get32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\r\n              break;\r\n            default:\r\n              throw new Error(`unhandled bit ratio of ${bitRatio}`);\r\n          }\r\n          this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n          retArr.push(')');\r\n        }\r\n        break;\r\n      case 'MemoryOptimizedNumberTexture':\r\n        retArr.push(`getMemoryOptimized32(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\r\n        this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\r\n        retArr.push(')');\r\n        break;\r\n      default:\r\n        throw new Error(`unhandled member expression \"${ type }\"`);\r\n    }\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *call* expression\r\n   * @param {Object} ast - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns  {Array} the append retArr\r\n   */\r\n  astCallExpression(ast, retArr) {\r\n    if (!ast.callee) {\r\n      throw this.astErrorOutput('Unknown CallExpression', ast);\r\n    }\r\n\r\n    let functionName = null;\r\n    const isMathFunction = this.isAstMathFunction(ast);\r\n\r\n    // Its a math operator or this.something(), remove the prefix\r\n    if (isMathFunction || (ast.callee.object && ast.callee.object.type === 'ThisExpression')) {\r\n      functionName = ast.callee.property.name;\r\n    }\r\n    // Issue #212, BABEL!\r\n    else if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[0].type === 'Literal' && !isNaN(ast.callee.expressions[0].raw)) {\r\n      functionName = ast.callee.expressions[1].property.name;\r\n    } else {\r\n      functionName = ast.callee.name;\r\n    }\r\n\r\n    if (!functionName) {\r\n      throw this.astErrorOutput(`Unhandled function, couldn't find name`, ast);\r\n    }\r\n\r\n    // if this if grows to more than one, lets use a switch\r\n    if (functionName === 'atan2') {\r\n      functionName = 'atan';\r\n    }\r\n\r\n    // Register the function into the called registry\r\n    if (this.calledFunctions.indexOf(functionName) < 0) {\r\n      this.calledFunctions.push(functionName);\r\n    }\r\n\r\n    if (functionName === 'random' && this.plugins && this.plugins.length > 0) {\r\n      for (let i = 0; i < this.plugins.length; i++) {\r\n        const plugin = this.plugins[i];\r\n        if (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {\r\n          retArr.push(plugin.functionReplace);\r\n          return retArr;\r\n        }\r\n      }\r\n    }\r\n\r\n    // track the function was called\r\n    if (this.onFunctionCall) {\r\n      this.onFunctionCall(this.name, functionName, ast.arguments);\r\n    }\r\n\r\n    // Call the function\r\n    retArr.push(functionName);\r\n\r\n    // Open arguments space\r\n    retArr.push('(');\r\n\r\n    // Add the arguments\r\n    if (isMathFunction) {\r\n      for (let i = 0; i < ast.arguments.length; ++i) {\r\n        const argument = ast.arguments[i];\r\n        const argumentType = this.getType(argument);\r\n        if (i > 0) {\r\n          retArr.push(', ');\r\n        }\r\n\r\n        switch (argumentType) {\r\n          case 'Integer':\r\n            this.castValueToFloat(argument, retArr);\r\n            break;\r\n          default:\r\n            this.astGeneric(argument, retArr);\r\n            break;\r\n        }\r\n      }\r\n    } else {\r\n      const targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\r\n      for (let i = 0; i < ast.arguments.length; ++i) {\r\n        const argument = ast.arguments[i];\r\n        let targetType = targetTypes[i];\r\n        if (i > 0) {\r\n          retArr.push(', ');\r\n        }\r\n        const argumentType = this.getType(argument);\r\n        if (!targetType) {\r\n          this.triggerImplyArgumentType(functionName, i, argumentType, this);\r\n          targetType = argumentType;\r\n        }\r\n        switch (argumentType) {\r\n          case 'Number':\r\n          case 'Float':\r\n            if (targetType === 'Integer') {\r\n              retArr.push('int(');\r\n              this.astGeneric(argument, retArr);\r\n              retArr.push(')');\r\n              continue;\r\n            } else if (targetType === 'Number' || targetType === 'Float') {\r\n              this.astGeneric(argument, retArr);\r\n              continue;\r\n            } else if (targetType === 'LiteralInteger') {\r\n              this.castLiteralToFloat(argument, retArr);\r\n              continue;\r\n            }\r\n            break;\r\n          case 'Integer':\r\n            if (targetType === 'Number' || targetType === 'Float') {\r\n              retArr.push('float(');\r\n              this.astGeneric(argument, retArr);\r\n              retArr.push(')');\r\n              continue;\r\n            } else if (targetType === 'Integer') {\r\n              this.astGeneric(argument, retArr);\r\n              continue;\r\n            }\r\n            break;\r\n          case 'LiteralInteger':\r\n            if (targetType === 'Integer') {\r\n              this.castLiteralToInteger(argument, retArr);\r\n              continue;\r\n            } else if (targetType === 'Number' || targetType === 'Float') {\r\n              this.castLiteralToFloat(argument, retArr);\r\n              continue;\r\n            } else if (targetType === 'LiteralInteger') {\r\n              this.astGeneric(argument, retArr);\r\n              continue;\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n          case 'Array(3)':\r\n          case 'Array(4)':\r\n            if (targetType === argumentType) {\r\n              if (argument.type !== 'Identifier') throw this.astErrorOutput(`Unhandled argument type ${ argument.type }`, ast);\r\n              this.triggerImplyArgumentBitRatio(this.name, argument.name, functionName, i);\r\n              retArr.push(`user_${argument.name}`);\r\n              continue;\r\n            }\r\n            break;\r\n          case 'HTMLImage':\r\n          case 'HTMLImageArray':\r\n          case 'HTMLVideo':\r\n          case 'ArrayTexture(1)':\r\n          case 'ArrayTexture(2)':\r\n          case 'ArrayTexture(3)':\r\n          case 'ArrayTexture(4)':\r\n          case 'Array':\r\n          case 'Input':\r\n            if (targetType === argumentType) {\r\n              if (argument.type !== 'Identifier') throw this.astErrorOutput(`Unhandled argument type ${ argument.type }`, ast);\r\n              this.triggerImplyArgumentBitRatio(this.name, argument.name, functionName, i);\r\n              retArr.push(`user_${argument.name},user_${argument.name}Size,user_${argument.name}Dim`);\r\n              continue;\r\n            }\r\n            break;\r\n        }\r\n        throw this.astErrorOutput(`Unhandled argument combination of ${ argumentType } and ${ targetType } for argument named \"${ argument.name }\"`, ast);\r\n      }\r\n    }\r\n    // Close arguments space\r\n    retArr.push(')');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *Array* Expression\r\n   * @param {Object} arrNode - the AST object to parse\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astArrayExpression(arrNode, retArr) {\r\n    const arrLen = arrNode.elements.length;\r\n\r\n    retArr.push('vec' + arrLen + '(');\r\n    for (let i = 0; i < arrLen; ++i) {\r\n      if (i > 0) {\r\n        retArr.push(', ');\r\n      }\r\n      const subNode = arrNode.elements[i];\r\n      this.astGeneric(subNode, retArr)\r\n    }\r\n    retArr.push(')');\r\n\r\n    return retArr;\r\n  }\r\n\r\n  memberExpressionXYZ(x, y, z, retArr) {\r\n    if (z) {\r\n      retArr.push(this.memberExpressionPropertyMarkup(z), ', ');\r\n    } else {\r\n      retArr.push('0, ');\r\n    }\r\n    if (y) {\r\n      retArr.push(this.memberExpressionPropertyMarkup(y), ', ');\r\n    } else {\r\n      retArr.push('0, ');\r\n    }\r\n    retArr.push(this.memberExpressionPropertyMarkup(x));\r\n    return retArr;\r\n  }\r\n\r\n  memberExpressionPropertyMarkup(property) {\r\n    if (!property) {\r\n      throw new Error('Property not set');\r\n    }\r\n    const type = this.getType(property);\r\n    const result = [];\r\n    switch (type) {\r\n      case 'Number':\r\n      case 'Float':\r\n        this.castValueToInteger(property, result);\r\n        break;\r\n      case 'LiteralInteger':\r\n        this.castLiteralToInteger(property, result);\r\n        break;\r\n      default:\r\n        this.astGeneric(property, result);\r\n    }\r\n    return result.join('');\r\n  }\r\n}\r\n\r\nconst typeMap = {\r\n  'Array': 'sampler2D',\r\n  'Array(2)': 'vec2',\r\n  'Array(3)': 'vec3',\r\n  'Array(4)': 'vec4',\r\n  'Array2D': 'sampler2D',\r\n  'Array3D': 'sampler2D',\r\n  'Boolean': 'bool',\r\n  'Float': 'float',\r\n  'Input': 'sampler2D',\r\n  'Integer': 'int',\r\n  'Number': 'float',\r\n  'LiteralInteger': 'float',\r\n  'NumberTexture': 'sampler2D',\r\n  'MemoryOptimizedNumberTexture': 'sampler2D',\r\n  'ArrayTexture(1)': 'sampler2D',\r\n  'ArrayTexture(2)': 'sampler2D',\r\n  'ArrayTexture(3)': 'sampler2D',\r\n  'ArrayTexture(4)': 'sampler2D',\r\n  'HTMLVideo': 'sampler2D',\r\n  'HTMLImage': 'sampler2D',\r\n  'HTMLImageArray': 'sampler2DArray',\r\n};\r\n\r\nconst operatorMap = {\r\n  '===': '==',\r\n  '!==': '!='\r\n};\r\n","const source = `\r\n\r\nuniform highp float triangle_noise_seed;\r\nhighp float triangle_noise_shift = 0.000001;\r\n\r\n//https://www.shadertoy.com/view/4t2SDh\r\n//note: uniformly distributed, normalized rand, [0;1[\r\nfloat nrand( vec2 n )\r\n{\r\n  return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\r\n}\r\n//note: remaps v to [0;1] in interval [a;b]\r\nfloat remap( float a, float b, float v )\r\n{\r\n  return clamp( (v-a) / (b-a), 0.0, 1.0 );\r\n}\r\n\r\nfloat n4rand( vec2 n )\r\n{\r\n  float t = fract( triangle_noise_seed + triangle_noise_shift );\r\n  float nrnd0 = nrand( n + 0.07*t );\r\n  float nrnd1 = nrand( n + 0.11*t );\r\n  float nrnd2 = nrand( n + 0.13*t );\r\n  float nrnd3 = nrand( n + 0.17*t );\r\n  float result = (nrnd0+nrnd1+nrnd2+nrnd3) / 4.0;\r\n  triangle_noise_shift = result + 0.000001;\r\n  return result;\r\n}`;\r\n\r\nconst name = 'triangle-noise-noise';\r\n\r\nconst functionMatch = 'Math.random()';\r\n\r\nconst functionReplace = 'n4rand(vTexCoord)';\r\n\r\nconst functionReturnType = 'Number';\r\n\r\nconst onBeforeRun = (kernel) => {\r\n  kernel.setUniform1f('triangle_noise_seed', Math.random());\r\n};\r\n\r\n/**\r\n * @type IPlugin\r\n */\r\nexport default {\r\n  name,\r\n  onBeforeRun,\r\n  functionMatch,\r\n  functionReplace,\r\n  functionReturnType,\r\n  source\r\n};\r\n","// language=GLSL\r\nexport const fragmentShader = `__HEADER__;\r\n__FLOAT_TACTIC_DECLARATION__;\r\n__INT_TACTIC_DECLARATION__;\r\n__SAMPLER_2D_TACTIC_DECLARATION__;\r\n\r\nconst int LOOP_MAX = __LOOP_MAX__;\r\n\r\n__PLUGINS__;\r\n__CONSTANTS__;\r\n\r\nvarying vec2 vTexCoord;\r\n\r\nvec4 round(vec4 x) {\r\n  return floor(x + 0.5);\r\n}\r\n\r\nfloat round(float x) {\r\n  return floor(x + 0.5);\r\n}\r\n\r\nconst int BIT_COUNT = 32;\r\nint modi(int x, int y) {\r\n  return x - y * (x / y);\r\n}\r\n\r\nint bitwiseOr(int a, int b) {\r\n  int result = 0;\r\n  int n = 1;\r\n\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    b = b / 2;\r\n    n = n * 2;\r\n    if(!(a > 0 || b > 0)) {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nint bitwiseXOR(int a, int b) {\r\n  int result = 0;\r\n  int n = 1;\r\n\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    b = b / 2;\r\n    n = n * 2;\r\n    if(!(a > 0 || b > 0)) {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nint bitwiseAnd(int a, int b) {\r\n  int result = 0;\r\n  int n = 1;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    b = b / 2;\r\n    n = n * 2;\r\n    if(!(a > 0 && b > 0)) {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nint bitwiseNot(int a) {\r\n  int result = 0;\r\n  int n = 1;\r\n\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (modi(a, 2) == 0) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    n = n * 2;\r\n  }\r\n  return result;\r\n}\r\nint bitwiseZeroFillLeftShift(int n, int shift) {\r\n  int maxBytes = BIT_COUNT;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (maxBytes >= n) {\r\n      break;\r\n    }\r\n    maxBytes *= 2;\r\n  }\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= shift) {\r\n      break;\r\n    }\r\n    n *= 2;\r\n  }\r\n\r\n  int result = 0;\r\n  int byteVal = 1;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= maxBytes) break;\r\n    if (modi(n, 2) > 0) { result += byteVal; }\r\n    n = int(n / 2);\r\n    byteVal *= 2;\r\n  }\r\n  return result;\r\n}\r\n\r\nint bitwiseSignedRightShift(int num, int shifts) {\r\n  return int(floor(float(num) / pow(2.0, float(shifts))));\r\n}\r\n\r\nint bitwiseZeroFillRightShift(int n, int shift) {\r\n  int maxBytes = BIT_COUNT;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (maxBytes >= n) {\r\n      break;\r\n    }\r\n    maxBytes *= 2;\r\n  }\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= shift) {\r\n      break;\r\n    }\r\n    n /= 2;\r\n  }\r\n  int result = 0;\r\n  int byteVal = 1;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= maxBytes) break;\r\n    if (modi(n, 2) > 0) { result += byteVal; }\r\n    n = int(n / 2);\r\n    byteVal *= 2;\r\n  }\r\n  return result;\r\n}\r\n\r\nvec2 integerMod(vec2 x, float y) {\r\n  vec2 res = floor(mod(x, y));\r\n  return res * step(1.0 - floor(y), -res);\r\n}\r\n\r\nvec3 integerMod(vec3 x, float y) {\r\n  vec3 res = floor(mod(x, y));\r\n  return res * step(1.0 - floor(y), -res);\r\n}\r\n\r\nvec4 integerMod(vec4 x, vec4 y) {\r\n  vec4 res = floor(mod(x, y));\r\n  return res * step(1.0 - floor(y), -res);\r\n}\r\n\r\nfloat integerMod(float x, float y) {\r\n  float res = floor(mod(x, y));\r\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\r\n}\r\n\r\nint integerMod(int x, int y) {\r\n  return x - (y * int(x / y));\r\n}\r\n\r\n__DIVIDE_WITH_INTEGER_CHECK__;\r\n\r\n// Here be dragons!\r\n// DO NOT OPTIMIZE THIS CODE\r\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\r\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\r\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\r\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\r\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\r\nfloat decode32(vec4 texel) {\r\n  __DECODE32_ENDIANNESS__;\r\n  texel *= 255.0;\r\n  vec2 gte128;\r\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\r\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\r\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\r\n  float res = exp2(round(exponent));\r\n  texel.b = texel.b - 128.0 * gte128.x;\r\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\r\n  res *= gte128.y * -2.0 + 1.0;\r\n  return res;\r\n}\r\n\r\nfloat decode16(vec4 texel, int index) {\r\n  int channel = integerMod(index, 2);\r\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\r\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\r\n  return 0.0;\r\n}\r\n\r\nfloat decode8(vec4 texel, int index) {\r\n  int channel = integerMod(index, 4);\r\n  if (channel == 0) return texel.r * 255.0;\r\n  if (channel == 1) return texel.g * 255.0;\r\n  if (channel == 2) return texel.b * 255.0;\r\n  if (channel == 3) return texel.a * 255.0;\r\n  return 0.0;\r\n}\r\n\r\nvec4 legacyEncode32(float f) {\r\n  float F = abs(f);\r\n  float sign = f < 0.0 ? 1.0 : 0.0;\r\n  float exponent = floor(log2(F));\r\n  float mantissa = (exp2(-exponent) * F);\r\n  // exponent += floor(log2(mantissa));\r\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\r\n  texel.rg = integerMod(texel.rg, 256.0);\r\n  texel.b = integerMod(texel.b, 128.0);\r\n  texel.a = exponent*0.5 + 63.5;\r\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\r\n  texel = floor(texel);\r\n  texel *= 0.003921569; // 1/255\r\n  __ENCODE32_ENDIANNESS__;\r\n  return texel;\r\n}\r\n\r\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\r\nvec4 encode32(float value) {\r\n  if (value == 0.0) return vec4(0, 0, 0, 0);\r\n\r\n  float exponent;\r\n  float mantissa;\r\n  vec4  result;\r\n  float sgn;\r\n\r\n  sgn = step(0.0, -value);\r\n  value = abs(value);\r\n\r\n  exponent = floor(log2(value));\r\n\r\n  mantissa = value*pow(2.0, -exponent)-1.0;\r\n  exponent = exponent+127.0;\r\n  result   = vec4(0,0,0,0);\r\n\r\n  result.a = floor(exponent/2.0);\r\n  exponent = exponent - result.a*2.0;\r\n  result.a = result.a + 128.0*sgn;\r\n\r\n  result.b = floor(mantissa * 128.0);\r\n  mantissa = mantissa - result.b / 128.0;\r\n  result.b = result.b + exponent*128.0;\r\n\r\n  result.g = floor(mantissa*32768.0);\r\n  mantissa = mantissa - result.g/32768.0;\r\n\r\n  result.r = floor(mantissa*8388608.0);\r\n  return result/255.0;\r\n}\r\n// Dragons end here\r\n\r\nint index;\r\nivec3 threadId;\r\n\r\nivec3 indexTo3D(int idx, ivec3 texDim) {\r\n  int z = int(idx / (texDim.x * texDim.y));\r\n  idx -= z * int(texDim.x * texDim.y);\r\n  int y = int(idx / texDim.x);\r\n  int x = int(integerMod(idx, texDim.x));\r\n  return ivec3(x, y, z);\r\n}\r\n\r\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture2D(tex, st / vec2(texSize));\r\n  return decode32(texel);\r\n}\r\n\r\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x * 2;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\r\n  return decode16(texel, index);\r\n}\r\n\r\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x * 4;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\r\n  return decode8(texel, index);\r\n}\r\n\r\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int channel = integerMod(index, 4);\r\n  index = index / 4;\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture2D(tex, st / vec2(texSize));\r\n  if (channel == 0) return texel.r;\r\n  if (channel == 1) return texel.g;\r\n  if (channel == 2) return texel.b;\r\n  if (channel == 3) return texel.a;\r\n  return 0.0;\r\n}\r\n\r\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  return texture2D(tex, st / vec2(texSize));\r\n}\r\n\r\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\r\n  return result[0];\r\n}\r\n\r\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\r\n  return vec2(result[0], result[1]);\r\n}\r\n\r\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + (texDim.x * (y + (texDim.y * z)));\r\n  int channel = integerMod(index, 2);\r\n  index = index / 2;\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture2D(tex, st / vec2(texSize));\r\n  if (channel == 0) return vec2(texel.r, texel.g);\r\n  if (channel == 1) return vec2(texel.b, texel.a);\r\n  return vec2(0.0, 0.0);\r\n}\r\n\r\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\r\n  return vec3(result[0], result[1], result[2]);\r\n}\r\n\r\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\r\n  int vectorIndex = fieldIndex / 4;\r\n  int vectorOffset = fieldIndex - vectorIndex * 4;\r\n  int readY = vectorIndex / texSize.x;\r\n  int readX = vectorIndex - readY * texSize.x;\r\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\r\n\r\n  if (vectorOffset == 0) {\r\n    return tex1.xyz;\r\n  } else if (vectorOffset == 1) {\r\n    return tex1.yzw;\r\n  } else {\r\n    readX++;\r\n    if (readX >= texSize.x) {\r\n      readX = 0;\r\n      readY++;\r\n    }\r\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\r\n    if (vectorOffset == 2) {\r\n      return vec3(tex1.z, tex1.w, tex2.x);\r\n    } else {\r\n      return vec3(tex1.w, tex2.x, tex2.y);\r\n    }\r\n  }\r\n}\r\n\r\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  return getImage2D(tex, texSize, texDim, z, y, x);\r\n}\r\n\r\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int channel = integerMod(index, 2);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture2D(tex, st / vec2(texSize));\r\n  return vec4(texel.r, texel.g, texel.b, texel.a);\r\n}\r\n\r\nvec4 actualColor;\r\nvoid color(float r, float g, float b, float a) {\r\n  actualColor = vec4(r,g,b,a);\r\n}\r\n\r\nvoid color(float r, float g, float b) {\r\n  color(r,g,b,1.0);\r\n}\r\n\r\nvoid color(sampler2D image) {\r\n  actualColor = texture2D(image, vTexCoord);\r\n}\r\n\r\n__INJECTED_NATIVE__;\r\n__MAIN_CONSTANTS__;\r\n__MAIN_ARGUMENTS__;\r\n__KERNEL__;\r\n\r\nvoid main(void) {\r\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\r\n  __MAIN_RESULT__;\r\n}`;\r\n","// language=GLSL\r\nexport const vertexShader = `__FLOAT_TACTIC_DECLARATION__;\r\n__INT_TACTIC_DECLARATION__;\r\n__SAMPLER_2D_TACTIC_DECLARATION__;\r\n\r\nattribute vec2 aPos;\r\nattribute vec2 aTexCoord;\r\n\r\nvarying vec2 vTexCoord;\r\nuniform vec2 ratio;\r\n\r\nvoid main(void) {\r\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\r\n  vTexCoord = aTexCoord;\r\n}`;\r\n","/**\n *\n * @param {WebGLRenderingContext} gl\n * @param {IGLWiretapOptions} [options]\n * @returns {GLWiretapProxy}\n */\nfunction glWiretap(gl, options = {}) {\n  const {\n    contextName = 'gl',\n    throwGetError,\n    useTrackablePrimitives,\n    readPixelsFile,\n    recording = [],\n    variables = {},\n    onReadPixels,\n    onUnrecognizedArgumentLookup,\n  } = options;\n  const proxy = new Proxy(gl, { get: listen });\n  const contextVariables = [];\n  const entityNames = {};\n  let imageCount = 0;\n  let indent = '';\n  let readPixelsVariableName;\n  return proxy;\n  function listen(obj, property) {\n    switch (property) {\n      case 'addComment': return addComment;\n      case 'checkThrowError': return checkThrowError;\n      case 'getReadPixelsVariableName': return readPixelsVariableName;\n      case 'insertVariable': return insertVariable;\n      case 'reset': return reset;\n      case 'setIndent': return setIndent;\n      case 'toString': return toString;\n      case 'getContextVariableName': return getContextVariableName;\n    }\n    if (typeof gl[property] === 'function') {\n      return function() { // need arguments from this, fyi\n        switch (property) {\n          case 'getError':\n            if (throwGetError) {\n              recording.push(`${indent}if (${contextName}.getError() !== ${contextName}.NONE) throw new Error('error');`);\n            } else {\n              recording.push(`${indent}${contextName}.getError();`); // flush out errors\n            }\n            return gl.getError();\n          case 'getExtension': {\n            const variableName = `${contextName}Variables${contextVariables.length}`;\n            recording.push(`${indent}const ${variableName} = ${contextName}.getExtension('${arguments[0]}');`);\n            const extension = gl.getExtension(arguments[0]);\n            if (extension && typeof extension === 'object') {\n              const tappedExtension = glExtensionWiretap(extension, {\n                getEntity,\n                useTrackablePrimitives,\n                recording,\n                contextName: variableName,\n                contextVariables,\n                variables,\n                indent,\n                onUnrecognizedArgumentLookup,\n              });\n              contextVariables.push(tappedExtension);\n              return tappedExtension;\n            } else {\n              contextVariables.push(null);\n            }\n            return extension;\n          }\n          case 'readPixels':\n            const i = contextVariables.indexOf(arguments[6]);\n            let targetVariableName;\n            if (i === -1) {\n              const variableName = getVariableName(arguments[6]);\n              if (variableName) {\n                targetVariableName = variableName;\n                recording.push(`${indent}${variableName}`);\n              } else {\n                targetVariableName = `${contextName}Variable${contextVariables.length}`;\n                contextVariables.push(arguments[6]);\n                recording.push(`${indent}const ${targetVariableName} = new ${arguments[6].constructor.name}(${arguments[6].length});`);\n              }\n            } else {\n              targetVariableName = `${contextName}Variable${i}`;\n            }\n            readPixelsVariableName = targetVariableName;\n            const argumentAsStrings = [\n              arguments[0],\n              arguments[1],\n              arguments[2],\n              arguments[3],\n              getEntity(arguments[4]),\n              getEntity(arguments[5]),\n              targetVariableName\n            ];\n            recording.push(`${indent}${contextName}.readPixels(${argumentAsStrings.join(', ')});`);\n            if (readPixelsFile) {\n              writePPM(arguments[2], arguments[3]);\n            }\n            if (onReadPixels) {\n              onReadPixels(targetVariableName, argumentAsStrings);\n            }\n            return gl.readPixels.apply(gl, arguments);\n          case 'drawBuffers':\n            recording.push(`${indent}${contextName}.drawBuffers([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup } )}]);`);\n            return gl.drawBuffers(arguments[0]);\n        }\n        let result = gl[property].apply(gl, arguments);\n        switch (typeof result) {\n          case 'undefined':\n            recording.push(`${indent}${methodCallToString(property, arguments)};`);\n            return;\n          case 'number':\n          case 'boolean':\n            if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result = trackablePrimitive(result));\n              break;\n            }\n          default:\n            if (result === null) {\n              recording.push(`${methodCallToString(property, arguments)};`);\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n            }\n\n            contextVariables.push(result);\n        }\n        return result;\n      }\n    }\n    entityNames[gl[property]] = property;\n    return gl[property];\n  }\n  function toString() {\n    return recording.join('\\n');\n  }\n  function reset() {\n    while (recording.length > 0) {\n      recording.pop();\n    }\n  }\n  function insertVariable(name, value) {\n    variables[name] = value;\n  }\n  function getEntity(value) {\n    const name = entityNames[value];\n    if (name) {\n      return contextName + '.' + name;\n    }\n    return value;\n  }\n  function setIndent(spaces) {\n    indent = ' '.repeat(spaces);\n  }\n  function addVariable(value, source) {\n    const variableName = `${contextName}Variable${contextVariables.length}`;\n    recording.push(`${indent}const ${variableName} = ${source};`);\n    contextVariables.push(value);\n    return variableName;\n  }\n  function writePPM(width, height) {\n    const sourceVariable = `${contextName}Variable${contextVariables.length}`;\n    const imageVariable = `imageDatum${imageCount}`;\n    recording.push(`${indent}let ${imageVariable} = [\"P3\\\\n# ${readPixelsFile}.ppm\\\\n\", ${width}, ' ', ${height}, \"\\\\n255\\\\n\"].join(\"\");`);\n    recording.push(`${indent}for (let i = 0; i < ${imageVariable}.length; i += 4) {`);\n    recording.push(`${indent}  ${imageVariable} += ${sourceVariable}[i] + ' ' + ${sourceVariable}[i + 1] + ' ' + ${sourceVariable}[i + 2] + ' ';`);\n    recording.push(`${indent}}`);\n    recording.push(`${indent}if (typeof require !== \"undefined\") {`);\n    recording.push(`${indent}  require('fs').writeFileSync('./${readPixelsFile}.ppm', ${imageVariable});`);\n    recording.push(`${indent}}`);\n    imageCount++;\n  }\n  function addComment(value) {\n    recording.push(`${indent}// ${value}`);\n  }\n  function checkThrowError() {\n    recording.push(`${indent}(() => {\n${indent}const error = ${contextName}.getError();\n${indent}if (error !== ${contextName}.NONE) {\n${indent}  const names = Object.getOwnPropertyNames(gl);\n${indent}  for (let i = 0; i < names.length; i++) {\n${indent}    const name = names[i];\n${indent}    if (${contextName}[name] === error) {\n${indent}      throw new Error('${contextName} threw ' + name);\n${indent}    }\n${indent}  }\n${indent}}\n${indent}})();`);\n  }\n  function methodCallToString(method, args) {\n    return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;\n  }\n\n  function getVariableName(value) {\n    if (variables) {\n      for (const name in variables) {\n        if (variables[name] === value) {\n          return name;\n        }\n      }\n    }\n    return null;\n  }\n\n  function getContextVariableName(value) {\n    const i = contextVariables.indexOf(value);\n    if (i !== -1) {\n      return `${contextName}Variable${i}`;\n    }\n    return null;\n  }\n}\n\n/**\n *\n * @param extension\n * @param {IGLExtensionWiretapOptions} options\n * @returns {*}\n */\nfunction glExtensionWiretap(extension, options) {\n  const proxy = new Proxy(extension, { get: listen });\n  const extensionEntityNames = {};\n  const {\n    contextName,\n    contextVariables,\n    getEntity,\n    useTrackablePrimitives,\n    recording,\n    variables,\n    indent,\n    onUnrecognizedArgumentLookup,\n  } = options;\n  return proxy;\n  function listen(obj, property) {\n    if (typeof obj[property] === 'function') {\n      return function() {\n        switch (property) {\n          case 'drawBuffersWEBGL':\n            recording.push(`${indent}${contextName}.drawBuffersWEBGL([${argumentsToString(arguments[0], { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })}]);`);\n            return extension.drawBuffersWEBGL(arguments[0]);\n        }\n        let result = extension[property].apply(extension, arguments);\n        switch (typeof result) {\n          case 'undefined':\n            recording.push(`${indent}${methodCallToString(property, arguments)};`);\n            return;\n          case 'number':\n          case 'boolean':\n            if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result = trackablePrimitive(result));\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n              contextVariables.push(result);\n            }\n            break;\n          default:\n            if (result === null) {\n              recording.push(`${methodCallToString(property, arguments)};`);\n            } else {\n              recording.push(`${indent}const ${contextName}Variable${contextVariables.length} = ${methodCallToString(property, arguments)};`);\n            }\n            contextVariables.push(result);\n        }\n        return result;\n      };\n    }\n    extensionEntityNames[extension[property]] = property;\n    return extension[property];\n  }\n\n  function getExtensionEntity(value) {\n    if (extensionEntityNames.hasOwnProperty(value)) {\n      return `${contextName}.${extensionEntityNames[value]}`;\n    }\n    return getEntity(value);\n  }\n\n  function methodCallToString(method, args) {\n    return `${contextName}.${method}(${argumentsToString(args, { contextName, contextVariables, getEntity: getExtensionEntity, addVariable, variables, onUnrecognizedArgumentLookup })})`;\n  }\n\n  function addVariable(value, source) {\n    const variableName = `${contextName}Variable${contextVariables.length}`;\n    contextVariables.push(value);\n    recording.push(`${indent}const ${variableName} = ${source};`);\n    return variableName;\n  }\n}\n\nfunction argumentsToString(args, options) {\n  const { variables, onUnrecognizedArgumentLookup } = options;\n  return (Array.from(args).map((arg) => {\n    const variableName = getVariableName(arg);\n    if (variableName) {\n      return variableName;\n    }\n    return argumentToString(arg, options);\n  }).join(', '));\n\n  function getVariableName(value) {\n    if (variables) {\n      for (const name in variables) {\n        if (!variables.hasOwnProperty(name)) continue;\n        if (variables[name] === value) {\n          return name;\n        }\n      }\n    }\n    if (onUnrecognizedArgumentLookup) {\n      return onUnrecognizedArgumentLookup(value);\n    }\n    return null;\n  }\n}\n\nfunction argumentToString(arg, options) {\n  const { contextName, contextVariables, getEntity, addVariable, onUnrecognizedArgumentLookup } = options;\n  if (typeof arg === 'undefined') {\n    return 'undefined';\n  }\n  if (arg === null) {\n    return 'null';\n  }\n  const i = contextVariables.indexOf(arg);\n  if (i > -1) {\n    return `${contextName}Variable${i}`;\n  }\n  switch (arg.constructor.name) {\n    case 'String':\n      const hasLines = /\\n/.test(arg);\n      const hasSingleQuotes = /'/.test(arg);\n      const hasDoubleQuotes = /\"/.test(arg);\n      if (hasLines) {\n        return '`' + arg + '`';\n      } else if (hasSingleQuotes && !hasDoubleQuotes) {\n        return '\"' + arg + '\"';\n      } else if (!hasSingleQuotes && hasDoubleQuotes) {\n        return \"'\" + arg + \"'\";\n      } else {\n        return '\\'' + arg + '\\'';\n      }\n    case 'Number': return getEntity(arg);\n    case 'Boolean': return getEntity(arg);\n    case 'Array':\n      return addVariable(arg, `new ${arg.constructor.name}([${Array.from(arg).join(',')}])`);\n    case 'Float32Array':\n    case 'Uint8Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n      return addVariable(arg, `new ${arg.constructor.name}(${JSON.stringify(Array.from(arg))})`);\n    default:\n      if (onUnrecognizedArgumentLookup) {\n        const instantiationString = onUnrecognizedArgumentLookup(arg);\n        if (instantiationString) {\n          return instantiationString;\n        }\n      }\n      throw new Error(`unrecognized argument type ${arg.constructor.name}`);\n  }\n}\n\nfunction trackablePrimitive(value) {\n  // wrapped in object, so track-able\n  return new value.constructor(value);\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = { glWiretap, glExtensionWiretap };\n}\n\nif (typeof window !== 'undefined') {\n  glWiretap.glExtensionWiretap = glExtensionWiretap;\n  window.glWiretap = glWiretap;\n}\n","import { glWiretap } from 'gl-wiretap';\r\nimport { utils } from '../../utils';\r\n\r\nfunction toStringWithoutUtils(fn) {\r\n  return fn.toString()\r\n    .replace('=>', '')\r\n    .replace(/^function /, '')\r\n    .replace(/utils[.]/g, '/*utils.*/');\r\n}\r\n\r\n/**\r\n *\r\n * @param {Kernel} Kernel\r\n * @param {KernelVariable[]} args\r\n * @param {Kernel} originKernel\r\n * @param {string} [setupContextString]\r\n * @param {string} [destroyContextString]\r\n * @returns {string}\r\n */\r\nexport function glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {\r\n  args = args ? Array.from(args).map(arg => {\r\n    switch (typeof arg) {\r\n      case 'boolean':\r\n        return new Boolean(arg);\r\n      case 'number':\r\n        return new Number(arg);\r\n      default:\r\n        return arg;\r\n    }\r\n  }) : null;\r\n  const uploadedValues = [];\r\n  const postResult = [];\r\n  const context = glWiretap(originKernel.context, {\r\n    useTrackablePrimitives: true,\r\n    onReadPixels: (targetName) => {\r\n      if (kernel.subKernels) {\r\n        if (!subKernelsResultVariableSetup) {\r\n          postResult.push(`    const result = { result: ${getRenderString(targetName, kernel)} };`);\r\n          subKernelsResultVariableSetup = true;\r\n        } else {\r\n          const property = kernel.subKernels[subKernelsResultIndex++].property;\r\n          postResult.push(`    result${isNaN(property) ? '.' + property : `[${property}]`} = ${getRenderString(targetName, kernel)};`);\r\n        }\r\n        if (subKernelsResultIndex === kernel.subKernels.length) {\r\n          postResult.push('    return result;');\r\n        }\r\n        return;\r\n      }\r\n      if (targetName) {\r\n        postResult.push(`    return ${getRenderString(targetName, kernel)};`);\r\n      } else {\r\n        postResult.push(`    return null;`);\r\n      }\r\n    },\r\n    onUnrecognizedArgumentLookup: (argument) => {\r\n      const argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);\r\n      if (argumentName) {\r\n        return argumentName;\r\n      }\r\n      const constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map(key => constants[key]) : [], context, uploadedValues);\r\n      if (constantName) {\r\n        return constantName;\r\n      }\r\n      return null;\r\n    }\r\n  });\r\n  let subKernelsResultVariableSetup = false;\r\n  let subKernelsResultIndex = 0;\r\n  const {\r\n    source,\r\n    canvas,\r\n    output,\r\n    pipeline,\r\n    graphical,\r\n    loopMaxIterations,\r\n    constants,\r\n    optimizeFloatMemory,\r\n    precision,\r\n    fixIntegerDivisionAccuracy,\r\n    functions,\r\n    nativeFunctions,\r\n    subKernels,\r\n    immutable,\r\n    argumentTypes,\r\n    constantTypes,\r\n    kernelArguments,\r\n    kernelConstants,\r\n  } = originKernel;\r\n  const kernel = new Kernel(source, {\r\n    canvas,\r\n    context,\r\n    checkContext: false,\r\n    output,\r\n    pipeline,\r\n    graphical,\r\n    loopMaxIterations,\r\n    constants,\r\n    optimizeFloatMemory,\r\n    precision,\r\n    fixIntegerDivisionAccuracy,\r\n    functions,\r\n    nativeFunctions,\r\n    subKernels,\r\n    immutable,\r\n    argumentTypes,\r\n    constantTypes,\r\n  });\r\n  let result = [];\r\n  context.setIndent(2);\r\n  kernel.build.apply(kernel, args);\r\n  result.push(context.toString());\r\n  context.reset();\r\n\r\n  kernel.kernelArguments.forEach((kernelArgument, i) => {\r\n    switch (kernelArgument.type) {\r\n      // primitives\r\n      case 'Integer':\r\n      case 'Boolean':\r\n      case 'Number':\r\n      case 'Float':\r\n        // non-primitives\r\n      case 'Array':\r\n      case 'Array(2)':\r\n      case 'Array(3)':\r\n      case 'Array(4)':\r\n      case 'HTMLImage':\r\n      case 'HTMLVideo':\r\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\r\n        break;\r\n      case 'HTMLImageArray':\r\n        for (let imageIndex = 0; imageIndex < args[i].length; imageIndex++) {\r\n          const arg = args[i];\r\n          context.insertVariable(`uploadValue_${kernelArgument.name}[${imageIndex}]`, arg[imageIndex]);\r\n        }\r\n        break;\r\n      case 'Input':\r\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, kernelArgument.uploadValue);\r\n        break;\r\n      case 'MemoryOptimizedNumberTexture':\r\n      case 'NumberTexture':\r\n      case 'Array1D(2)':\r\n      case 'Array1D(3)':\r\n      case 'Array1D(4)':\r\n      case 'Array2D(2)':\r\n      case 'Array2D(3)':\r\n      case 'Array2D(4)':\r\n      case 'Array3D(2)':\r\n      case 'Array3D(3)':\r\n      case 'Array3D(4)':\r\n      case 'ArrayTexture(1)':\r\n      case 'ArrayTexture(2)':\r\n      case 'ArrayTexture(3)':\r\n      case 'ArrayTexture(4)':\r\n        context.insertVariable(`uploadValue_${kernelArgument.name}`, args[i].texture);\r\n        break;\r\n      default:\r\n        throw new Error(`unhandled kernelArgumentType insertion for glWiretap of type ${kernelArgument.type}`);\r\n    }\r\n  });\r\n  result.push('/** start of injected functions **/');\r\n  result.push(`function ${toStringWithoutUtils(utils.flattenTo)}`);\r\n  result.push(`function ${toStringWithoutUtils(utils.flatten2dArrayTo)}`);\r\n  result.push(`function ${toStringWithoutUtils(utils.flatten3dArrayTo)}`);\r\n  result.push(`function ${toStringWithoutUtils(utils.flatten4dArrayTo)}`);\r\n  result.push(`function ${toStringWithoutUtils(utils.isArray)}`);\r\n  if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {\r\n    result.push(\r\n      `  const renderOutput = function ${toStringWithoutUtils(kernel.formatValues)};`\r\n    );\r\n  }\r\n  result.push('/** end of injected functions **/');\r\n  result.push(`  const innerKernel = function (${kernel.kernelArguments.map(kernelArgument => kernelArgument.varName).join(', ')}) {`);\r\n  context.setIndent(4);\r\n  kernel.run.apply(kernel, args);\r\n  if (kernel.renderKernels) {\r\n    kernel.renderKernels();\r\n  } else if (kernel.renderOutput) {\r\n    kernel.renderOutput();\r\n  }\r\n  result.push('    /** start setup uploads for kernel values **/');\r\n  kernel.kernelArguments.forEach(kernelArgument => {\r\n    result.push('    ' + kernelArgument.getStringValueHandler().split('\\n').join('\\n    '));\r\n  });\r\n  result.push('    /** end setup uploads for kernel values **/');\r\n  result.push(context.toString());\r\n  if (kernel.renderOutput === kernel.renderTexture) {\r\n    context.reset();\r\n    const results = kernel.renderKernels();\r\n    const textureName = context.getContextVariableName(kernel.outputTexture);\r\n    result.push(`    return {\r\n      result: {\r\n        texture: ${ textureName },\r\n        type: '${ results.result.type }',\r\n        toArray: ${ getToArrayString(results.result, textureName) }\r\n      },`);\r\n    const { subKernels, subKernelOutputTextures } = kernel;\r\n    for (let i = 0; i < subKernels.length; i++) {\r\n      const texture = subKernelOutputTextures[i];\r\n      const subKernel = subKernels[i];\r\n      const subKernelResult = results[subKernel.property];\r\n      const subKernelTextureName = context.getContextVariableName(texture);\r\n      result.push(`\r\n      ${subKernel.property}: {\r\n        texture: ${ subKernelTextureName },\r\n        type: '${ subKernelResult.type }',\r\n        toArray: ${ getToArrayString(subKernelResult, subKernelTextureName) }\r\n      },`);\r\n    }\r\n    result.push(`    };`);\r\n  }\r\n  result.push(`    ${destroyContextString ? '\\n' + destroyContextString + '    ': ''}`);\r\n  result.push(postResult.join('\\n'));\r\n  result.push('  };');\r\n  if (kernel.graphical) {\r\n    result.push(getGetPixelsString(kernel));\r\n    result.push(`  innerKernel.getPixels = getPixels;`);\r\n  }\r\n  result.push('  return innerKernel;');\r\n\r\n  let constantsUpload = [];\r\n  kernelConstants.forEach((kernelConstant) => {\r\n    constantsUpload.push(`${  kernelConstant.getStringValueHandler()}`);\r\n  });\r\n  return `function kernel(settings) {\r\n  const { context, constants } = settings;\r\n  ${constantsUpload.join('')}\r\n  ${setupContextString ? setupContextString : ''}\r\n${result.join('\\n')}\r\n}`;\r\n}\r\n\r\nfunction getRenderString(targetName, kernel) {\r\n  const readBackValue = kernel.precision === 'single' ? targetName : `new Float32Array(${targetName}.buffer)`;\r\n  if (kernel.output[2]) {\r\n    return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]}, ${kernel.output[2]})`;\r\n  }\r\n  if (kernel.output[1]) {\r\n    return `renderOutput(${readBackValue}, ${kernel.output[0]}, ${kernel.output[1]})`;\r\n  }\r\n\r\n  return `renderOutput(${readBackValue}, ${kernel.output[0]})`;\r\n}\r\n\r\nfunction getGetPixelsString(kernel) {\r\n  const getPixels = kernel.getPixels.toString();\r\n  const useFunctionKeyword = !/^function/.test(getPixels);\r\n  return utils.flattenFunctionToString(`${useFunctionKeyword ? 'function ' : ''}${ getPixels }`, {\r\n    findDependency: (object, name) => {\r\n      if (object === 'utils') {\r\n        return `const ${name} = ${utils[name].toString()};`;\r\n      }\r\n      return null;\r\n    },\r\n    thisLookup: (property) => {\r\n      if (property === 'context') {\r\n        return null;\r\n      }\r\n      if (kernel.hasOwnProperty(property)) {\r\n        return JSON.stringify(kernel[property]);\r\n      }\r\n      throw new Error(`unhandled thisLookup ${ property }`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getToArrayString(kernelResult, textureName) {\r\n  const toArray = kernelResult.toArray.toString();\r\n  const useFunctionKeyword = !/^function/.test(toArray);\r\n  const flattenedFunctions = utils.flattenFunctionToString(`${useFunctionKeyword ? 'function ' : ''}${ toArray }`, {\r\n    findDependency: (object, name) => {\r\n      if (object === 'utils') {\r\n        return `const ${name} = ${utils[name].toString()};`;\r\n      } else if (object === 'this') {\r\n        return `${useFunctionKeyword ? 'function ' : ''}${kernelResult[name].toString()}`;\r\n      } else {\r\n        throw new Error('unhandled fromObject');\r\n      }\r\n    },\r\n    thisLookup: (property) => {\r\n      if (property === 'texture') {\r\n        return textureName;\r\n      }\r\n      if (kernelResult.hasOwnProperty(property)) {\r\n        return JSON.stringify(kernelResult[property]);\r\n      }\r\n      throw new Error(`unhandled thisLookup ${ property }`);\r\n    }\r\n  });\r\n  return `() => {\r\n  ${flattenedFunctions}\r\n  return toArray();\r\n  }`;\r\n}\r\n\r\n/**\r\n *\r\n * @param {KernelVariable} argument\r\n * @param {KernelValue[]} kernelValues\r\n * @param {KernelVariable[]} values\r\n * @param context\r\n * @param {KernelVariable[]} uploadedValues\r\n * @return {string|null}\r\n */\r\nfunction findKernelValue(argument, kernelValues, values, context, uploadedValues) {\r\n  if (argument === null) return null;\r\n  switch (typeof argument) {\r\n    case 'boolean':\r\n    case 'number':\r\n      return null;\r\n  }\r\n  if (\r\n    typeof HTMLImageElement !== 'undefined' &&\r\n    argument instanceof HTMLImageElement\r\n  ) {\r\n    for (let i = 0; i < kernelValues.length; i++) {\r\n      const kernelValue = kernelValues[i];\r\n      if (kernelValue.type !== 'HTMLImageArray') continue;\r\n      if (kernelValue.uploadValue !== argument) continue;\r\n      // TODO: if we send two of the same image, the parser could get confused, and short circuit to the first, handle that here\r\n      const variableIndex = values[i].indexOf(argument);\r\n      if (variableIndex === -1) continue;\r\n      const variableName = `uploadValue_${kernelValue.name}[${variableIndex}]`;\r\n      context.insertVariable(variableName, argument);\r\n      return variableName;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  for (let i = 0; i < kernelValues.length; i++) {\r\n    const kernelValue = kernelValues[i];\r\n    if (argument !== kernelValue.uploadValue) continue;\r\n    const variable = `uploadValue_${kernelValue.name}`;\r\n    context.insertVariable(variable, kernelValue);\r\n    return variable;\r\n  }\r\n  return null;\r\n}\r\n","/**\r\n * @class KernelValue\r\n */\r\nexport class KernelValue {\r\n  /**\r\n   *\r\n   * @param {KernelVariable} value\r\n   * @param {IKernelValueSettings} settings\r\n   */\r\n  constructor(value, settings) {\r\n    const {\r\n      name,\r\n      kernel,\r\n      context,\r\n      checkContext,\r\n      onRequestContextHandle,\r\n      onUpdateValueMismatch,\r\n      origin,\r\n      strictIntegers,\r\n      type,\r\n      tactic,\r\n    } = settings;\r\n    if (!name) {\r\n      throw new Error('name not set');\r\n    }\r\n    if (!type) {\r\n      throw new Error('type not set');\r\n    }\r\n    if (!origin) {\r\n      throw new Error('origin not set');\r\n    }\r\n    if (!tactic) {\r\n      throw new Error('tactic not set');\r\n    }\r\n    if (origin !== 'user' && origin !== 'constants') {\r\n      throw new Error(`origin must be \"user\" or \"constants\" value is \"${ origin }\"`);\r\n    }\r\n    if (!onRequestContextHandle) {\r\n      throw new Error('onRequestContextHandle is not set');\r\n    }\r\n    this.name = name;\r\n    this.origin = origin;\r\n    this.tactic = tactic;\r\n    this.id = `${this.origin}_${name}`;\r\n    this.varName = origin === 'constants' ? `constants.${name}` : name;\r\n    this.kernel = kernel;\r\n    this.strictIntegers = strictIntegers;\r\n    // handle textures\r\n    this.type = value.type || type;\r\n    this.size = value.size || null;\r\n    this.index = null;\r\n    this.context = context;\r\n    this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;\r\n    this.contextHandle = null;\r\n    this.onRequestContextHandle = onRequestContextHandle;\r\n    this.onUpdateValueMismatch = onUpdateValueMismatch;\r\n    this.forceUploadEachRun = null;\r\n  }\r\n\r\n  getSource() {\r\n    throw new Error(`\"getSource\" not defined on ${ this.constructor.name }`);\r\n  }\r\n\r\n  updateValue(value) {\r\n    throw new Error(`\"updateValue\" not defined on ${ this.constructor.name }`);\r\n  }\r\n}\r\n","import { Input } from '../../../input';\r\nimport { KernelValue } from '../../kernel-value';\r\nimport { utils } from '../../../utils';\r\n\r\nexport class WebGLKernelValue extends KernelValue {\r\n  /**\r\n   * @param {KernelVariable} value\r\n   * @param {IWebGLKernelValueSettings} settings\r\n   */\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.dimensionsId = null;\r\n    this.sizeId = null;\r\n    this.initialValueConstructor = value.constructor;\r\n    this.onRequestTexture = settings.onRequestTexture;\r\n    this.onRequestIndex = settings.onRequestIndex;\r\n    this.uploadValue = null;\r\n    this.textureSize = null;\r\n    this.bitRatio = null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  checkSize(width, height) {\r\n    if (!this.kernel.validate) return;\r\n    const { maxTextureSize } = this.kernel.constructor.features;\r\n    if (width > maxTextureSize || height > maxTextureSize) {\r\n      if (width > height) {\r\n        throw new Error(`Argument width of ${width} larger than maximum size of ${maxTextureSize} for your GPU`);\r\n      } else {\r\n        throw new Error(`Argument height of ${height} larger than maximum size of ${maxTextureSize} for your GPU`);\r\n      }\r\n    }\r\n  }\r\n\r\n  requestTexture() {\r\n    this.texture = this.onRequestTexture();\r\n    this.setupTexture();\r\n  }\r\n\r\n  setupTexture() {\r\n    this.contextHandle = this.onRequestContextHandle();\r\n    this.index = this.onRequestIndex();\r\n    this.dimensionsId = this.id + 'Dim';\r\n    this.sizeId = this.id + 'Size';\r\n  }\r\n\r\n  getTransferArrayType(value) {\r\n    if (Array.isArray(value[0])) {\r\n      return this.getTransferArrayType(value[0]);\r\n    }\r\n    switch (value.constructor) {\r\n      case Array:\r\n      case Int32Array:\r\n      case Int16Array:\r\n      case Int8Array:\r\n        return Float32Array;\r\n      case Uint8ClampedArray:\r\n      case Uint8Array:\r\n      case Uint16Array:\r\n      case Uint32Array:\r\n      case Float32Array:\r\n      case Float64Array:\r\n        return value.constructor;\r\n    }\r\n    console.warn('Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros');\r\n    return value.constructor;\r\n  }\r\n  /**\r\n   * @desc Adds kernel parameters to the Value Texture,\r\n   * binding it to the context, etc.\r\n   *\r\n   * @param {Array|Float32Array|Uint16Array} value - The actual Value supplied to the kernel\r\n   * @param {Number} length - the expected total length of the output array\r\n   * @param {Object} [Type]\r\n   * @returns {Float32Array|Uint16Array|Uint8Array} flattened array to transfer\r\n   */\r\n  formatArrayTransfer(value, length, Type) {\r\n    if (utils.isArray(value[0]) || this.optimizeFloatMemory) {\r\n      // not already flat\r\n      const valuesFlat = new Float32Array(length);\r\n      utils.flattenTo(value, valuesFlat);\r\n      return valuesFlat;\r\n    } else {\r\n      switch (value.constructor) {\r\n        case Uint8ClampedArray:\r\n        case Uint8Array:\r\n        case Int8Array:\r\n        case Uint16Array:\r\n        case Int16Array:\r\n        case Float32Array:\r\n        case Int32Array: {\r\n          const valuesFlat = new(Type || value.constructor)(length);\r\n          utils.flattenTo(value, valuesFlat);\r\n          return valuesFlat;\r\n        }\r\n        default: {\r\n          const valuesFlat = new Float32Array(length);\r\n          utils.flattenTo(value, valuesFlat);\r\n          return valuesFlat;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\r\n   * @param value\r\n   * @returns {number}\r\n   */\r\n  getBitRatio(value) {\r\n    if (Array.isArray(value[0])) {\r\n      return this.getBitRatio(value[0]);\r\n    } else if (value.constructor === Input) {\r\n      return this.getBitRatio(value.value);\r\n    }\r\n    switch (value.constructor) {\r\n      case Uint8ClampedArray:\r\n      case Uint8Array:\r\n      case Int8Array:\r\n        return 1;\r\n      case Uint16Array:\r\n      case Int16Array:\r\n        return 2;\r\n      case Float32Array:\r\n      case Int32Array:\r\n      default:\r\n        return 4;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used for when we want a string output of our kernel, so we can still input values to the kernel\r\n   */\r\n  getStringValueHandler() {\r\n    throw new Error(`\"getStringValueHandler\" not implemented on ${this.constructor.name}`);\r\n  }\r\n\r\n  getVariablePrecisionString() {\r\n    switch (this.tactic) {\r\n      case 'speed':\r\n        return 'lowp';\r\n      case 'performance':\r\n        return 'highp';\r\n      case 'balanced':\r\n      default:\r\n        return 'mediump';\r\n    }\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueBoolean extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.uploadValue = value;\r\n  }\r\n  getSource(value) {\r\n    if (this.origin === 'constants') {\r\n      return `const bool ${this.id} = ${value};\\n`;\r\n    }\r\n    return `uniform bool ${this.id};\\n`;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueFloat extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.uploadValue = value;\r\n  }\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n  getSource(value) {\r\n    if (this.origin === 'constants') {\r\n      if (Number.isInteger(value)) {\r\n        return `const float ${this.id} = ${value}.0;\\n`;\r\n      }\r\n      return `const float ${this.id} = ${value};\\n`;\r\n    }\r\n    return `uniform float ${this.id};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform1f(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueInteger extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.uploadValue = value;\r\n  }\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n  getSource(value) {\r\n    if (this.origin === 'constants') {\r\n      return `const int ${this.id} = ${ parseInt(value) };\\n`;\r\n    }\r\n    return `uniform int ${this.id};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueHTMLImage extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    const { width, height } = value;\r\n    this.checkSize(width, height);\r\n    this.dimensions = [width, height, 1];\r\n    this.requestTexture();\r\n    this.textureSize = [width, height];\r\n    this.uploadValue = value;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(inputImage) {\r\n    if (inputImage.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueHTMLImage } from './html-image';\r\n\r\nexport class WebGLKernelValueDynamicHTMLImage extends WebGLKernelValueHTMLImage {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    const { width, height } = value;\r\n    this.checkSize(width, height);\r\n    this.dimensions = [width, height, 1];\r\n    this.textureSize = [width, height];\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { WebGLKernelValueHTMLImage } from './html-image';\r\n\r\nexport class WebGLKernelValueHTMLVideo extends WebGLKernelValueHTMLImage {}\r\n","import { WebGLKernelValueDynamicHTMLImage } from './dynamic-html-image';\r\n\r\nexport class WebGLKernelValueDynamicHTMLVideo extends WebGLKernelValueDynamicHTMLImage {}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleInput extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = 4;\r\n    let [w, h, d] = value.size;\r\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\r\n      `flattenTo(${this.varName}.value, uploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(input) {\r\n    if (input.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(input.value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueUnsignedInput extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = this.getBitRatio(value);\r\n    const [w, h, d] = value.size;\r\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\r\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\r\n    this.checkSize(this.textureSize[0] * (4 / this.bitRatio), this.textureSize[1] * (4 / this.bitRatio));\r\n    this.TranserArrayType = this.getTransferArrayType(value.value);\r\n    this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\r\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\r\n      `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\r\n      `flattenTo(${this.varName}.value, preUploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(input) {\r\n    if (input.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(input.value, this.preUploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueUnsignedInput } from './unsigned-input';\r\n\r\nexport class WebGLKernelValueDynamicUnsignedInput extends WebGLKernelValueUnsignedInput {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    let [w, h, d] = value.size;\r\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\r\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\r\n    this.checkSize(this.textureSize[0] * (4 / this.bitRatio), this.textureSize[1] * (4 / this.bitRatio));\r\n    const Type = this.getTransferArrayType(value.value);\r\n    this.preUploadValue = new Type(this.uploadArrayLength);\r\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueMemoryOptimizedNumberTexture extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    const [width, height] = value.size;\r\n    this.checkSize(width, height);\r\n    this.setupTexture();\r\n    this.dimensions = value.dimensions;\r\n    this.textureSize = value.size;\r\n    this.uploadValue = value.texture;\r\n    this.forceUploadEachRun = true;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(inputTexture) {\r\n    if (inputTexture.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    if (this.checkContext && inputTexture.context !== this.context) {\r\n      throw new Error(`Value ${this.name} (${this.type }) must be from same context`);\r\n    }\r\n    const { context: gl } = this;\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueMemoryOptimizedNumberTexture } from './memory-optimized-number-texture';\r\n\r\nexport class WebGLKernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(inputTexture) {\r\n    this.checkSize(inputTexture.size[0], inputTexture.size[1]);\r\n    this.dimensions = inputTexture.dimensions;\r\n    this.textureSize = inputTexture.size;\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(inputTexture);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueNumberTexture extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    const [width, height] = value.size;\r\n    this.checkSize(width, height);\r\n    this.setupTexture();\r\n    const { size: textureSize, dimensions } = value;\r\n    this.bitRatio = this.getBitRatio(value);\r\n    this.dimensions = dimensions;\r\n    this.textureSize = textureSize;\r\n    this.uploadValue = value.texture;\r\n    this.forceUploadEachRun = true;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName}.texture;\\n`;\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(inputTexture) {\r\n    if (inputTexture.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    if (this.checkContext && inputTexture.context !== this.context) {\r\n      throw new Error(`Value ${this.name} (${this.type}) must be from same context`);\r\n    }\r\n    const { context: gl } = this;\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueNumberTexture } from './number-texture';\r\n\r\nexport class WebGLKernelValueDynamicNumberTexture extends WebGLKernelValueNumberTexture {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.dimensions = value.dimensions;\r\n    this.checkSize(value.size[0], value.size[1]);\r\n    this.textureSize = value.size;\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = 4;\r\n    this.dimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\r\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray1DI extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = 4;\r\n    this.setShape(value);\r\n  }\r\n\r\n  setShape(value) {\r\n    const valueDimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\r\n    this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\r\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flatten2dArrayTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray1DI } from './single-array1d-i';\r\n\r\nexport class WebGLKernelValueDynamicSingleArray1DI extends WebGLKernelValueSingleArray1DI {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.setShape(value);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray2DI extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = 4;\r\n    this.setShape(value);\r\n  }\r\n\r\n  setShape(value) {\r\n    const valueDimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\r\n    this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\r\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flatten3dArrayTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray2DI } from './single-array2d-i';\r\n\r\nexport class WebGLKernelValueDynamicSingleArray2DI extends WebGLKernelValueSingleArray2DI {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.setShape(value);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray3DI extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = 4;\r\n    this.setShape(value);\r\n  }\r\n\r\n  setShape(value) {\r\n    const valueDimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);\r\n    this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const uploadValue_${this.name} = new Float32Array(${this.uploadArrayLength})`,\r\n      `flattenTo(${this.varName}, uploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flatten4dArrayTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray3DI } from './single-array3d-i';\r\n\r\nexport class WebGLKernelValueDynamicSingleArray3DI extends WebGLKernelValueSingleArray3DI {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.setShape(value);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray2 extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.uploadValue = value;\r\n  }\r\n  getSource(value) {\r\n    if (this.origin === 'constants') {\r\n      return `const vec2 ${this.id} = vec2(${value[0]},${value[1]});\\n`;\r\n    }\r\n    return `uniform vec2 ${this.id};\\n`;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    // resetting isn't supported for Array(2)\r\n    if (this.origin === 'constants') return '';\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform2fv(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray3 extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.uploadValue = value;\r\n  }\r\n  getSource(value) {\r\n    if (this.origin === 'constants') {\r\n      return `const vec3 ${this.id} = vec3(${value[0]},${value[1]},${value[2]});\\n`;\r\n    }\r\n    return `uniform vec3 ${this.id};\\n`;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    // resetting isn't supported for Array(3)\r\n    if (this.origin === 'constants') return '';\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform3fv(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueSingleArray4 extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.uploadValue = value;\r\n  }\r\n  getSource(value) {\r\n    if (this.origin === 'constants') {\r\n      return `const vec4 ${this.id} = vec4(${value[0]},${value[1]},${value[2]},${value[3]});\\n`;\r\n    }\r\n    return `uniform vec4 ${this.id};\\n`;\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    // resetting isn't supported for Array(4)\r\n    if (this.origin === 'constants') return '';\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform4fv(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from './index';\r\n\r\nexport class WebGLKernelValueUnsignedArray extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.requestTexture();\r\n    this.bitRatio = this.getBitRatio(value);\r\n    this.dimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\r\n    this.checkSize(this.textureSize[0] * (4 / this.bitRatio), this.textureSize[1] * (4 / this.bitRatio));\r\n    this.TranserArrayType = this.getTransferArrayType(value);\r\n    this.preUploadValue = new this.TranserArrayType(this.uploadArrayLength);\r\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\r\n  }\r\n\r\n  getStringValueHandler() {\r\n    return utils.linesToString([\r\n      `const preUploadValue_${this.name} = new ${this.TranserArrayType.name}(${this.uploadArrayLength})`,\r\n      `const uploadValue_${this.name} = new Uint8Array(preUploadValue_${this.name}.buffer)`,\r\n      `flattenTo(${this.varName}, preUploadValue_${this.name})`,\r\n    ]);\r\n  }\r\n\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(value, this.preUploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueUnsignedArray } from './unsigned-array';\r\n\r\nexport class WebGLKernelValueDynamicUnsignedArray extends WebGLKernelValueUnsignedArray {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.dimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);\r\n    this.checkSize(this.textureSize[0] * (4 / this.bitRatio), this.textureSize[1] * (4 / this.bitRatio));\r\n    const Type = this.getTransferArrayType(value);\r\n    this.preUploadValue = new Type(this.uploadArrayLength);\r\n    this.uploadValue = new Uint8Array(this.preUploadValue.buffer);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { WebGLKernelValueBoolean } from './kernel-value/boolean';\r\nimport { WebGLKernelValueFloat } from './kernel-value/float';\r\nimport { WebGLKernelValueInteger } from './kernel-value/integer';\r\n\r\nimport { WebGLKernelValueHTMLImage } from './kernel-value/html-image';\r\nimport { WebGLKernelValueDynamicHTMLImage } from './kernel-value/dynamic-html-image';\r\n\r\nimport { WebGLKernelValueHTMLVideo } from './kernel-value/html-video';\r\nimport { WebGLKernelValueDynamicHTMLVideo } from './kernel-value/dynamic-html-video';\r\n\r\nimport { WebGLKernelValueSingleInput } from './kernel-value/single-input';\r\nimport { WebGLKernelValueDynamicSingleInput } from './kernel-value/dynamic-single-input';\r\n\r\nimport { WebGLKernelValueUnsignedInput } from './kernel-value/unsigned-input';\r\nimport { WebGLKernelValueDynamicUnsignedInput } from './kernel-value/dynamic-unsigned-input';\r\n\r\nimport { WebGLKernelValueMemoryOptimizedNumberTexture } from './kernel-value/memory-optimized-number-texture';\r\nimport { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } from './kernel-value/dynamic-memory-optimized-number-texture';\r\n\r\nimport { WebGLKernelValueNumberTexture } from './kernel-value/number-texture';\r\nimport { WebGLKernelValueDynamicNumberTexture } from './kernel-value/dynamic-number-texture';\r\n\r\nimport { WebGLKernelValueSingleArray } from './kernel-value/single-array';\r\nimport { WebGLKernelValueDynamicSingleArray } from './kernel-value/dynamic-single-array';\r\n\r\nimport { WebGLKernelValueSingleArray1DI } from './kernel-value/single-array1d-i';\r\nimport { WebGLKernelValueDynamicSingleArray1DI } from './kernel-value/dynamic-single-array1d-i';\r\n\r\nimport { WebGLKernelValueSingleArray2DI } from './kernel-value/single-array2d-i';\r\nimport { WebGLKernelValueDynamicSingleArray2DI } from './kernel-value/dynamic-single-array2d-i';\r\n\r\nimport { WebGLKernelValueSingleArray3DI } from './kernel-value/single-array3d-i';\r\nimport { WebGLKernelValueDynamicSingleArray3DI } from './kernel-value/dynamic-single-array3d-i';\r\n\r\nimport { WebGLKernelValueSingleArray2 } from './kernel-value/single-array2';\r\nimport { WebGLKernelValueSingleArray3 } from './kernel-value/single-array3';\r\nimport { WebGLKernelValueSingleArray4 } from './kernel-value/single-array4';\r\n\r\nimport { WebGLKernelValueUnsignedArray } from './kernel-value/unsigned-array';\r\nimport { WebGLKernelValueDynamicUnsignedArray } from './kernel-value/dynamic-unsigned-array';\r\n\r\nexport const kernelValueMaps = {\r\n  unsigned: {\r\n    dynamic: {\r\n      'Boolean': WebGLKernelValueBoolean,\r\n      'Integer': WebGLKernelValueInteger,\r\n      'Float': WebGLKernelValueFloat,\r\n      'Array': WebGLKernelValueDynamicUnsignedArray,\r\n      'Array(2)': false,\r\n      'Array(3)': false,\r\n      'Array(4)': false,\r\n      'Array1D(2)': false,\r\n      'Array1D(3)': false,\r\n      'Array1D(4)': false,\r\n      'Array2D(2)': false,\r\n      'Array2D(3)': false,\r\n      'Array2D(4)': false,\r\n      'Array3D(2)': false,\r\n      'Array3D(3)': false,\r\n      'Array3D(4)': false,\r\n      'Input': WebGLKernelValueDynamicUnsignedInput,\r\n      'NumberTexture': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGLKernelValueDynamicHTMLImage,\r\n      'HTMLImageArray': false,\r\n      'HTMLVideo': WebGLKernelValueDynamicHTMLVideo,\r\n    },\r\n    static: {\r\n      'Boolean': WebGLKernelValueBoolean,\r\n      'Float': WebGLKernelValueFloat,\r\n      'Integer': WebGLKernelValueInteger,\r\n      'Array': WebGLKernelValueUnsignedArray,\r\n      'Array(2)': false,\r\n      'Array(3)': false,\r\n      'Array(4)': false,\r\n      'Array1D(2)': false,\r\n      'Array1D(3)': false,\r\n      'Array1D(4)': false,\r\n      'Array2D(2)': false,\r\n      'Array2D(3)': false,\r\n      'Array2D(4)': false,\r\n      'Array3D(2)': false,\r\n      'Array3D(3)': false,\r\n      'Array3D(4)': false,\r\n      'Input': WebGLKernelValueUnsignedInput,\r\n      'NumberTexture': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(1)': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(2)': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(3)': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(4)': WebGLKernelValueNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGLKernelValueHTMLImage,\r\n      'HTMLImageArray': false,\r\n      'HTMLVideo': WebGLKernelValueHTMLVideo,\r\n    }\r\n  },\r\n  single: {\r\n    dynamic: {\r\n      'Boolean': WebGLKernelValueBoolean,\r\n      'Integer': WebGLKernelValueInteger,\r\n      'Float': WebGLKernelValueFloat,\r\n      'Array': WebGLKernelValueDynamicSingleArray,\r\n      'Array(2)': WebGLKernelValueSingleArray2,\r\n      'Array(3)': WebGLKernelValueSingleArray3,\r\n      'Array(4)': WebGLKernelValueSingleArray4,\r\n      'Array1D(2)': WebGLKernelValueDynamicSingleArray1DI,\r\n      'Array1D(3)': WebGLKernelValueDynamicSingleArray1DI,\r\n      'Array1D(4)': WebGLKernelValueDynamicSingleArray1DI,\r\n      'Array2D(2)': WebGLKernelValueDynamicSingleArray2DI,\r\n      'Array2D(3)': WebGLKernelValueDynamicSingleArray2DI,\r\n      'Array2D(4)': WebGLKernelValueDynamicSingleArray2DI,\r\n      'Array3D(2)': WebGLKernelValueDynamicSingleArray3DI,\r\n      'Array3D(3)': WebGLKernelValueDynamicSingleArray3DI,\r\n      'Array3D(4)': WebGLKernelValueDynamicSingleArray3DI,\r\n      'Input': WebGLKernelValueDynamicSingleInput,\r\n      'NumberTexture': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,\r\n      'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGLKernelValueDynamicHTMLImage,\r\n      'HTMLImageArray': false,\r\n      'HTMLVideo': WebGLKernelValueDynamicHTMLVideo,\r\n    },\r\n    static: {\r\n      'Boolean': WebGLKernelValueBoolean,\r\n      'Float': WebGLKernelValueFloat,\r\n      'Integer': WebGLKernelValueInteger,\r\n      'Array': WebGLKernelValueSingleArray,\r\n      'Array(2)': WebGLKernelValueSingleArray2,\r\n      'Array(3)': WebGLKernelValueSingleArray3,\r\n      'Array(4)': WebGLKernelValueSingleArray4,\r\n      'Array1D(2)': WebGLKernelValueSingleArray1DI,\r\n      'Array1D(3)': WebGLKernelValueSingleArray1DI,\r\n      'Array1D(4)': WebGLKernelValueSingleArray1DI,\r\n      'Array2D(2)': WebGLKernelValueSingleArray2DI,\r\n      'Array2D(3)': WebGLKernelValueSingleArray2DI,\r\n      'Array2D(4)': WebGLKernelValueSingleArray2DI,\r\n      'Array3D(2)': WebGLKernelValueSingleArray3DI,\r\n      'Array3D(3)': WebGLKernelValueSingleArray3DI,\r\n      'Array3D(4)': WebGLKernelValueSingleArray3DI,\r\n      'Input': WebGLKernelValueSingleInput,\r\n      'NumberTexture': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(1)': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(2)': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(3)': WebGLKernelValueNumberTexture,\r\n      'ArrayTexture(4)': WebGLKernelValueNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGLKernelValueHTMLImage,\r\n      'HTMLImageArray': false,\r\n      'HTMLVideo': WebGLKernelValueHTMLVideo,\r\n    }\r\n  },\r\n};\r\n\r\nexport function lookupKernelValueType(type, dynamic, precision, value) {\r\n  if (!type) {\r\n    throw new Error('type missing');\r\n  }\r\n  if (!dynamic) {\r\n    throw new Error('dynamic missing');\r\n  }\r\n  if (!precision) {\r\n    throw new Error('precision missing');\r\n  }\r\n  if (value.type) {\r\n    type = value.type;\r\n  }\r\n  const types = kernelValueMaps[precision][dynamic];\r\n  if (types[type] === false) {\r\n    return null;\r\n  } else if (types[type] === undefined) {\r\n    throw new Error(`Could not find a KernelValue for ${ type }`);\r\n  }\r\n  return types[type];\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray } from './single-array';\r\n\r\nexport class WebGLKernelValueDynamicSingleArray extends WebGLKernelValueSingleArray {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.dimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleInput } from './single-input';\r\n\r\nexport class WebGLKernelValueDynamicSingleInput extends WebGLKernelValueSingleInput {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    let [w, h, d] = value.size;\r\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { GLKernel } from '../gl/kernel';\r\nimport { FunctionBuilder } from '../function-builder';\r\nimport { WebGLFunctionNode } from './function-node';\r\nimport { utils } from '../../utils';\r\nimport triangleNoise from '../../plugins/triangle-noise';\r\nimport { fragmentShader } from './fragment-shader';\r\nimport { vertexShader } from './vertex-shader';\r\nimport { glKernelString } from '../gl/kernel-string';\r\nimport { lookupKernelValueType } from './kernel-value-maps';\r\n\r\nlet isSupported = null;\r\nlet testCanvas = null;\r\nlet testContext = null;\r\nlet testExtensions = null;\r\nlet features = null;\r\n\r\nconst plugins = [triangleNoise];\r\nconst canvases = [];\r\nconst maxTexSizes = {};\r\n\r\n/**\r\n * @desc Kernel Implementation for WebGL.\r\n *\r\n * This builds the shaders and runs them on the GPU, then outputs the result\r\n * back as float (enabled by default) and Texture.\r\n *\r\n * @prop {Object} textureCache - webGl Texture cache\r\n * @prop {Object} programUniformLocationCache - Location of program variables in memory\r\n * @prop {Object} framebuffer - Webgl frameBuffer\r\n * @prop {Object} buffer - WebGL buffer\r\n * @prop {Object} program - The webGl Program\r\n * @prop {Object} functionBuilder - Function Builder instance bound to this Kernel\r\n * @prop {Boolean} pipeline - Set output type to FAST mode (GPU to GPU via Textures), instead of float\r\n * @prop {String} endianness - Endian information like Little-endian, Big-endian.\r\n * @prop {Array} argumentTypes - Types of parameters sent to the Kernel\r\n * @prop {String} compiledFragmentShader - Compiled fragment shader string\r\n * @prop {String} compiledVertexShader - Compiled Vertical shader string\r\n * @extends GLKernel\r\n */\r\nexport class WebGLKernel extends GLKernel {\r\n  static get isSupported() {\r\n    if (isSupported !== null) {\r\n      return isSupported;\r\n    }\r\n    this.setupFeatureChecks();\r\n    isSupported = this.isContextMatch(testContext);\r\n    return isSupported;\r\n  }\r\n\r\n  static setupFeatureChecks() {\r\n    if (typeof document !== 'undefined') {\r\n      testCanvas = document.createElement('canvas');\r\n    } else if (typeof OffscreenCanvas !== 'undefined') {\r\n      testCanvas = new OffscreenCanvas(0, 0);\r\n    }\r\n    if (!testCanvas) return;\r\n    testContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');\r\n    if (!testContext || !testContext.getExtension) return;\r\n    testExtensions = {\r\n      OES_texture_float: testContext.getExtension('OES_texture_float'),\r\n      OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\r\n      OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),\r\n      WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),\r\n    };\r\n    features = this.getFeatures();\r\n  }\r\n\r\n  static isContextMatch(context) {\r\n    if (typeof WebGLRenderingContext !== 'undefined') {\r\n      return context instanceof WebGLRenderingContext;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getFeatures() {\r\n    const isDrawBuffers = this.getIsDrawBuffers();\r\n    return Object.freeze({\r\n      isFloatRead: this.getIsFloatRead(),\r\n      isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\r\n      isTextureFloat: this.getIsTextureFloat(),\r\n      isDrawBuffers,\r\n      kernelMap: isDrawBuffers,\r\n      channelCount: this.getChannelCount(),\r\n    });\r\n  }\r\n\r\n  static getIsTextureFloat() {\r\n    return Boolean(testExtensions.OES_texture_float);\r\n  }\r\n\r\n  static getIsDrawBuffers() {\r\n    return Boolean(testExtensions.WEBGL_draw_buffers);\r\n  }\r\n\r\n  static getChannelCount() {\r\n    return testExtensions.WEBGL_draw_buffers ?\r\n      testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) :\r\n      1;\r\n  }\r\n\r\n  static lookupKernelValueType(type, dynamic, precision, value) {\r\n    return lookupKernelValueType(type, dynamic, precision, value);\r\n  }\r\n\r\n  static get testCanvas() {\r\n    return testCanvas;\r\n  }\r\n\r\n  static get testContext() {\r\n    return testContext;\r\n  }\r\n\r\n  static get features() {\r\n    return features;\r\n  }\r\n\r\n  static get fragmentShader() {\r\n    return fragmentShader;\r\n  }\r\n\r\n  static get vertexShader() {\r\n    return vertexShader;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {String} source\r\n   * @param {IKernelSettings} settings\r\n   */\r\n  constructor(source, settings) {\r\n    super(source, settings);\r\n    this.program = null;\r\n    this.pipeline = settings.pipeline;\r\n    this.endianness = utils.systemEndianness();\r\n    this.extensions = {};\r\n    this.subKernelOutputTextures = null;\r\n    this.kernelArguments = null;\r\n    this.argumentTextureCount = 0;\r\n    this.constantTextureCount = 0;\r\n    this.compiledFragmentShader = null;\r\n    this.compiledVertexShader = null;\r\n    this.fragShader = null;\r\n    this.vertShader = null;\r\n    this.drawBuffersMap = null;\r\n    this.outputTexture = null;\r\n\r\n    /**\r\n     *\r\n     * @type {Int32Array|null}\r\n     */\r\n    this.maxTexSize = null;\r\n    this.switchingKernels = false;\r\n    this.onRequestSwitchKernel = null;\r\n\r\n    this.mergeSettings(source.settings || settings);\r\n\r\n    /**\r\n     * The thread dimensions, x, y and z\r\n     * @type {Array|null}\r\n     */\r\n    this.threadDim = null;\r\n    this.framebuffer = null;\r\n    this.buffer = null;\r\n    this.textureCache = {};\r\n    this.programUniformLocationCache = {};\r\n    this.uniform1fCache = {};\r\n    this.uniform1iCache = {};\r\n    this.uniform2fCache = {};\r\n    this.uniform2fvCache = {};\r\n    this.uniform2ivCache = {};\r\n    this.uniform3fvCache = {};\r\n    this.uniform3ivCache = {};\r\n    this.uniform4fvCache = {};\r\n    this.uniform4ivCache = {};\r\n  }\r\n\r\n  initCanvas() {\r\n    if (typeof document !== 'undefined') {\r\n      const canvas = document.createElement('canvas');\r\n      // Default width and height, to fix webgl issue in safari\r\n      canvas.width = 2;\r\n      canvas.height = 2;\r\n      return canvas;\r\n    } else if (typeof OffscreenCanvas !== 'undefined') {\r\n      return new OffscreenCanvas(0, 0);\r\n    }\r\n  }\r\n\r\n  initContext() {\r\n    const settings = {\r\n      alpha: false,\r\n      depth: false,\r\n      antialias: false\r\n    };\r\n    return this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);\r\n  }\r\n\r\n  initPlugins(settings) {\r\n    // default plugins\r\n    const pluginsToUse = [];\r\n    const { source } = this;\r\n    if (typeof source === 'string') {\r\n      for (let i = 0; i < plugins.length; i++) {\r\n        const plugin = plugins[i];\r\n        if (source.match(plugin.functionMatch)) {\r\n          pluginsToUse.push(plugin);\r\n        }\r\n      }\r\n    } else if (typeof source === 'object') {\r\n      // `source` is from object, json\r\n      if (settings.pluginNames) { //TODO: in context of JSON support, pluginNames may not exist here\r\n        for (let i = 0; i < plugins.length; i++) {\r\n          const plugin = plugins[i];\r\n          const usePlugin = settings.pluginNames.some(pluginName => pluginName === plugin.name);\r\n          if (usePlugin) {\r\n            pluginsToUse.push(plugin);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return pluginsToUse;\r\n  }\r\n\r\n  initExtensions() {\r\n    this.extensions = {\r\n      OES_texture_float: this.context.getExtension('OES_texture_float'),\r\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\r\n      OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),\r\n      WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),\r\n      WEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float'),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @desc Validate settings related to Kernel, such as dimensions size, and auto output support.\r\n   * @param {IArguments} args\r\n   */\r\n  validateSettings(args) {\r\n    if (!this.validate) {\r\n      this.texSize = utils.getKernelTextureSize({\r\n        optimizeFloatMemory: this.optimizeFloatMemory,\r\n        precision: this.precision,\r\n      }, this.output);\r\n      return;\r\n    }\r\n\r\n    const { features } = this.constructor;\r\n    if (this.optimizeFloatMemory === true && !features.isTextureFloat) {\r\n      throw new Error('Float textures are not supported');\r\n    } else if (this.precision === 'single' && !features.isFloatRead) {\r\n      throw new Error('Single precision not supported');\r\n    } else if (!this.graphical && this.precision === null && features.isTextureFloat) {\r\n      this.precision = features.isFloatRead ? 'single' : 'unsigned';\r\n    }\r\n\r\n    if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {\r\n      throw new Error('could not instantiate draw buffers extension');\r\n    }\r\n\r\n    if (this.fixIntegerDivisionAccuracy === null) {\r\n      this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\r\n    } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\r\n      this.fixIntegerDivisionAccuracy = false;\r\n    }\r\n\r\n    this.checkOutput();\r\n\r\n    if (!this.output || this.output.length === 0) {\r\n      if (args.length !== 1) {\r\n        throw new Error('Auto output only supported for kernels with only one input');\r\n      }\r\n\r\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\r\n      if (argType === 'Array') {\r\n        this.output = utils.getDimensions(argType);\r\n      } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\r\n        this.output = args[0].output;\r\n      } else {\r\n        throw new Error('Auto output not supported for input type: ' + argType);\r\n      }\r\n    }\r\n\r\n    if (this.graphical) {\r\n      if (this.output.length !== 2) {\r\n        throw new Error('Output must have 2 dimensions on graphical mode');\r\n      }\r\n\r\n      if (this.precision === 'precision') {\r\n        this.precision = 'unsigned';\r\n        console.warn('Cannot use graphical mode and single precision at the same time');\r\n      }\r\n\r\n      this.texSize = utils.clone(this.output);\r\n      return;\r\n    } else if (this.precision === null && features.isTextureFloat) {\r\n      this.precision = 'single';\r\n    }\r\n\r\n    this.texSize = utils.getKernelTextureSize({\r\n      optimizeFloatMemory: this.optimizeFloatMemory,\r\n      precision: this.precision,\r\n    }, this.output);\r\n\r\n    this.checkTextureSize();\r\n  }\r\n\r\n  updateMaxTexSize() {\r\n    const { texSize, canvas } = this;\r\n    if (this.maxTexSize === null) {\r\n      let canvasIndex = canvases.indexOf(canvas);\r\n      if (canvasIndex === -1) {\r\n        canvasIndex = canvases.length;\r\n        canvases.push(canvas);\r\n        maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];\r\n      }\r\n      this.maxTexSize = maxTexSizes[canvasIndex];\r\n    }\r\n    if (this.maxTexSize[0] < texSize[0]) {\r\n      this.maxTexSize[0] = texSize[0];\r\n    }\r\n    if (this.maxTexSize[1] < texSize[1]) {\r\n      this.maxTexSize[1] = texSize[1];\r\n    }\r\n  }\r\n\r\n  // TODO: move channel checks to new place\r\n  _oldtranslateSource() {\r\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\r\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\r\n    });\r\n\r\n    // need this line to automatically get returnType\r\n    const translatedSource = functionBuilder.getPrototypeString('kernel');\r\n\r\n    if (!this.returnType) {\r\n      this.returnType = functionBuilder.getKernelResultType();\r\n    }\r\n\r\n    let requiredChannels = 0;\r\n    const returnTypes = functionBuilder.getReturnTypes();\r\n    for (let i = 0; i < returnTypes.length; i++) {\r\n      switch (returnTypes[i]) {\r\n        case 'Float':\r\n        case 'Number':\r\n        case 'Integer':\r\n          requiredChannels++;\r\n          break;\r\n        case 'Array(2)':\r\n          requiredChannels += 2;\r\n          break;\r\n        case 'Array(3)':\r\n          requiredChannels += 3;\r\n          break;\r\n        case 'Array(4)':\r\n          requiredChannels += 4;\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (features && requiredChannels > features.channelCount) {\r\n      throw new Error('Too many channels!');\r\n    }\r\n\r\n    return this.translatedSource = translatedSource;\r\n  }\r\n\r\n  setupArguments(args) {\r\n    this.kernelArguments = [];\r\n    this.argumentTextureCount = 0;\r\n    const needsArgumentTypes = this.argumentTypes === null;\r\n    // TODO: remove\r\n    if (needsArgumentTypes) {\r\n      this.argumentTypes = [];\r\n    }\r\n    this.argumentSizes = [];\r\n    this.argumentBitRatios = [];\r\n    // TODO: end remove\r\n\r\n    if (args.length < this.argumentNames.length) {\r\n      throw new Error('not enough arguments for kernel');\r\n    } else if (args.length > this.argumentNames.length) {\r\n      throw new Error('too many arguments for kernel');\r\n    }\r\n\r\n    const { context: gl } = this;\r\n    let textureIndexes = 0;\r\n    for (let index = 0; index < args.length; index++) {\r\n      const value = args[index];\r\n      const name = this.argumentNames[index];\r\n      let type;\r\n      if (needsArgumentTypes) {\r\n        type = utils.getVariableType(value, this.strictIntegers);\r\n        this.argumentTypes.push(type);\r\n      } else {\r\n        type = this.argumentTypes[index];\r\n      }\r\n      const KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? 'dynamic' : 'static', this.precision, args[index]);\r\n      if (KernelValue === null) {\r\n        return this.requestFallback(args);\r\n      }\r\n      const kernelArgument = new KernelValue(value, {\r\n        name,\r\n        type,\r\n        tactic: this.tactic,\r\n        origin: 'user',\r\n        context: gl,\r\n        checkContext: this.checkContext,\r\n        kernel: this,\r\n        strictIntegers: this.strictIntegers,\r\n        onRequestTexture: () => {\r\n          return this.context.createTexture();\r\n        },\r\n        onRequestIndex: () => {\r\n          return textureIndexes++;\r\n        },\r\n        onUpdateValueMismatch: () => {\r\n          this.switchingKernels = true;\r\n        },\r\n        onRequestContextHandle: () => {\r\n          return gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount++;\r\n        }\r\n      });\r\n      this.kernelArguments.push(kernelArgument);\r\n      this.argumentSizes.push(kernelArgument.textureSize);\r\n      this.argumentBitRatios[index] = kernelArgument.bitRatio;\r\n    }\r\n  }\r\n\r\n  setupConstants(args) {\r\n    const { context: gl } = this;\r\n    this.kernelConstants = [];\r\n    this.forceUploadKernelConstants = [];\r\n    let needsConstantTypes = this.constantTypes === null;\r\n    if (needsConstantTypes) {\r\n      this.constantTypes = {};\r\n    }\r\n    this.constantBitRatios = {};\r\n    let textureIndexes = 0;\r\n    for (const name in this.constants) {\r\n      const value = this.constants[name];\r\n      let type;\r\n      if (needsConstantTypes) {\r\n        type = utils.getVariableType(value, this.strictIntegers);\r\n        this.constantTypes[name] = type;\r\n      } else {\r\n        type = this.constantTypes[name];\r\n      }\r\n      const KernelValue = this.constructor.lookupKernelValueType(type, 'static', this.precision, value);\r\n      if (KernelValue === null) {\r\n        return this.requestFallback(args);\r\n      }\r\n      const kernelValue = new KernelValue(value, {\r\n        name,\r\n        type,\r\n        tactic: this.tactic,\r\n        origin: 'constants',\r\n        context: this.context,\r\n        checkContext: this.checkContext,\r\n        kernel: this,\r\n        strictIntegers: this.strictIntegers,\r\n        onRequestTexture: () => {\r\n          return this.context.createTexture();\r\n        },\r\n        onRequestIndex: () => {\r\n          return textureIndexes++;\r\n        },\r\n        onRequestContextHandle: () => {\r\n          return gl.TEXTURE0 + this.constantTextureCount++;\r\n        }\r\n      });\r\n      this.constantBitRatios[name] = kernelValue.bitRatio;\r\n      this.kernelConstants.push(kernelValue);\r\n      if (kernelValue.forceUploadEachRun) {\r\n        this.forceUploadKernelConstants.push(kernelValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  build() {\r\n    this.initExtensions();\r\n    this.validateSettings(arguments);\r\n    this.setupConstants(arguments);\r\n    if (this.fallbackRequested) return;\r\n    this.setupArguments(arguments);\r\n    if (this.fallbackRequested) return;\r\n    this.updateMaxTexSize();\r\n    this.translateSource();\r\n    const failureResult = this.pickRenderStrategy(arguments);\r\n    if (failureResult) {\r\n      return failureResult;\r\n    }\r\n    const { texSize, context: gl, canvas } = this;\r\n    gl.enable(gl.SCISSOR_TEST);\r\n    if (this.pipeline && this.precision === 'single') {\r\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\r\n      canvas.width = this.maxTexSize[0];\r\n      canvas.height = this.maxTexSize[1];\r\n    } else {\r\n      gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\r\n      canvas.width = this.maxTexSize[0];\r\n      canvas.height = this.maxTexSize[1];\r\n    }\r\n    const threadDim = this.threadDim = Array.from(this.output);\r\n    while (threadDim.length < 3) {\r\n      threadDim.push(1);\r\n    }\r\n\r\n    const compiledVertexShader = this.getVertexShader(arguments);\r\n    const vertShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertShader, compiledVertexShader);\r\n    gl.compileShader(vertShader);\r\n    this.vertShader = vertShader;\r\n\r\n    const compiledFragmentShader = this.getFragmentShader(arguments);\r\n    const fragShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragShader, compiledFragmentShader);\r\n    gl.compileShader(fragShader);\r\n    this.fragShader = fragShader;\r\n\r\n    if (this.debug) {\r\n      console.log('GLSL Shader Output:');\r\n      console.log(compiledFragmentShader);\r\n    }\r\n\r\n    if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\r\n      throw new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));\r\n    }\r\n    if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\r\n      throw new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));\r\n    }\r\n\r\n    const program = this.program = gl.createProgram();\r\n    gl.attachShader(program, vertShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    this.framebuffer = gl.createFramebuffer();\r\n    this.framebuffer.width = texSize[0];\r\n    this.framebuffer.height = texSize[1];\r\n\r\n    const vertices = new Float32Array([-1, -1,\r\n      1, -1, -1, 1,\r\n      1, 1\r\n    ]);\r\n    const texCoords = new Float32Array([\r\n      0, 0,\r\n      1, 0,\r\n      0, 1,\r\n      1, 1\r\n    ]);\r\n\r\n    const texCoordOffset = vertices.byteLength;\r\n\r\n    let buffer = this.buffer;\r\n    if (!buffer) {\r\n      buffer = this.buffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);\r\n    } else {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    }\r\n\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);\r\n\r\n    const aPosLoc = gl.getAttribLocation(this.program, 'aPos');\r\n    gl.enableVertexAttribArray(aPosLoc);\r\n    gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);\r\n    const aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');\r\n    gl.enableVertexAttribArray(aTexCoordLoc);\r\n    gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n\r\n    let i = 0;\r\n    gl.useProgram(this.program);\r\n    for (let p in this.constants) {\r\n      this.kernelConstants[i++].updateValue(this.constants[p]);\r\n    }\r\n\r\n    if (!this.immutable) {\r\n      this._setupOutputTexture();\r\n      if (\r\n        this.subKernels !== null &&\r\n        this.subKernels.length > 0\r\n      ) {\r\n        this._setupSubOutputTextures();\r\n      }\r\n    }\r\n  }\r\n\r\n  translateSource() {\r\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\r\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\r\n    });\r\n    this.translatedSource = functionBuilder.getPrototypeString('kernel');\r\n    if (!this.graphical && !this.returnType) {\r\n      this.returnType = functionBuilder.getKernelResultType();\r\n    }\r\n\r\n    if (this.subKernels && this.subKernels.length > 0) {\r\n      for (let i = 0; i < this.subKernels.length; i++) {\r\n        const subKernel = this.subKernels[i];\r\n        if (!subKernel.returnType) {\r\n          subKernel.returnType = functionBuilder.getSubKernelResultType(i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  run() {\r\n    const { kernelArguments, forceUploadKernelConstants } = this;\r\n    const texSize = this.texSize;\r\n    const gl = this.context;\r\n\r\n    gl.useProgram(this.program);\r\n    gl.scissor(0, 0, texSize[0], texSize[1]);\r\n\r\n    if (this.dynamicOutput) {\r\n      this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));\r\n      this.setUniform2iv('uTexSize', texSize);\r\n    }\r\n\r\n    this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\r\n\r\n    this.switchingKernels = false;\r\n    for (let i = 0; i < forceUploadKernelConstants.length; i++) {\r\n      const constant = forceUploadKernelConstants[i];\r\n      constant.updateValue(this.constants[constant.name]);\r\n      if (this.switchingKernels) return;\r\n    }\r\n    for (let i = 0; i < kernelArguments.length; i++) {\r\n      kernelArguments[i].updateValue(arguments[i]);\r\n      if (this.switchingKernels) return;\r\n    }\r\n\r\n    if (this.plugins) {\r\n      for (let i = 0; i < this.plugins.length; i++) {\r\n        const plugin = this.plugins[i];\r\n        if (plugin.onBeforeRun) {\r\n          plugin.onBeforeRun(this);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.graphical) {\r\n      if (this.pipeline) {\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        if (!this.outputTexture || this.immutable) {\r\n          this._setupOutputTexture();\r\n        }\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        return new this.TextureConstructor({\r\n          texture: this.outputTexture,\r\n          size: texSize,\r\n          dimensions: this.threadDim,\r\n          output: this.output,\r\n          context: this.context,\r\n        });\r\n      }\r\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n      return;\r\n    }\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    if (this.immutable) {\r\n      this._setupOutputTexture();\r\n    }\r\n\r\n    if (this.subKernels !== null) {\r\n      if (this.immutable) {\r\n        this._setupSubOutputTextures();\r\n      }\r\n      this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);\r\n    }\r\n\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n  }\r\n\r\n  /**\r\n   * @desc This return defined outputTexture, which is setup in .build(), or if immutable, is defined in .run()\r\n   * @returns {Object} Output Texture Cache\r\n   */\r\n  getOutputTexture() {\r\n    return this.outputTexture;\r\n  }\r\n\r\n  /**\r\n   * @desc Setup and replace output texture\r\n   */\r\n  _setupOutputTexture() {\r\n    const gl = this.context;\r\n    const texSize = this.texSize;\r\n    const texture = this.outputTexture = this.context.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    // if (this.precision === 'single') {\r\n    //   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n    // } else {\r\n    //   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    // }\r\n    if (this.precision === 'single') {\r\n      if (this.pipeline) {\r\n        // TODO: investigate if webgl1 can handle gl.RED usage in gl.texImage2D, otherwise, simplify the below\r\n        switch (this.returnType) {\r\n          case 'Number':\r\n          case 'Float':\r\n          case 'Integer':\r\n            if (this.optimizeFloatMemory) {\r\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n            } else {\r\n              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n            break;\r\n          case 'Array(3)':\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n            break;\r\n          case 'Array(4)':\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n            break;\r\n          default:\r\n            if (!this.graphical) {\r\n              throw new Error('Unhandled return type');\r\n            }\r\n        }\r\n      } else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n      }\r\n    } else {\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n  }\r\n\r\n  /**\r\n   * @desc Setup and replace sub-output textures\r\n   */\r\n  _setupSubOutputTextures() {\r\n    const gl = this.context;\r\n    const texSize = this.texSize;\r\n    this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\r\n    this.subKernelOutputTextures = [];\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      const texture = this.context.createTexture();\r\n      this.subKernelOutputTextures.push(texture);\r\n      this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\r\n      gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      if (this.precision === 'single') {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n      } else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      }\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Returns the Texture Cache of the supplied parameter (can be kernel, sub-kernel or argument)\r\n   * @param {String} name - Name of the subkernel, argument, or kernel.\r\n   * @returns {Object} Texture cache\r\n   */\r\n  getTextureCache(name) {\r\n    if (this.textureCache.hasOwnProperty(name)) {\r\n      return this.textureCache[name];\r\n    }\r\n    return this.textureCache[name] = this.context.createTexture();\r\n  }\r\n\r\n  /**\r\n   * @desc removes a texture from the kernel's cache\r\n   * @param {String} name - Name of texture\r\n   */\r\n  detachTextureCache(name) {\r\n    delete this.textureCache[name];\r\n  }\r\n\r\n  setUniform1f(name, value) {\r\n    if (this.uniform1fCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform1fCache[name];\r\n      if (value === cache) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform1fCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform1f(loc, value);\r\n  }\r\n\r\n  setUniform1i(name, value) {\r\n    if (this.uniform1iCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform1iCache[name];\r\n      if (value === cache) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform1iCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform1i(loc, value);\r\n  }\r\n\r\n  setUniform2f(name, value1, value2) {\r\n    if (this.uniform2fCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform2fCache[name];\r\n      if (\r\n        value1 === cache[0] &&\r\n        value2 === cache[1]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform2fCache[name] = [value1, value2];\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform2f(loc, value1, value2);\r\n  }\r\n\r\n  setUniform2fv(name, value) {\r\n    if (this.uniform2fvCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform2fvCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform2fvCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform2fv(loc, value);\r\n  }\r\n\r\n  setUniform2iv(name, value) {\r\n    if (this.uniform2ivCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform2ivCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform2ivCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform2iv(loc, value);\r\n  }\r\n\r\n  setUniform3fv(name, value) {\r\n    if (this.uniform3fvCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform3fvCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1] &&\r\n        value[2] === cache[2]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform3fvCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform3fv(loc, value);\r\n  }\r\n\r\n  setUniform3iv(name, value) {\r\n    if (this.uniform3ivCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform3ivCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1] &&\r\n        value[2] === cache[2]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform3ivCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform3iv(loc, value);\r\n  }\r\n\r\n  setUniform3fv(name, value) {\r\n    if (this.uniform3fvCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform3fvCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1] &&\r\n        value[2] === cache[2]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform3fvCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform3fv(loc, value);\r\n  }\r\n\r\n  setUniform4iv(name, value) {\r\n    if (this.uniform4ivCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform4ivCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1] &&\r\n        value[2] === cache[2] &&\r\n        value[3] === cache[3]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform4ivCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform4iv(loc, value);\r\n  }\r\n\r\n  setUniform4fv(name, value) {\r\n    if (this.uniform4fvCache.hasOwnProperty(name)) {\r\n      const cache = this.uniform4fvCache[name];\r\n      if (\r\n        value[0] === cache[0] &&\r\n        value[1] === cache[1] &&\r\n        value[2] === cache[2] &&\r\n        value[3] === cache[3]\r\n      ) {\r\n        return;\r\n      }\r\n    }\r\n    this.uniform4fvCache[name] = value;\r\n    const loc = this.getUniformLocation(name);\r\n    this.context.uniform4fv(loc, value);\r\n  }\r\n\r\n  /**\r\n   * @desc Return WebGlUniformLocation for various variables\r\n   * related to webGl program, such as user-defined variables,\r\n   * as well as, dimension sizes, etc.\r\n   */\r\n  getUniformLocation(name) {\r\n    if (this.programUniformLocationCache.hasOwnProperty(name)) {\r\n      return this.programUniformLocationCache[name];\r\n    }\r\n    return this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);\r\n  }\r\n\r\n  /**\r\n   * @desc Generate Shader artifacts for the kernel program.\r\n   * The final object contains HEADER, KERNEL, MAIN_RESULT, and others.\r\n   *\r\n   * @param {Array} args - The actual parameters sent to the Kernel\r\n   * @returns {Object} An object containing the Shader Artifacts(CONSTANTS, HEADER, KERNEL, etc.)\r\n   */\r\n  _getFragShaderArtifactMap(args) {\r\n    return {\r\n      HEADER: this._getHeaderString(),\r\n      LOOP_MAX: this._getLoopMaxString(),\r\n      PLUGINS: this._getPluginsString(),\r\n      CONSTANTS: this._getConstantsString(),\r\n      DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),\r\n      ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),\r\n      DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),\r\n      INJECTED_NATIVE: this._getInjectedNative(),\r\n      MAIN_CONSTANTS: this._getMainConstantsString(),\r\n      MAIN_ARGUMENTS: this._getMainArgumentsString(args),\r\n      KERNEL: this.getKernelString(),\r\n      MAIN_RESULT: this.getMainResultString(),\r\n      FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\r\n      INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\r\n      SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\r\n      SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @desc Generate Shader artifacts for the kernel program.\r\n   * The final object contains HEADER, KERNEL, MAIN_RESULT, and others.\r\n   *\r\n   * @param {Array} args - The actual parameters sent to the Kernel\r\n   * @returns {Object} An object containing the Shader Artifacts(CONSTANTS, HEADER, KERNEL, etc.)\r\n   */\r\n  _getVertShaderArtifactMap(args) {\r\n    return {\r\n      FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),\r\n      INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),\r\n      SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),\r\n      SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @desc Get the header string for the program.\r\n   * This returns an empty string if no sub-kernels are defined.\r\n   *\r\n   * @returns {String} result\r\n   */\r\n  _getHeaderString() {\r\n    return (\r\n      this.subKernels !== null ?\r\n      '#extension GL_EXT_draw_buffers : require\\n' :\r\n      ''\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @desc Get the maximum loop size String.\r\n   * @returns {String} result\r\n   */\r\n  _getLoopMaxString() {\r\n    return (\r\n      this.loopMaxIterations ?\r\n      ` ${parseInt(this.loopMaxIterations)};\\n` :\r\n      ' 1000;\\n'\r\n    );\r\n  }\r\n\r\n  _getPluginsString() {\r\n    if (!this.plugins) return '\\n';\r\n    return this.plugins.map(plugin => plugin.source && this.source.match(plugin.functionMatch) ? plugin.source : '').join('\\n');\r\n  }\r\n\r\n  /**\r\n   * @desc Generate transpiled glsl Strings for constant parameters sent to a kernel\r\n   * @returns {String} result\r\n   */\r\n  _getConstantsString() {\r\n    const result = [];\r\n    const { threadDim, texSize } = this;\r\n    if (this.dynamicOutput) {\r\n      result.push(\r\n        'uniform ivec3 uOutputDim',\r\n        'uniform ivec2 uTexSize'\r\n      );\r\n    } else {\r\n      result.push(\r\n        `ivec3 uOutputDim = ivec3(${threadDim[0]}, ${threadDim[1]}, ${threadDim[2]})`,\r\n        `ivec2 uTexSize = ivec2(${texSize[0]}, ${texSize[1]})`\r\n      );\r\n    }\r\n    return utils.linesToString(result);\r\n  }\r\n\r\n  /**\r\n   * @desc Get texture coordinate string for the program\r\n   * @returns {String} result\r\n   */\r\n  _getTextureCoordinate() {\r\n    const subKernels = this.subKernels;\r\n    if (subKernels === null || subKernels.length < 1) {\r\n      return 'varying vec2 vTexCoord;\\n';\r\n    } else {\r\n      return 'out vec2 vTexCoord;\\n';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Get Decode32 endianness string for little-endian and big-endian\r\n   * @returns {String} result\r\n   */\r\n  _getDecode32EndiannessString() {\r\n    return (\r\n      this.endianness === 'LE' ?\r\n      '' :\r\n      '  texel.rgba = texel.abgr;\\n'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @desc Get Encode32 endianness string for little-endian and big-endian\r\n   * @returns {String} result\r\n   */\r\n  _getEncode32EndiannessString() {\r\n    return (\r\n      this.endianness === 'LE' ?\r\n      '' :\r\n      '  texel.rgba = texel.abgr;\\n'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @desc if fixIntegerDivisionAccuracy provide method to replace /\r\n   * @returns {String} result\r\n   */\r\n  _getDivideWithIntegerCheckString() {\r\n    return this.fixIntegerDivisionAccuracy ?\r\n      `float div_with_int_check(float x, float y) {\r\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\r\n    return float(int(x)/int(y));\r\n  }\r\n  return x / y;\r\n}` :\r\n      '';\r\n  }\r\n\r\n  /**\r\n   * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\r\n   * @param {Array} args - The actual parameters sent to the Kernel\r\n   * @returns {String} result\r\n   */\r\n  _getMainArgumentsString(args) {\r\n    const results = [];\r\n    const { argumentNames } = this;\r\n    for (let i = 0; i < argumentNames.length; i++) {\r\n      results.push(this.kernelArguments[i].getSource(args[i]));\r\n    }\r\n    return results.join('');\r\n  }\r\n\r\n  _getInjectedNative() {\r\n    return this.injectedNative || '';\r\n  }\r\n\r\n  _getMainConstantsString() {\r\n    const result = [];\r\n    const { constants } = this;\r\n    if (constants) {\r\n      let i = 0;\r\n      for (const name in constants) {\r\n        result.push(this.kernelConstants[i++].getSource(this.constants[name]));\r\n      }\r\n    }\r\n    return result.join('');\r\n  }\r\n\r\n  /**\r\n   * @desc Get Kernel program string (in *glsl*) for a kernel.\r\n   * @returns {String} result\r\n   */\r\n  getKernelString() {\r\n    let kernelResultDeclaration;\r\n    switch (this.returnType) {\r\n      case 'Array(2)':\r\n        kernelResultDeclaration = 'vec2 kernelResult';\r\n        break;\r\n      case 'Array(3)':\r\n        kernelResultDeclaration = 'vec3 kernelResult';\r\n        break;\r\n      case 'Array(4)':\r\n        kernelResultDeclaration = 'vec4 kernelResult';\r\n        break;\r\n      case 'LiteralInteger':\r\n      case 'Float':\r\n      case 'Number':\r\n      case 'Integer':\r\n        kernelResultDeclaration = 'float kernelResult';\r\n        break;\r\n      default:\r\n        if (this.graphical) {\r\n          kernelResultDeclaration = 'float kernelResult';\r\n        } else {\r\n          throw new Error(`unrecognized output type \"${ this.returnType }\"`);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    const subKernels = this.subKernels;\r\n    if (subKernels !== null) {\r\n      result.push(\r\n        kernelResultDeclaration\r\n      );\r\n      switch (this.returnType) {\r\n        case 'Number':\r\n        case 'Float':\r\n        case 'Integer':\r\n          for (let i = 0; i < subKernels.length; i++) {\r\n            const subKernel = subKernels[i];\r\n            result.push(\r\n              subKernel.returnType === 'Integer' ?\r\n              `int subKernelResult_${ subKernel.name } = 0` :\r\n              `float subKernelResult_${ subKernel.name } = 0.0`\r\n            );\r\n          }\r\n          break;\r\n        case 'Array(2)':\r\n          for (let i = 0; i < subKernels.length; i++) {\r\n            result.push(\r\n              `vec2 subKernelResult_${ subKernels[i].name }`\r\n            );\r\n          }\r\n          break;\r\n        case 'Array(3)':\r\n          for (let i = 0; i < subKernels.length; i++) {\r\n            result.push(\r\n              `vec3 subKernelResult_${ subKernels[i].name }`\r\n            );\r\n          }\r\n          break;\r\n        case 'Array(4)':\r\n          for (let i = 0; i < subKernels.length; i++) {\r\n            result.push(\r\n              `vec4 subKernelResult_${ subKernels[i].name }`\r\n            );\r\n          }\r\n          break;\r\n      }\r\n    } else {\r\n      result.push(\r\n        kernelResultDeclaration\r\n      );\r\n    }\r\n\r\n    return utils.linesToString(result) + this.translatedSource;\r\n  }\r\n\r\n  getMainResultGraphical() {\r\n    return utils.linesToString([\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  gl_FragColor = actualColor',\r\n    ]);\r\n  }\r\n\r\n  getMainResultPackedPixels() {\r\n    switch (this.returnType) {\r\n      case 'LiteralInteger':\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n        return this.getMainResultKernelPackedPixels() +\r\n          this.getMainResultSubKernelPackedPixels();\r\n      default:\r\n        throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {String}\r\n   */\r\n  getMainResultKernelPackedPixels() {\r\n    return utils.linesToString([\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      `  gl_FragData[0] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(kernelResult)`\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * @return {String}\r\n   */\r\n  getMainResultSubKernelPackedPixels() {\r\n    const result = [];\r\n    if (!this.subKernels) return '';\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      const subKernel = this.subKernels[i];\r\n      if (subKernel.returnType === 'Integer') {\r\n        result.push(\r\n          `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(float(subKernelResult_${this.subKernels[i].name}))`\r\n        );\r\n      } else {\r\n        result.push(\r\n          `  gl_FragData[${i + 1}] = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(subKernelResult_${this.subKernels[i].name})`\r\n        );\r\n      }\r\n    }\r\n    return utils.linesToString(result);\r\n  }\r\n\r\n  getMainResultMemoryOptimizedFloats() {\r\n    const result = [\r\n      '  index *= 4',\r\n    ];\r\n\r\n    switch (this.returnType) {\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n        const channels = ['r', 'g', 'b', 'a'];\r\n        for (let i = 0; i < channels.length; i++) {\r\n          const channel = channels[i];\r\n          this.getMainResultKernelMemoryOptimizedFloats(result, channel);\r\n          this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\r\n          if (i + 1 < channels.length) {\r\n            result.push('  index += 1');\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\r\n    }\r\n\r\n    return utils.linesToString(result);\r\n  }\r\n\r\n  getMainResultKernelMemoryOptimizedFloats(result, channel) {\r\n    result.push(\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      `  gl_FragData[0].${channel} = kernelResult`,\r\n    );\r\n  }\r\n\r\n  getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      const subKernel = this.subKernels[i];\r\n      if (subKernel.returnType === 'Integer') {\r\n        result.push(\r\n          `  gl_FragData[${i + 1}].${channel} = float(subKernelResult_${this.subKernels[i].name})`,\r\n        );\r\n      } else {\r\n        result.push(\r\n          `  gl_FragData[${i + 1}].${channel} = subKernelResult_${this.subKernels[i].name}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  getMainResultKernelNumberTexture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  gl_FragData[0][0] = kernelResult',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelNumberTexture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      const subKernel = this.subKernels[i];\r\n      if (subKernel.returnType === 'Integer') {\r\n        result.push(\r\n          `  gl_FragData[${i + 1}][0] = float(subKernelResult_${subKernel.name})`,\r\n        );\r\n      } else {\r\n        result.push(\r\n          `  gl_FragData[${i + 1}][0] = subKernelResult_${subKernel.name}`,\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getMainResultKernelArray2Texture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  gl_FragData[0][0] = kernelResult[0]',\r\n      '  gl_FragData[0][1] = kernelResult[1]',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelArray2Texture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      result.push(\r\n        `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\r\n        `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getMainResultKernelArray3Texture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  gl_FragData[0][0] = kernelResult[0]',\r\n      '  gl_FragData[0][1] = kernelResult[1]',\r\n      '  gl_FragData[0][2] = kernelResult[2]',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelArray3Texture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      result.push(\r\n        `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\r\n        `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\r\n        `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getMainResultKernelArray4Texture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  gl_FragData[0] = kernelResult',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelArray4Texture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    switch (this.returnType) {\r\n      case 'Number':\r\n      case 'Float':\r\n      case 'Integer':\r\n        for (let i = 0; i < this.subKernels.length; ++i) {\r\n          const subKernel = this.subKernels[i];\r\n          if (subKernel.returnType === 'Integer') {\r\n            result.push(\r\n              `  gl_FragData[${i + 1}] = float(subKernelResult_${this.subKernels[i].name})`,\r\n            );\r\n          } else {\r\n            result.push(\r\n              `  gl_FragData[${i + 1}] = subKernelResult_${this.subKernels[i].name}`,\r\n            );\r\n          }\r\n        }\r\n        break;\r\n      case 'Array(2)':\r\n        for (let i = 0; i < this.subKernels.length; ++i) {\r\n          result.push(\r\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\r\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\r\n          );\r\n        }\r\n        break;\r\n      case 'Array(3)':\r\n        for (let i = 0; i < this.subKernels.length; ++i) {\r\n          result.push(\r\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\r\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\r\n            `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,\r\n          );\r\n        }\r\n        break;\r\n      case 'Array(4)':\r\n        for (let i = 0; i < this.subKernels.length; ++i) {\r\n          result.push(\r\n            `  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\r\n            `  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\r\n            `  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,\r\n            `  gl_FragData[${i + 1}][3] = subKernelResult_${this.subKernels[i].name}[3]`,\r\n          );\r\n        }\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @param {String} src - Shader string\r\n   * @param {Object} map - Variables/Constants associated with shader\r\n   */\r\n  replaceArtifacts(src, map) {\r\n    return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\\n/g, (match, artifact) => {\r\n      if (map.hasOwnProperty(artifact)) {\r\n        return map[artifact];\r\n      }\r\n      throw `unhandled artifact ${artifact}`;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @desc Get the fragment shader String.\r\n   * If the String hasn't been compiled yet,\r\n   * then this method compiles it as well\r\n   *\r\n   * @param {Array} args - The actual parameters sent to the Kernel\r\n   * @returns {string} Fragment Shader string\r\n   */\r\n  getFragmentShader(args) {\r\n    if (this.compiledFragmentShader !== null) {\r\n      return this.compiledFragmentShader;\r\n    }\r\n    return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));\r\n  }\r\n\r\n  /**\r\n   * @desc Get the vertical shader String\r\n   * @param {Array|IArguments} args - The actual parameters sent to the Kernel\r\n   * @returns {string} Vertical Shader string\r\n   */\r\n  getVertexShader(args) {\r\n    if (this.compiledVertexShader !== null) {\r\n      return this.compiledVertexShader;\r\n    }\r\n    return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));\r\n  }\r\n\r\n  /**\r\n   * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\r\n   */\r\n  toString() {\r\n    const setupContextString = utils.linesToString([\r\n      `const gl = context`,\r\n    ]);\r\n    return glKernelString(this.constructor, arguments, this, setupContextString);\r\n  }\r\n\r\n  destroy(removeCanvasReferences) {\r\n    if (this.outputTexture) {\r\n      this.context.deleteTexture(this.outputTexture);\r\n    }\r\n    if (this.buffer) {\r\n      this.context.deleteBuffer(this.buffer);\r\n    }\r\n    if (this.framebuffer) {\r\n      this.context.deleteFramebuffer(this.framebuffer);\r\n    }\r\n    if (this.vertShader) {\r\n      this.context.deleteShader(this.vertShader);\r\n    }\r\n    if (this.fragShader) {\r\n      this.context.deleteShader(this.fragShader);\r\n    }\r\n    if (this.program) {\r\n      this.context.deleteProgram(this.program);\r\n    }\r\n\r\n    const keys = Object.keys(this.textureCache);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const name = keys[i];\r\n      this.context.deleteTexture(this.textureCache[name]);\r\n    }\r\n\r\n    if (this.subKernelOutputTextures) {\r\n      for (let i = 0; i < this.subKernelOutputTextures.length; i++) {\r\n        this.context.deleteTexture(this.subKernelOutputTextures[i]);\r\n      }\r\n    }\r\n    if (removeCanvasReferences) {\r\n      const idx = canvases.indexOf(this.canvas);\r\n      if (idx >= 0) {\r\n        canvases[idx] = null;\r\n        maxTexSizes[idx] = null;\r\n      }\r\n    }\r\n    this.destroyExtensions();\r\n    delete this.context;\r\n    delete this.canvas;\r\n  }\r\n\r\n  destroyExtensions() {\r\n    this.extensions.OES_texture_float = null;\r\n    this.extensions.OES_texture_float_linear = null;\r\n    this.extensions.OES_element_index_uint = null;\r\n    this.extensions.WEBGL_draw_buffers = null;\r\n  }\r\n\r\n  static destroyContext(context) {\r\n    const extension = context.getExtension('WEBGL_lose_context');\r\n    if (extension) {\r\n      extension.loseContext();\r\n    }\r\n  }\r\n\r\n  toJSON() {\r\n    const json = super.toJSON();\r\n    json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();\r\n    return json;\r\n  }\r\n}\r\n","import { WebGLFunctionNode } from '../web-gl/function-node';\r\n\r\n/**\r\n * @class WebGL2FunctionNode\r\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to toString its respective webGL code.\r\n * @extends WebGLFunctionNode\r\n * @returns the converted webGL function string\r\n */\r\nexport class WebGL2FunctionNode extends WebGLFunctionNode {\r\n\r\n  /**\r\n   * @desc Parses the abstract syntax tree for *identifier* expression\r\n   * @param {Object} idtNode - An ast Node\r\n   * @param {Array} retArr - return array string\r\n   * @returns {Array} the append retArr\r\n   */\r\n  astIdentifierExpression(idtNode, retArr) {\r\n    if (idtNode.type !== 'Identifier') {\r\n      throw this.astErrorOutput(\r\n        'IdentifierExpression - not an Identifier',\r\n        idtNode\r\n      );\r\n    }\r\n\r\n    const type = this.getType(idtNode);\r\n\r\n    if (idtNode.name === 'Infinity') {\r\n      retArr.push('intBitsToFloat(2139095039)');\r\n    } else if (type === 'Boolean') {\r\n      if (this.argumentNames.indexOf(idtNode.name) > -1) {\r\n        retArr.push(`bool(user_${idtNode.name})`);\r\n      } else {\r\n        retArr.push(`user_${idtNode.name}`);\r\n      }\r\n    } else {\r\n      retArr.push(`user_${idtNode.name}`);\r\n    }\r\n\r\n    return retArr;\r\n  }\r\n}\r\n","// language=GLSL\r\nexport const fragmentShader = `#version 300 es\r\n__HEADER__;\r\n__FLOAT_TACTIC_DECLARATION__;\r\n__INT_TACTIC_DECLARATION__;\r\n__SAMPLER_2D_TACTIC_DECLARATION__;\r\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\r\n\r\nconst int LOOP_MAX = __LOOP_MAX__;\r\n\r\n__PLUGINS__;\r\n__CONSTANTS__;\r\n\r\nin vec2 vTexCoord;\r\n\r\nconst int BIT_COUNT = 32;\r\nint modi(int x, int y) {\r\n  return x - y * (x / y);\r\n}\r\n\r\nint bitwiseOr(int a, int b) {\r\n  int result = 0;\r\n  int n = 1;\r\n\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    b = b / 2;\r\n    n = n * 2;\r\n    if(!(a > 0 || b > 0)) {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nint bitwiseXOR(int a, int b) {\r\n  int result = 0;\r\n  int n = 1;\r\n\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    b = b / 2;\r\n    n = n * 2;\r\n    if(!(a > 0 || b > 0)) {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nint bitwiseAnd(int a, int b) {\r\n  int result = 0;\r\n  int n = 1;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    b = b / 2;\r\n    n = n * 2;\r\n    if(!(a > 0 && b > 0)) {\r\n      break;\r\n    }\r\n  }\r\n  return result;\r\n}\r\nint bitwiseNot(int a) {\r\n  int result = 0;\r\n  int n = 1;\r\n\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (modi(a, 2) == 0) {\r\n      result += n;\r\n    }\r\n    a = a / 2;\r\n    n = n * 2;\r\n  }\r\n  return result;\r\n}\r\nint bitwiseZeroFillLeftShift(int n, int shift) {\r\n  int maxBytes = BIT_COUNT;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (maxBytes >= n) {\r\n      break;\r\n    }\r\n    maxBytes *= 2;\r\n  }\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= shift) {\r\n      break;\r\n    }\r\n    n *= 2;\r\n  }\r\n\r\n  int result = 0;\r\n  int byteVal = 1;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= maxBytes) break;\r\n    if (modi(n, 2) > 0) { result += byteVal; }\r\n    n = int(n / 2);\r\n    byteVal *= 2;\r\n  }\r\n  return result;\r\n}\r\n\r\nint bitwiseSignedRightShift(int num, int shifts) {\r\n  return int(floor(float(num) / pow(2.0, float(shifts))));\r\n}\r\n\r\nint bitwiseZeroFillRightShift(int n, int shift) {\r\n  int maxBytes = BIT_COUNT;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (maxBytes >= n) {\r\n      break;\r\n    }\r\n    maxBytes *= 2;\r\n  }\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= shift) {\r\n      break;\r\n    }\r\n    n /= 2;\r\n  }\r\n  int result = 0;\r\n  int byteVal = 1;\r\n  for (int i = 0; i < BIT_COUNT; i++) {\r\n    if (i >= maxBytes) break;\r\n    if (modi(n, 2) > 0) { result += byteVal; }\r\n    n = int(n / 2);\r\n    byteVal *= 2;\r\n  }\r\n  return result;\r\n}\r\n\r\nvec2 integerMod(vec2 x, float y) {\r\n  vec2 res = floor(mod(x, y));\r\n  return res * step(1.0 - floor(y), -res);\r\n}\r\n\r\nvec3 integerMod(vec3 x, float y) {\r\n  vec3 res = floor(mod(x, y));\r\n  return res * step(1.0 - floor(y), -res);\r\n}\r\n\r\nvec4 integerMod(vec4 x, vec4 y) {\r\n  vec4 res = floor(mod(x, y));\r\n  return res * step(1.0 - floor(y), -res);\r\n}\r\n\r\nfloat integerMod(float x, float y) {\r\n  float res = floor(mod(x, y));\r\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\r\n}\r\n\r\nint integerMod(int x, int y) {\r\n  return x - (y * int(x/y));\r\n}\r\n\r\n__DIVIDE_WITH_INTEGER_CHECK__;\r\n\r\n// Here be dragons!\r\n// DO NOT OPTIMIZE THIS CODE\r\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\r\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\r\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\r\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\r\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\r\nfloat decode32(vec4 texel) {\r\n  __DECODE32_ENDIANNESS__;\r\n  texel *= 255.0;\r\n  vec2 gte128;\r\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\r\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\r\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\r\n  float res = exp2(round(exponent));\r\n  texel.b = texel.b - 128.0 * gte128.x;\r\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\r\n  res *= gte128.y * -2.0 + 1.0;\r\n  return res;\r\n}\r\n\r\nfloat decode16(vec4 texel, int index) {\r\n  int channel = integerMod(index, 2);\r\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\r\n}\r\n\r\nfloat decode8(vec4 texel, int index) {\r\n  int channel = integerMod(index, 4);\r\n  return texel[channel] * 255.0;\r\n}\r\n\r\nvec4 legacyEncode32(float f) {\r\n  float F = abs(f);\r\n  float sign = f < 0.0 ? 1.0 : 0.0;\r\n  float exponent = floor(log2(F));\r\n  float mantissa = (exp2(-exponent) * F);\r\n  // exponent += floor(log2(mantissa));\r\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\r\n  texel.rg = integerMod(texel.rg, 256.0);\r\n  texel.b = integerMod(texel.b, 128.0);\r\n  texel.a = exponent*0.5 + 63.5;\r\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\r\n  texel = floor(texel);\r\n  texel *= 0.003921569; // 1/255\r\n  __ENCODE32_ENDIANNESS__;\r\n  return texel;\r\n}\r\n\r\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\r\nvec4 encode32(float value) {\r\n  if (value == 0.0) return vec4(0, 0, 0, 0);\r\n\r\n  float exponent;\r\n  float mantissa;\r\n  vec4  result;\r\n  float sgn;\r\n\r\n  sgn = step(0.0, -value);\r\n  value = abs(value);\r\n\r\n  exponent = floor(log2(value));\r\n\r\n  mantissa = value*pow(2.0, -exponent)-1.0;\r\n  exponent = exponent+127.0;\r\n  result   = vec4(0,0,0,0);\r\n\r\n  result.a = floor(exponent/2.0);\r\n  exponent = exponent - result.a*2.0;\r\n  result.a = result.a + 128.0*sgn;\r\n\r\n  result.b = floor(mantissa * 128.0);\r\n  mantissa = mantissa - result.b / 128.0;\r\n  result.b = result.b + exponent*128.0;\r\n\r\n  result.g = floor(mantissa*32768.0);\r\n  mantissa = mantissa - result.g/32768.0;\r\n\r\n  result.r = floor(mantissa*8388608.0);\r\n  return result/255.0;\r\n}\r\n// Dragons end here\r\n\r\nint index;\r\nivec3 threadId;\r\n\r\nivec3 indexTo3D(int idx, ivec3 texDim) {\r\n  int z = int(idx / (texDim.x * texDim.y));\r\n  idx -= z * int(texDim.x * texDim.y);\r\n  int y = int(idx / texDim.x);\r\n  int x = int(integerMod(idx, texDim.x));\r\n  return ivec3(x, y, z);\r\n}\r\n\r\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture(tex, st / vec2(texSize));\r\n  return decode32(texel);\r\n}\r\n\r\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + (texDim.x * (y + (texDim.y * z)));\r\n  int w = texSize.x * 2;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\r\n  return decode16(texel, index);\r\n}\r\n\r\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + (texDim.x * (y + (texDim.y * z)));\r\n  int w = texSize.x * 4;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\r\n  return decode8(texel, index);\r\n}\r\n\r\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + (texDim.x * (y + (texDim.y * z)));\r\n  int channel = integerMod(index, 4);\r\n  index = index / 4;\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  index = index / 4;\r\n  vec4 texel = texture(tex, st / vec2(texSize));\r\n  return texel[channel];\r\n}\r\n\r\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  return texture(tex, st / vec2(texSize));\r\n}\r\n\r\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  return texture(tex, vec3(st / vec2(texSize), z));\r\n}\r\n\r\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\r\n  return result[0];\r\n}\r\n\r\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\r\n  return vec2(result[0], result[1]);\r\n}\r\n\r\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int channel = integerMod(index, 2);\r\n  index = index / 2;\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture(tex, st / vec2(texSize));\r\n  if (channel == 0) return vec2(texel.r, texel.g);\r\n  if (channel == 1) return vec2(texel.b, texel.a);\r\n  return vec2(0.0, 0.0);\r\n}\r\n\r\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\r\n  return vec3(result[0], result[1], result[2]);\r\n}\r\n\r\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\r\n  int vectorIndex = fieldIndex / 4;\r\n  int vectorOffset = fieldIndex - vectorIndex * 4;\r\n  int readY = vectorIndex / texSize.x;\r\n  int readX = vectorIndex - readY * texSize.x;\r\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\r\n\r\n  if (vectorOffset == 0) {\r\n    return tex1.xyz;\r\n  } else if (vectorOffset == 1) {\r\n    return tex1.yzw;\r\n  } else {\r\n    readX++;\r\n    if (readX >= texSize.x) {\r\n      readX = 0;\r\n      readY++;\r\n    }\r\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\r\n    if (vectorOffset == 2) {\r\n      return vec3(tex1.z, tex1.w, tex2.x);\r\n    } else {\r\n      return vec3(tex1.w, tex2.x, tex2.y);\r\n    }\r\n  }\r\n}\r\n\r\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  return getImage2D(tex, texSize, texDim, z, y, x);\r\n}\r\n\r\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\r\n  int index = x + texDim.x * (y + texDim.y * z);\r\n  int channel = integerMod(index, 2);\r\n  int w = texSize.x;\r\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\r\n  vec4 texel = texture(tex, st / vec2(texSize));\r\n  return vec4(texel.r, texel.g, texel.b, texel.a);\r\n}\r\n\r\nvec4 actualColor;\r\nvoid color(float r, float g, float b, float a) {\r\n  actualColor = vec4(r,g,b,a);\r\n}\r\n\r\nvoid color(float r, float g, float b) {\r\n  color(r,g,b,1.0);\r\n}\r\n\r\n__INJECTED_NATIVE__;\r\n__MAIN_CONSTANTS__;\r\n__MAIN_ARGUMENTS__;\r\n__KERNEL__;\r\n\r\nvoid main(void) {\r\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\r\n  __MAIN_RESULT__;\r\n}`;\r\n","// language=GLSL\r\nexport const vertexShader = `#version 300 es\r\n__FLOAT_TACTIC_DECLARATION__;\r\n__INT_TACTIC_DECLARATION__;\r\n__SAMPLER_2D_TACTIC_DECLARATION__;\r\n\r\nin vec2 aPos;\r\nin vec2 aTexCoord;\r\n\r\nout vec2 vTexCoord;\r\nuniform vec2 ratio;\r\n\r\nvoid main(void) {\r\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\r\n  vTexCoord = aTexCoord;\r\n}`;\r\n","import { WebGLKernelValueBoolean } from '../../web-gl/kernel-value/boolean';\r\n\r\nexport class WebGL2KernelValueBoolean extends WebGLKernelValueBoolean {}\r\n","import { WebGLKernelValueFloat } from '../../web-gl/kernel-value/float';\r\n\r\nexport class WebGL2KernelValueFloat extends WebGLKernelValueFloat {}\r\n","import { WebGLKernelValueInteger } from '../../web-gl/kernel-value/integer';\r\n\r\nexport class WebGL2KernelValueInteger extends WebGLKernelValueInteger {\r\n  getSource(value) {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    if (this.origin === 'constants') {\r\n      return `const ${ variablePrecision } int ${this.id} = ${ parseInt(value) };\\n`;\r\n    }\r\n    return `uniform ${ variablePrecision } int ${this.id};\\n`;\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (this.origin === 'constants') return;\r\n    this.kernel.setUniform1i(this.id, this.uploadValue = value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueHTMLImage } from '../../web-gl/kernel-value/html-image';\r\n\r\nexport class WebGL2KernelValueHTMLImage extends WebGLKernelValueHTMLImage {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueDynamicHTMLImage } from '../../web-gl/kernel-value/dynamic-html-image';\r\n\r\nexport class WebGL2KernelValueDynamicHTMLImage extends WebGLKernelValueDynamicHTMLImage {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValue } from '../../web-gl/kernel-value/index';\r\n\r\nexport class WebGL2KernelValueHTMLImageArray extends WebGLKernelValue {\r\n  constructor(value, settings) {\r\n    super(value, settings);\r\n    this.checkSize(value[0].width, value[0].height);\r\n    this.requestTexture();\r\n    this.dimensions = [value[0].width, value[0].height, value.length];\r\n    this.textureSize = [value[0].width, value[0].height];\r\n  }\r\n  getStringValueHandler() {\r\n    return `const uploadValue_${this.name} = ${this.varName};\\n`;\r\n  }\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2DArray ${this.id}`,\r\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(images) {\r\n    const { context: gl } = this;\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n    // Upload the images into the texture.\r\n    gl.texImage3D(\r\n      gl.TEXTURE_2D_ARRAY,\r\n      0,\r\n      gl.RGBA,\r\n      images[0].width,\r\n      images[0].height,\r\n      images.length,\r\n      0,\r\n      gl.RGBA,\r\n      gl.UNSIGNED_BYTE,\r\n      null\r\n    );\r\n    for (let i = 0; i < images.length; i++) {\r\n      const xOffset = 0;\r\n      const yOffset = 0;\r\n      const imageDepth = 1;\r\n      gl.texSubImage3D(\r\n        gl.TEXTURE_2D_ARRAY,\r\n        0,\r\n        xOffset,\r\n        yOffset,\r\n        i,\r\n        images[i].width,\r\n        images[i].height,\r\n        imageDepth,\r\n        gl.RGBA,\r\n        gl.UNSIGNED_BYTE,\r\n        this.uploadValue = images[i]\r\n      );\r\n    }\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { WebGL2KernelValueHTMLImageArray } from './html-image-array';\r\n\r\nexport class WebGL2KernelValueDynamicHTMLImageArray extends WebGL2KernelValueHTMLImageArray {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2DArray ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(images) {\r\n    const { width, height } = images[0];\r\n    this.checkSize(width, height);\r\n    this.dimensions = [width, height, images.length];\r\n    this.textureSize = [width, height];\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(images);\r\n  }\r\n}\r\n","import { WebGL2KernelValueHTMLImage } from './html-image';\r\n\r\nexport class WebGL2KernelValueHTMLVideo extends WebGL2KernelValueHTMLImage {}\r\n","import { WebGL2KernelValueDynamicHTMLImage } from './dynamic-html-image';\r\n\r\nexport class WebGL2KernelValueDynamicHTMLVideo extends WebGL2KernelValueDynamicHTMLImage {}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleInput } from '../../web-gl/kernel-value/single-input';\r\n\r\nexport class WebGL2KernelValueSingleInput extends WebGLKernelValueSingleInput {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(input) {\r\n    const { context: gl } = this;\r\n    utils.flattenTo(input.value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueDynamicMemoryOptimizedNumberTexture } from '../../web-gl/kernel-value/dynamic-memory-optimized-number-texture';\r\n\r\nexport class WebGL2KernelValueDynamicMemoryOptimizedNumberTexture extends WebGLKernelValueDynamicMemoryOptimizedNumberTexture {\r\n  getSource() {\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${this.id}`,\r\n      `uniform ivec2 ${this.sizeId}`,\r\n      `uniform ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueNumberTexture } from '../../web-gl/kernel-value/number-texture';\r\n\r\nexport class WebGL2KernelValueNumberTexture extends WebGLKernelValueNumberTexture {\r\n  getSource() {\r\n    const { id, sizeId, textureSize, dimensionsId, dimensions } = this;\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${id}`,\r\n      `${ variablePrecision } ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueDynamicNumberTexture } from '../../web-gl/kernel-value/dynamic-number-texture';\r\n\r\nexport class WebGL2KernelValueDynamicNumberTexture extends WebGLKernelValueDynamicNumberTexture {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray } from '../../web-gl/kernel-value/single-array';\r\n\r\nexport class WebGL2KernelValueSingleArray extends WebGLKernelValueSingleArray {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray1DI } from '../../web-gl/kernel-value/single-array1d-i';\r\n\r\nexport class WebGL2KernelValueSingleArray1DI extends WebGLKernelValueSingleArray1DI {\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGL2KernelValueSingleArray1DI } from '../../web-gl2/kernel-value/single-array1d-i';\r\n\r\nexport class WebGL2KernelValueDynamicSingleArray1DI extends WebGL2KernelValueSingleArray1DI {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.setShape(value);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray2DI } from '../../web-gl/kernel-value/single-array2d-i';\r\n\r\nexport class WebGL2KernelValueSingleArray2DI extends WebGLKernelValueSingleArray2DI {\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGL2KernelValueSingleArray2DI } from '../../web-gl2/kernel-value/single-array2d-i';\r\n\r\nexport class WebGL2KernelValueDynamicSingleArray2DI extends WebGL2KernelValueSingleArray2DI {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.setShape(value);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueSingleArray3DI } from '../../web-gl/kernel-value/single-array3d-i';\r\n\r\nexport class WebGL2KernelValueSingleArray3DI extends WebGLKernelValueSingleArray3DI {\r\n  updateValue(value) {\r\n    if (value.constructor !== this.initialValueConstructor) {\r\n      this.onUpdateValueMismatch();\r\n      return;\r\n    }\r\n    const { context: gl } = this;\r\n    utils.flattenTo(value, this.uploadValue);\r\n    gl.activeTexture(this.contextHandle);\r\n    gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);\r\n    this.kernel.setUniform1i(this.id, this.index);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGL2KernelValueSingleArray3DI } from '../../web-gl2/kernel-value/single-array3d-i';\r\n\r\nexport class WebGL2KernelValueDynamicSingleArray3DI extends WebGL2KernelValueSingleArray3DI {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.setShape(value);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { WebGLKernelValueSingleArray2 } from '../../web-gl/kernel-value/single-array2';\r\n\r\nexport class WebGL2KernelValueSingleArray2 extends WebGLKernelValueSingleArray2 {}\r\n","import { WebGLKernelValueSingleArray3 } from '../../web-gl/kernel-value/single-array3';\r\n\r\nexport class WebGL2KernelValueSingleArray3 extends WebGLKernelValueSingleArray3 {}\r\n","import { WebGLKernelValueSingleArray4 } from '../../web-gl/kernel-value/single-array4';\r\n\r\nexport class WebGL2KernelValueSingleArray4 extends WebGLKernelValueSingleArray4 {}\r\n","import { WebGL2KernelValueBoolean } from './kernel-value/boolean';\r\nimport { WebGL2KernelValueFloat } from './kernel-value/float';\r\nimport { WebGL2KernelValueInteger } from './kernel-value/integer';\r\n\r\nimport { WebGL2KernelValueHTMLImage } from './kernel-value/html-image';\r\nimport { WebGL2KernelValueDynamicHTMLImage } from './kernel-value/dynamic-html-image';\r\n\r\nimport { WebGL2KernelValueHTMLImageArray } from './kernel-value/html-image-array';\r\nimport { WebGL2KernelValueDynamicHTMLImageArray } from './kernel-value/dynamic-html-image-array';\r\n\r\nimport { WebGL2KernelValueHTMLVideo } from './kernel-value/html-video';\r\nimport { WebGL2KernelValueDynamicHTMLVideo } from './kernel-value/dynamic-html-video';\r\n\r\nimport { WebGL2KernelValueSingleInput } from './kernel-value/single-input';\r\nimport { WebGL2KernelValueDynamicSingleInput } from './kernel-value/dynamic-single-input';\r\n\r\nimport { WebGL2KernelValueUnsignedInput } from './kernel-value/unsigned-input';\r\nimport { WebGL2KernelValueDynamicUnsignedInput } from './kernel-value/dynamic-unsigned-input';\r\n\r\nimport { WebGL2KernelValueMemoryOptimizedNumberTexture } from './kernel-value/memory-optimized-number-texture';\r\nimport { WebGL2KernelValueDynamicMemoryOptimizedNumberTexture } from './kernel-value/dynamic-memory-optimized-number-texture';\r\n\r\nimport { WebGL2KernelValueNumberTexture } from './kernel-value/number-texture';\r\nimport { WebGL2KernelValueDynamicNumberTexture } from './kernel-value/dynamic-number-texture';\r\n\r\nimport { WebGL2KernelValueSingleArray } from './kernel-value/single-array';\r\nimport { WebGL2KernelValueDynamicSingleArray } from './kernel-value/dynamic-single-array';\r\n\r\nimport { WebGL2KernelValueSingleArray1DI } from './kernel-value/single-array1d-i';\r\nimport { WebGL2KernelValueDynamicSingleArray1DI } from './kernel-value/dynamic-single-array1d-i';\r\n\r\nimport { WebGL2KernelValueSingleArray2DI } from './kernel-value/single-array2d-i';\r\nimport { WebGL2KernelValueDynamicSingleArray2DI } from './kernel-value/dynamic-single-array2d-i';\r\n\r\nimport { WebGL2KernelValueSingleArray3DI } from './kernel-value/single-array3d-i';\r\nimport { WebGL2KernelValueDynamicSingleArray3DI } from './kernel-value/dynamic-single-array3d-i';\r\n\r\nimport { WebGL2KernelValueSingleArray2 } from './kernel-value/single-array2';\r\nimport { WebGL2KernelValueSingleArray3 } from './kernel-value/single-array3';\r\nimport { WebGL2KernelValueSingleArray4 } from './kernel-value/single-array4';\r\n\r\nimport { WebGL2KernelValueUnsignedArray } from './kernel-value/unsigned-array';\r\nimport { WebGL2KernelValueDynamicUnsignedArray } from './kernel-value/dynamic-unsigned-array';\r\n\r\nexport const kernelValueMaps = {\r\n  unsigned: {\r\n    dynamic: {\r\n      'Boolean': WebGL2KernelValueBoolean,\r\n      'Integer': WebGL2KernelValueInteger,\r\n      'Float': WebGL2KernelValueFloat,\r\n      'Array': WebGL2KernelValueDynamicUnsignedArray,\r\n      'Array(2)': false,\r\n      'Array(3)': false,\r\n      'Array(4)': false,\r\n      'Array1D(2)': false,\r\n      'Array1D(3)': false,\r\n      'Array1D(4)': false,\r\n      'Array2D(2)': false,\r\n      'Array2D(3)': false,\r\n      'Array2D(4)': false,\r\n      'Array3D(2)': false,\r\n      'Array3D(3)': false,\r\n      'Array3D(4)': false,\r\n      'Input': WebGL2KernelValueDynamicUnsignedInput,\r\n      'NumberTexture': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGL2KernelValueDynamicHTMLImage,\r\n      'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,\r\n      'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo,\r\n    },\r\n    static: {\r\n      'Boolean': WebGL2KernelValueBoolean,\r\n      'Float': WebGL2KernelValueFloat,\r\n      'Integer': WebGL2KernelValueInteger,\r\n      'Array': WebGL2KernelValueUnsignedArray,\r\n      'Array(2)': false,\r\n      'Array(3)': false,\r\n      'Array(4)': false,\r\n      'Array1D(2)': false,\r\n      'Array1D(3)': false,\r\n      'Array1D(4)': false,\r\n      'Array2D(2)': false,\r\n      'Array2D(3)': false,\r\n      'Array2D(4)': false,\r\n      'Array3D(2)': false,\r\n      'Array3D(3)': false,\r\n      'Array3D(4)': false,\r\n      'Input': WebGL2KernelValueUnsignedInput,\r\n      'NumberTexture': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(1)': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(2)': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(3)': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(4)': WebGL2KernelValueNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGL2KernelValueHTMLImage,\r\n      'HTMLImageArray': WebGL2KernelValueHTMLImageArray,\r\n      'HTMLVideo': WebGL2KernelValueHTMLVideo,\r\n    }\r\n  },\r\n  single: {\r\n    dynamic: {\r\n      'Boolean': WebGL2KernelValueBoolean,\r\n      'Integer': WebGL2KernelValueInteger,\r\n      'Float': WebGL2KernelValueFloat,\r\n      'Array': WebGL2KernelValueDynamicSingleArray,\r\n      'Array(2)': WebGL2KernelValueSingleArray2,\r\n      'Array(3)': WebGL2KernelValueSingleArray3,\r\n      'Array(4)': WebGL2KernelValueSingleArray4,\r\n      'Array1D(2)': WebGL2KernelValueDynamicSingleArray1DI,\r\n      'Array1D(3)': WebGL2KernelValueDynamicSingleArray1DI,\r\n      'Array1D(4)': WebGL2KernelValueDynamicSingleArray1DI,\r\n      'Array2D(2)': WebGL2KernelValueDynamicSingleArray2DI,\r\n      'Array2D(3)': WebGL2KernelValueDynamicSingleArray2DI,\r\n      'Array2D(4)': WebGL2KernelValueDynamicSingleArray2DI,\r\n      'Array3D(2)': WebGL2KernelValueDynamicSingleArray3DI,\r\n      'Array3D(3)': WebGL2KernelValueDynamicSingleArray3DI,\r\n      'Array3D(4)': WebGL2KernelValueDynamicSingleArray3DI,\r\n      'Input': WebGL2KernelValueDynamicSingleInput,\r\n      'NumberTexture': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,\r\n      'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGL2KernelValueDynamicHTMLImage,\r\n      'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,\r\n      'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo,\r\n    },\r\n    static: {\r\n      'Boolean': WebGL2KernelValueBoolean,\r\n      'Float': WebGL2KernelValueFloat,\r\n      'Integer': WebGL2KernelValueInteger,\r\n      'Array': WebGL2KernelValueSingleArray,\r\n      'Array(2)': WebGL2KernelValueSingleArray2,\r\n      'Array(3)': WebGL2KernelValueSingleArray3,\r\n      'Array(4)': WebGL2KernelValueSingleArray4,\r\n      'Array1D(2)': WebGL2KernelValueSingleArray1DI,\r\n      'Array1D(3)': WebGL2KernelValueSingleArray1DI,\r\n      'Array1D(4)': WebGL2KernelValueSingleArray1DI,\r\n      'Array2D(2)': WebGL2KernelValueSingleArray2DI,\r\n      'Array2D(3)': WebGL2KernelValueSingleArray2DI,\r\n      'Array2D(4)': WebGL2KernelValueSingleArray2DI,\r\n      'Array3D(2)': WebGL2KernelValueSingleArray3DI,\r\n      'Array3D(3)': WebGL2KernelValueSingleArray3DI,\r\n      'Array3D(4)': WebGL2KernelValueSingleArray3DI,\r\n      'Input': WebGL2KernelValueSingleInput,\r\n      'NumberTexture': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(1)': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(2)': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(3)': WebGL2KernelValueNumberTexture,\r\n      'ArrayTexture(4)': WebGL2KernelValueNumberTexture,\r\n      'MemoryOptimizedNumberTexture': WebGL2KernelValueMemoryOptimizedNumberTexture,\r\n      'HTMLImage': WebGL2KernelValueHTMLImage,\r\n      'HTMLImageArray': WebGL2KernelValueHTMLImageArray,\r\n      'HTMLVideo': WebGL2KernelValueHTMLVideo,\r\n    }\r\n  },\r\n};\r\n\r\nexport function lookupKernelValueType(type, dynamic, precision, value) {\r\n  if (!type) {\r\n    throw new Error('type missing');\r\n  }\r\n  if (!dynamic) {\r\n    throw new Error('dynamic missing');\r\n  }\r\n  if (!precision) {\r\n    throw new Error('precision missing');\r\n  }\r\n  if (value.type) {\r\n    type = value.type;\r\n  }\r\n  const types = kernelValueMaps[precision][dynamic];\r\n  if (types[type] === false) {\r\n    return null;\r\n  } else if (types[type] === undefined) {\r\n    throw new Error(`Could not find a KernelValue for ${ type }`);\r\n  }\r\n  return types[type];\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueDynamicUnsignedArray } from '../../web-gl/kernel-value/dynamic-unsigned-array';\r\n\r\nexport class WebGL2KernelValueDynamicUnsignedArray extends WebGLKernelValueDynamicUnsignedArray {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueDynamicUnsignedInput } from '../../web-gl/kernel-value/dynamic-unsigned-input';\r\n\r\nexport class WebGL2KernelValueDynamicUnsignedInput extends WebGLKernelValueDynamicUnsignedInput {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueUnsignedArray } from '../../web-gl/kernel-value/unsigned-array';\r\n\r\nexport class WebGL2KernelValueUnsignedArray extends WebGLKernelValueUnsignedArray {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueUnsignedInput } from '../../web-gl/kernel-value/unsigned-input';\r\n\r\nexport class WebGL2KernelValueUnsignedInput extends WebGLKernelValueUnsignedInput {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `${ variablePrecision } ivec2 ${this.sizeId} = ivec2(${this.textureSize[0]}, ${this.textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${this.dimensionsId} = ivec3(${this.dimensions[0]}, ${this.dimensions[1]}, ${this.dimensions[2]})`,\r\n    ]);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGL2KernelValueSingleArray } from '../../web-gl2/kernel-value/single-array';\r\n\r\nexport class WebGL2KernelValueDynamicSingleArray extends WebGL2KernelValueSingleArray {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    this.dimensions = utils.getDimensions(value, true);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGL2KernelValueSingleInput } from '../../web-gl2/kernel-value/single-input';\r\n\r\nexport class WebGL2KernelValueDynamicSingleInput extends WebGL2KernelValueSingleInput {\r\n  getSource() {\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform ${ variablePrecision } sampler2D ${this.id}`,\r\n      `uniform ${ variablePrecision } ivec2 ${this.sizeId}`,\r\n      `uniform ${ variablePrecision } ivec3 ${this.dimensionsId}`,\r\n    ]);\r\n  }\r\n\r\n  updateValue(value) {\r\n    let [w, h, d] = value.size;\r\n    this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);\r\n    this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);\r\n    this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;\r\n    this.checkSize(this.textureSize[0] * this.bitRatio, this.textureSize[1] * this.bitRatio);\r\n    this.uploadValue = new Float32Array(this.uploadArrayLength);\r\n    this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);\r\n    this.kernel.setUniform2iv(this.sizeId, this.textureSize);\r\n    super.updateValue(value);\r\n  }\r\n}\r\n","import { utils } from '../../../utils';\r\nimport { WebGLKernelValueMemoryOptimizedNumberTexture } from '../../web-gl/kernel-value/memory-optimized-number-texture';\r\n\r\nexport class WebGL2KernelValueMemoryOptimizedNumberTexture extends WebGLKernelValueMemoryOptimizedNumberTexture {\r\n  getSource() {\r\n    const { id, sizeId, textureSize, dimensionsId, dimensions } = this;\r\n    const variablePrecision = this.getVariablePrecisionString();\r\n    return utils.linesToString([\r\n      `uniform sampler2D ${id}`,\r\n      `${ variablePrecision } ivec2 ${sizeId} = ivec2(${textureSize[0]}, ${textureSize[1]})`,\r\n      `${ variablePrecision } ivec3 ${dimensionsId} = ivec3(${dimensions[0]}, ${dimensions[1]}, ${dimensions[2]})`,\r\n    ]);\r\n  }\r\n}\r\n","import { WebGLKernel } from '../web-gl/kernel';\r\nimport { WebGL2FunctionNode } from './function-node';\r\nimport { FunctionBuilder } from '../function-builder';\r\nimport { utils } from '../../utils';\r\nimport { fragmentShader } from './fragment-shader';\r\nimport { vertexShader } from './vertex-shader';\r\nimport { lookupKernelValueType } from './kernel-value-maps';\r\n\r\nlet isSupported = null;\r\nlet testCanvas = null;\r\nlet testContext = null;\r\nlet testExtensions = null;\r\n\r\n/**\r\n *\r\n * @type {IKernelFeatures}\r\n */\r\nlet features = null;\r\n\r\n/**\r\n * @extends WebGLKernel\r\n */\r\nexport class WebGL2Kernel extends WebGLKernel {\r\n  static get isSupported() {\r\n    if (isSupported !== null) {\r\n      return isSupported;\r\n    }\r\n    this.setupFeatureChecks();\r\n    isSupported = this.isContextMatch(testContext);\r\n    return isSupported;\r\n  }\r\n\r\n  static setupFeatureChecks() {\r\n    if (typeof document !== 'undefined') {\r\n      testCanvas = document.createElement('canvas');\r\n    } else if (typeof OffscreenCanvas !== 'undefined') {\r\n      testCanvas = new OffscreenCanvas(0, 0);\r\n    }\r\n    if (!testCanvas) return;\r\n    testContext = testCanvas.getContext('webgl2');\r\n    if (!testContext || !testContext.getExtension) return;\r\n    testExtensions = {\r\n      EXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),\r\n      OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\r\n    };\r\n    features = this.getFeatures();\r\n  }\r\n\r\n  static isContextMatch(context) {\r\n    // from global\r\n    if (typeof WebGL2RenderingContext !== 'undefined') {\r\n      return context instanceof WebGL2RenderingContext;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static getFeatures() {\r\n    return Object.freeze({\r\n      isFloatRead: this.getIsFloatRead(),\r\n      isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\r\n      kernelMap: true,\r\n      isTextureFloat: true,\r\n      channelCount: this.getChannelCount(),\r\n      maxTextureSize: this.getMaxTextureSize(),\r\n    });\r\n  }\r\n\r\n  static getIsTextureFloat() {\r\n    return true;\r\n  }\r\n\r\n  static getIsIntegerDivisionAccurate() {\r\n    return super.getIsIntegerDivisionAccurate();\r\n  }\r\n\r\n  static getChannelCount() {\r\n    return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);\r\n  }\r\n\r\n  static getMaxTextureSize() {\r\n    return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);\r\n  }\r\n\r\n  static lookupKernelValueType(type, dynamic, precision, value) {\r\n    return lookupKernelValueType(type, dynamic, precision, value);\r\n  }\r\n\r\n  static get testCanvas() {\r\n    return testCanvas;\r\n  }\r\n\r\n  static get testContext() {\r\n    return testContext;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {{isFloatRead: Boolean, isIntegerDivisionAccurate: Boolean, kernelMap: Boolean, isTextureFloat: Boolean}}\r\n   */\r\n  static get features() {\r\n    return features;\r\n  }\r\n\r\n  static get fragmentShader() {\r\n    return fragmentShader;\r\n  }\r\n  static get vertexShader() {\r\n    return vertexShader;\r\n  }\r\n\r\n  initContext() {\r\n    const settings = {\r\n      alpha: false,\r\n      depth: false,\r\n      antialias: false\r\n    };\r\n    const context = this.canvas.getContext('webgl2', settings);\r\n    return context;\r\n  }\r\n\r\n  initExtensions() {\r\n    this.extensions = {\r\n      EXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),\r\n      OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @desc Validate settings related to Kernel, such as dimensions size, and auto output support.\r\n   * @param {IArguments} args\r\n   */\r\n  validateSettings(args) {\r\n    if (!this.validate) {\r\n      this.texSize = utils.getKernelTextureSize({\r\n        optimizeFloatMemory: this.optimizeFloatMemory,\r\n        precision: this.precision,\r\n      }, this.output);\r\n      return;\r\n    }\r\n\r\n    const features = this.constructor.features;\r\n    if (this.precision === 'single' && !features.isFloatRead) {\r\n      throw new Error('Float texture outputs are not supported');\r\n    } else if (!this.graphical && this.precision === null) {\r\n      this.precision = features.isFloatRead ? 'single' : 'unsigned';\r\n    }\r\n\r\n    if (this.fixIntegerDivisionAccuracy === null) {\r\n      this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\r\n    } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\r\n      this.fixIntegerDivisionAccuracy = false;\r\n    }\r\n\r\n    this.checkOutput();\r\n\r\n    if (!this.output || this.output.length === 0) {\r\n      if (args.length !== 1) {\r\n        throw new Error('Auto output only supported for kernels with only one input');\r\n      }\r\n\r\n      const argType = utils.getVariableType(args[0], this.strictIntegers);\r\n      switch (argType) {\r\n        case 'Array':\r\n          this.output = utils.getDimensions(argType);\r\n          break;\r\n        case 'NumberTexture':\r\n        case 'MemoryOptimizedNumberTexture':\r\n        case 'ArrayTexture(1)':\r\n        case 'ArrayTexture(2)':\r\n        case 'ArrayTexture(3)':\r\n        case 'ArrayTexture(4)':\r\n          this.output = args[0].output;\r\n          break;\r\n        default:\r\n          throw new Error('Auto output not supported for input type: ' + argType);\r\n      }\r\n    }\r\n\r\n    if (this.graphical) {\r\n      if (this.output.length !== 2) {\r\n        throw new Error('Output must have 2 dimensions on graphical mode');\r\n      }\r\n\r\n      if (this.precision === 'single') {\r\n        console.warn('Cannot use graphical mode and single precision at the same time');\r\n        this.precision = 'unsigned';\r\n      }\r\n\r\n      this.texSize = utils.clone(this.output);\r\n      return;\r\n    } else if (!this.graphical && this.precision === null && features.isTextureFloat) {\r\n      this.precision = 'single';\r\n    }\r\n\r\n    this.texSize = utils.getKernelTextureSize({\r\n      optimizeFloatMemory: this.optimizeFloatMemory,\r\n      precision: this.precision,\r\n    }, this.output);\r\n\r\n    this.checkTextureSize();\r\n  }\r\n\r\n  translateSource() {\r\n    const functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {\r\n      fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\r\n    });\r\n    this.translatedSource = functionBuilder.getPrototypeString('kernel');\r\n    if (!this.graphical && !this.returnType) {\r\n      this.returnType = functionBuilder.getKernelResultType();\r\n    }\r\n\r\n    if (this.subKernels && this.subKernels.length > 0) {\r\n      for (let i = 0; i < this.subKernels.length; i++) {\r\n        const subKernel = this.subKernels[i];\r\n        if (!subKernel.returnType) {\r\n          subKernel.returnType = functionBuilder.getSubKernelResultType(i);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  run() {\r\n    const { kernelArguments, texSize, forceUploadKernelConstants } = this;\r\n    const gl = this.context;\r\n\r\n    gl.useProgram(this.program);\r\n    gl.scissor(0, 0, texSize[0], texSize[1]);\r\n\r\n    if (this.dynamicOutput) {\r\n      this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));\r\n      this.setUniform2iv('uTexSize', texSize);\r\n    }\r\n\r\n    this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\r\n\r\n    this.switchingKernels = false;\r\n    for (let i = 0; i < forceUploadKernelConstants.length; i++) {\r\n      const constant = forceUploadKernelConstants[i];\r\n      constant.updateValue(this.constants[constant.name]);\r\n      if (this.switchingKernels) return;\r\n    }\r\n    for (let i = 0; i < kernelArguments.length; i++) {\r\n      kernelArguments[i].updateValue(arguments[i]);\r\n      if (this.switchingKernels) return;\r\n    }\r\n\r\n    if (this.plugins) {\r\n      for (let i = 0; i < this.plugins.length; i++) {\r\n        const plugin = this.plugins[i];\r\n        if (plugin.onBeforeRun) {\r\n          plugin.onBeforeRun(this);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.graphical) {\r\n      if (this.pipeline) {\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n        if (!this.outputTexture || this.immutable) {\r\n          this._setupOutputTexture();\r\n        }\r\n        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        return new this.TextureConstructor({\r\n          texture: this.outputTexture,\r\n          size: texSize,\r\n          dimensions: this.threadDim,\r\n          output: this.output,\r\n          context: this.context\r\n        });\r\n      }\r\n      gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n      return;\r\n    }\r\n\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    if (this.immutable) {\r\n      this._setupOutputTexture();\r\n    }\r\n\r\n    if (this.subKernels !== null) {\r\n      if (this.immutable) {\r\n        this._setupSubOutputTextures();\r\n      }\r\n      gl.drawBuffers(this.drawBuffersMap);\r\n    }\r\n\r\n    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n  }\r\n\r\n  drawBuffers() {\r\n    this.context.drawBuffers(this.drawBuffersMap);\r\n  }\r\n\r\n  getOutputTexture() {\r\n    return this.outputTexture;\r\n  }\r\n\r\n  _setupOutputTexture() {\r\n    const { texSize } = this;\r\n    const gl = this.context;\r\n    const texture = this.outputTexture = gl.createTexture();\r\n    gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    if (this.precision === 'single') {\r\n      if (this.pipeline) {\r\n        switch (this.returnType) {\r\n          case 'Number':\r\n          case 'Float':\r\n          case 'Integer':\r\n            if (this.optimizeFloatMemory) {\r\n              gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA32F, texSize[0], texSize[1]);\r\n            } else {\r\n              gl.texStorage2D(gl.TEXTURE_2D, 1, gl.R32F, texSize[0], texSize[1]);\r\n            }\r\n            break;\r\n          case 'Array(2)':\r\n            gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RG32F, texSize[0], texSize[1]);\r\n            break;\r\n          case 'Array(3)': // there is _no_ 3 channel format which is guaranteed to be color-renderable\r\n          case 'Array(4)':\r\n            gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA32F, texSize[0], texSize[1]);\r\n            break;\r\n          default:\r\n            throw new Error('Unhandled return type');\r\n        }\r\n      } else {\r\n        gl.texStorage2D(gl.TEXTURE_2D, 1, gl.RGBA32F, texSize[0], texSize[1]);\r\n      }\r\n    } else {\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n    }\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n  }\r\n\r\n  _setupSubOutputTextures() {\r\n    const { texSize } = this;\r\n    const gl = this.context;\r\n    this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\r\n    this.subKernelOutputTextures = [];\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      const texture = this.context.createTexture();\r\n      this.subKernelOutputTextures.push(texture);\r\n      this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\r\n      gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + i);\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n      // TODO: upgrade this\r\n      if (this.precision === 'single') {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\r\n      } else {\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      }\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @desc Get the header string for the program.\r\n   * This returns an empty string if no sub-kernels are defined.\r\n   *\r\n   * @returns {String} result\r\n   */\r\n  _getHeaderString() {\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * @desc Get texture coordinate string for the program\r\n   * @returns {String} result\r\n   */\r\n  _getTextureCoordinate() {\r\n    const subKernels = this.subKernels;\r\n    if (subKernels === null || subKernels.length < 1) {\r\n      switch (this.tactic) {\r\n        case 'speed':\r\n          return 'in lowp vec2 vTexCoord;\\n';\r\n        case 'performance':\r\n          return 'in highp vec2 vTexCoord;\\n';\r\n        case 'balanced':\r\n        default:\r\n          return 'in mediump vec2 vTexCoord;\\n';\r\n      }\r\n    } else {\r\n      switch (this.tactic) {\r\n        case 'speed':\r\n          return 'out lowp vec2 vTexCoord;\\n';\r\n        case 'performance':\r\n          return 'out highp vec2 vTexCoord;\\n';\r\n        case 'balanced':\r\n        default:\r\n          return 'out mediump vec2 vTexCoord;\\n';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\r\n   * @param {Array} args - The actual parameters sent to the Kernel\r\n   * @returns {String} result\r\n   */\r\n  _getMainArgumentsString(args) {\r\n    const result = [];\r\n    const argumentNames = this.argumentNames;\r\n    for (let i = 0; i < argumentNames.length; i++) {\r\n      result.push(this.kernelArguments[i].getSource(args[i]));\r\n    }\r\n    return result.join('');\r\n  }\r\n\r\n  /**\r\n   * @desc Get Kernel program string (in *glsl*) for a kernel.\r\n   * @returns {String} result\r\n   */\r\n  getKernelString() {\r\n    let kernelResultDeclaration;\r\n    switch (this.returnType) {\r\n      case 'Array(2)':\r\n        kernelResultDeclaration = 'vec2 kernelResult';\r\n        break;\r\n      case 'Array(3)':\r\n        kernelResultDeclaration = 'vec3 kernelResult';\r\n        break;\r\n      case 'Array(4)':\r\n        kernelResultDeclaration = 'vec4 kernelResult';\r\n        break;\r\n      case 'LiteralInteger':\r\n      case 'Float':\r\n      case 'Number':\r\n      case 'Integer':\r\n        kernelResultDeclaration = 'float kernelResult';\r\n        break;\r\n      default:\r\n        if (this.graphical) {\r\n          kernelResultDeclaration = 'float kernelResult';\r\n        } else {\r\n          throw new Error(`unrecognized output type \"${ this.returnType }\"`);\r\n        }\r\n    }\r\n\r\n    const result = [];\r\n    const subKernels = this.subKernels;\r\n    if (subKernels !== null) {\r\n      result.push(\r\n        kernelResultDeclaration,\r\n        'layout(location = 0) out vec4 data0'\r\n      );\r\n      for (let i = 0; i < subKernels.length; i++) {\r\n        const subKernel = subKernels[i];\r\n        result.push(\r\n          subKernel.returnType === 'Integer' ?\r\n          `int subKernelResult_${ subKernel.name } = 0` :\r\n          `float subKernelResult_${ subKernel.name } = 0.0`,\r\n          `layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\r\n        );\r\n      }\r\n    } else {\r\n      result.push(\r\n        'out vec4 data0',\r\n        kernelResultDeclaration\r\n      );\r\n    }\r\n\r\n    return utils.linesToString(result) + this.translatedSource;\r\n  }\r\n\r\n  getMainResultGraphical() {\r\n    return utils.linesToString([\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  data0 = actualColor',\r\n    ]);\r\n  }\r\n\r\n  getMainResultPackedPixels() {\r\n    switch (this.returnType) {\r\n      case 'LiteralInteger':\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n        return this.getMainResultKernelPackedPixels() +\r\n          this.getMainResultSubKernelPackedPixels();\r\n      default:\r\n        throw new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {String}\r\n   */\r\n  getMainResultKernelPackedPixels() {\r\n    return utils.linesToString([\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      `  data0 = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(kernelResult)`\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * @return {String}\r\n   */\r\n  getMainResultSubKernelPackedPixels() {\r\n    const result = [];\r\n    if (!this.subKernels) return '';\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      const subKernel = this.subKernels[i];\r\n      if (subKernel.returnType === 'Integer') {\r\n        result.push(\r\n          `  data${i + 1} = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(float(subKernelResult_${this.subKernels[i].name}))`\r\n        );\r\n      } else {\r\n        result.push(\r\n          `  data${i + 1} = ${this.useLegacyEncoder ? 'legacyEncode32' : 'encode32'}(subKernelResult_${this.subKernels[i].name})`\r\n        );\r\n      }\r\n    }\r\n    return utils.linesToString(result);\r\n  }\r\n\r\n  getMainResultMemoryOptimizedFloats() {\r\n    const result = [\r\n      '  index *= 4',\r\n    ];\r\n\r\n    switch (this.returnType) {\r\n      case 'Number':\r\n      case 'Integer':\r\n      case 'Float':\r\n        const channels = ['r', 'g', 'b', 'a'];\r\n        for (let i = 0; i < channels.length; i++) {\r\n          const channel = channels[i];\r\n          this.getMainResultKernelMemoryOptimizedFloats(result, channel);\r\n          this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\r\n          if (i + 1 < channels.length) {\r\n            result.push('  index += 1');\r\n          }\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\r\n    }\r\n\r\n    return utils.linesToString(result);\r\n  }\r\n\r\n  getMainResultKernelMemoryOptimizedFloats(result, channel) {\r\n    result.push(\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      `  data0.${channel} = kernelResult`,\r\n    );\r\n  }\r\n\r\n  getMainResultSubKernelMemoryOptimizedFloats(result, channel) {\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; i++) {\r\n      const subKernel = this.subKernels[i];\r\n      if (subKernel.returnType === 'Integer') {\r\n        result.push(\r\n          `  data${i + 1}.${channel} = float(subKernelResult_${subKernel.name})`,\r\n        );\r\n      } else {\r\n        result.push(\r\n          `  data${i + 1}.${channel} = subKernelResult_${subKernel.name}`,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  getMainResultKernelNumberTexture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  data0[0] = kernelResult',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelNumberTexture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      const subKernel = this.subKernels[i];\r\n      if (subKernel.returnType === 'Integer') {\r\n        result.push(\r\n          `  data${i + 1}[0] = float(subKernelResult_${subKernel.name})`,\r\n        );\r\n      } else {\r\n        result.push(\r\n          `  data${i + 1}[0] = subKernelResult_${subKernel.name}`,\r\n        );\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getMainResultKernelArray2Texture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  data0[0] = kernelResult[0]',\r\n      '  data0[1] = kernelResult[1]',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelArray2Texture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      const subKernel = this.subKernels[i];\r\n      result.push(\r\n        `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,\r\n        `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`,\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getMainResultKernelArray3Texture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  data0[0] = kernelResult[0]',\r\n      '  data0[1] = kernelResult[1]',\r\n      '  data0[2] = kernelResult[2]',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelArray3Texture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      const subKernel = this.subKernels[i];\r\n      result.push(\r\n        `  data${i + 1}[0] = subKernelResult_${subKernel.name}[0]`,\r\n        `  data${i + 1}[1] = subKernelResult_${subKernel.name}[1]`,\r\n        `  data${i + 1}[2] = subKernelResult_${subKernel.name}[2]`,\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getMainResultKernelArray4Texture() {\r\n    return [\r\n      '  threadId = indexTo3D(index, uOutputDim)',\r\n      '  kernel()',\r\n      '  data0 = kernelResult',\r\n    ];\r\n  }\r\n\r\n  getMainResultSubKernelArray4Texture() {\r\n    const result = [];\r\n    if (!this.subKernels) return result;\r\n    for (let i = 0; i < this.subKernels.length; ++i) {\r\n      result.push(\r\n        `  data${i + 1} = subKernelResult_${this.subKernels[i].name}`,\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n\r\n  destroyExtensions() {\r\n    this.extensions.EXT_color_buffer_float = null;\r\n    this.extensions.OES_texture_float_linear = null;\r\n  }\r\n\r\n  toJSON() {\r\n    const json = super.toJSON();\r\n    json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();\r\n    return json;\r\n  }\r\n}\r\n","import { utils } from './utils';\r\n\r\n/**\r\n * Makes kernels easier for mortals (including me)\r\n * @param kernel\r\n * @returns {function()}\r\n */\r\nexport function kernelRunShortcut(kernel) {\r\n  let run = function() {\r\n    kernel.build.apply(kernel, arguments);\r\n    if (kernel.renderKernels) {\r\n      run = function() {\r\n        kernel.run.apply(kernel, arguments);\r\n        if (kernel.switchingKernels) {\r\n          kernel.switchingKernels = false;\r\n          return kernel.onRequestSwitchKernel(arguments, kernel);\r\n        }\r\n        return kernel.renderKernels();\r\n      };\r\n    } else if (kernel.renderOutput) {\r\n      run = function() {\r\n        kernel.run.apply(kernel, arguments);\r\n        if (kernel.switchingKernels) {\r\n          kernel.switchingKernels = false;\r\n          return kernel.onRequestSwitchKernel(arguments, kernel);\r\n        }\r\n        return kernel.renderOutput();\r\n      };\r\n    } else {\r\n      run = function() {\r\n        return kernel.run.apply(kernel, arguments);\r\n      };\r\n    }\r\n    return run.apply(kernel, arguments);\r\n  };\r\n  const shortcut = function() {\r\n    return run.apply(kernel, arguments);\r\n  };\r\n  /**\r\n   * Run kernel in async mode\r\n   * @returns {Promise<KernelOutput>}\r\n   */\r\n  shortcut.exec = function() {\r\n    return new Promise((accept, reject) => {\r\n      try {\r\n        accept(run.apply(this, arguments));\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  };\r\n  shortcut.replaceKernel = function(replacementKernel) {\r\n    kernel = replacementKernel;\r\n    bindKernelToShortcut(kernel, shortcut);\r\n    shortcut.kernel = kernel;\r\n  };\r\n\r\n  bindKernelToShortcut(kernel, shortcut);\r\n  shortcut.kernel = kernel;\r\n  return shortcut;\r\n}\r\n\r\nfunction bindKernelToShortcut(kernel, shortcut) {\r\n  const properties = utils.allPropertiesOf(kernel);\r\n  for (let i = 0; i < properties.length; i++) {\r\n    const property = properties[i];\r\n    if (property[0] === '_' && property[1] === '_') continue;\r\n    if (typeof kernel[property] === 'function') {\r\n      if (property.substring(0, 3) === 'add' || property.substring(0, 3) === 'set') {\r\n        shortcut[property] = function() {\r\n          kernel[property].apply(kernel, arguments);\r\n          return shortcut;\r\n        };\r\n      } else {\r\n        if (property === 'toString') {\r\n          shortcut.toString = function() {\r\n            return kernel.toString.apply(kernel, arguments);\r\n          };\r\n        } else {\r\n          shortcut[property] = kernel[property].bind(kernel);\r\n        }\r\n      }\r\n    } else {\r\n      shortcut.__defineGetter__(property, () => {\r\n        return kernel[property];\r\n      });\r\n      shortcut.__defineSetter__(property, (value) => {\r\n        kernel[property] = value;\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { gpuMock } from 'gpu-mock.js';\r\nimport { CPUKernel } from './backend/cpu/kernel';\r\nimport { WebGL2Kernel } from './backend/web-gl2/kernel';\r\nimport { WebGLKernel } from './backend/web-gl/kernel';\r\nimport { kernelRunShortcut } from './kernel-run-shortcut';\r\nimport {\r\n  functionToIFunction,\r\n  getFunctionNameFromString,\r\n  isFunction,\r\n  warnDeprecated\r\n} from './common';\r\nimport { getVariableType } from './utils';\r\n\r\n/**\r\n * @type {Kernel[]}\r\n */\r\nconst kernelOrder = [ WebGL2Kernel, WebGLKernel ];\r\n\r\n/**\r\n * @type {string[]}\r\n */\r\nconst kernelTypes = [ 'gpu', 'cpu' ];\r\n\r\nconst internalKernels = {\r\n  'webgl2': WebGL2Kernel,\r\n  'webgl': WebGLKernel,\r\n};\r\n\r\nlet validate = true;\r\n\r\n/**\r\n * The GPU.js library class which manages the GPU context for the creating kernels\r\n */\r\nexport class GPU {\r\n  static disableValidation() {\r\n    validate = false;\r\n  }\r\n\r\n  static enableValidation() {\r\n    validate = true;\r\n  }\r\n\r\n  static get isGPUSupported() {\r\n    return kernelOrder.some(Kernel => Kernel.isSupported);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  static get isKernelMapSupported() {\r\n    return kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.kernelMap);\r\n  }\r\n\r\n  /**\r\n   * @desc TRUE is platform supports OffscreenCanvas\r\n   */\r\n  static get isOffscreenCanvasSupported() {\r\n    return (typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined') || typeof importScripts !== 'undefined';\r\n  }\r\n\r\n  /**\r\n   * @desc TRUE if platform supports WebGL\r\n   */\r\n  static get isWebGLSupported() {\r\n    return WebGLKernel.isSupported;\r\n  }\r\n\r\n  /**\r\n   * @desc TRUE if platform supports WebGL2\r\n   */\r\n  static get isWebGL2Supported() {\r\n    return WebGL2Kernel.isSupported;\r\n  }\r\n\r\n  /**\r\n   * @desc TRUE if platform supports HeadlessGL\r\n   */\r\n  static get isHeadlessGLSupported() {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @desc TRUE if platform supports Canvas\r\n   */\r\n  static get isCanvasSupported() {\r\n    return typeof HTMLCanvasElement !== 'undefined';\r\n  }\r\n\r\n  /**\r\n   * @desc TRUE if platform supports HTMLImageArray}\r\n   */\r\n  static get isGPUHTMLImageArraySupported() {\r\n    return WebGL2Kernel.isSupported;\r\n  }\r\n\r\n  /**\r\n   * @desc TRUE if platform supports single precision}\r\n   * @returns {boolean}\r\n   */\r\n  static get isSinglePrecisionSupported() {\r\n    return kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat);\r\n  }\r\n\r\n  /**\r\n   * Creates an instance of GPU.\r\n   * @param {IGPUSettings} [settings] - Settings to set mode, and other properties\r\n   */\r\n  constructor(settings) {\r\n    settings = settings || {};\r\n    this.canvas = settings.canvas || null;\r\n    this.context = settings.context || null;\r\n    this.mode = settings.mode;\r\n    this.Kernel = null;\r\n    this.kernels = [];\r\n    this.functions = [];\r\n    this.nativeFunctions = [];\r\n    this.injectedNative = null;\r\n    if (this.mode === 'dev') return;\r\n    this.chooseKernel();\r\n    // add functions from settings\r\n    if (settings.functions) {\r\n      for (let i = 0; i < settings.functions.length; i++) {\r\n        this.addFunction(settings.functions[i]);\r\n      }\r\n    }\r\n\r\n    // add native functions from settings\r\n    if (settings.nativeFunctions) {\r\n      for (const p in settings.nativeFunctions) {\r\n        this.addNativeFunction(p, settings.nativeFunctions[p]);\r\n      }\r\n    }\r\n  }\r\n\r\n  getValidate() {\r\n    return validate;\r\n  }\r\n\r\n  /**\r\n   * Choose kernel type and save on .Kernel property of GPU\r\n   */\r\n  chooseKernel() {\r\n    if (this.Kernel) return;\r\n\r\n    let Kernel = null;\r\n\r\n    if (this.context) {\r\n      for (let i = 0; i < kernelOrder.length; i++) {\r\n        const ExternalKernel = kernelOrder[i];\r\n        if (ExternalKernel.isContextMatch(this.context)) {\r\n          if (!ExternalKernel.isSupported) {\r\n            throw new Error(`Kernel type ${ExternalKernel.name} not supported`);\r\n          }\r\n          Kernel = ExternalKernel;\r\n          break;\r\n        }\r\n      }\r\n      if (Kernel === null) {\r\n        throw new Error('unknown Context');\r\n      }\r\n    } else if (this.mode) {\r\n      if (this.mode in internalKernels) {\r\n        if (!validate || internalKernels[this.mode].isSupported) {\r\n          Kernel = internalKernels[this.mode];\r\n        }\r\n      } else if (this.mode === 'gpu') {\r\n        for (let i = 0; i < kernelOrder.length; i++) {\r\n          if (kernelOrder[i].isSupported) {\r\n            Kernel = kernelOrder[i];\r\n            break;\r\n          }\r\n        }\r\n      } else if (this.mode === 'cpu') {\r\n        Kernel = CPUKernel;\r\n      }\r\n      if (!Kernel) {\r\n        throw new Error(`A requested mode of \"${this.mode}\" and is not supported`);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < kernelOrder.length; i++) {\r\n        if (kernelOrder[i].isSupported) {\r\n          Kernel = kernelOrder[i];\r\n          break;\r\n        }\r\n      }\r\n      if (!Kernel) {\r\n        Kernel = CPUKernel;\r\n      }\r\n    }\r\n\r\n    if (!this.mode) {\r\n      this.mode = Kernel.mode;\r\n    }\r\n    this.Kernel = Kernel;\r\n  }\r\n\r\n  /**\r\n   * @desc This creates a callable function object to call the kernel function with the argument parameter set\r\n   * @param {Function|String|object} source - The calling to perform the conversion\r\n   * @param {Object} [settings] - The parameter configuration object\r\n   * @return {Kernel} callable function to run\r\n   */\r\n  createKernel(source, settings) {\r\n    if (typeof source === 'undefined') {\r\n      throw new Error('Missing source parameter');\r\n    }\r\n    if (typeof source !== 'object' && !isFunction(source) && typeof source !== 'string') {\r\n      throw new Error('source parameter not a function');\r\n    }\r\n\r\n    if (this.mode === 'dev') {\r\n      const devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));\r\n      this.kernels.push(devKernel);\r\n      return devKernel;\r\n    }\r\n\r\n    source = typeof source === 'function' ? source.toString() : source;\r\n    const switchableKernels = {};\r\n    const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};\r\n    // handle conversion of argumentTypes\r\n    if (settings && typeof settings.argumentTypes === 'object') {\r\n      settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(argumentName => settings.argumentTypes[argumentName]);\r\n    }\r\n\r\n    function onRequestFallback(args) {\r\n      const fallbackKernel = new CPUKernel(source, {\r\n        argumentTypes: kernelRun.argumentTypes,\r\n        constantTypes: kernelRun.constantTypes,\r\n        graphical: kernelRun.graphical,\r\n        loopMaxIterations: kernelRun.loopMaxIterations,\r\n        constants: kernelRun.constants,\r\n        dynamicOutput: kernelRun.dynamicOutput,\r\n        dynamicArgument: kernelRun.dynamicArguments,\r\n        output: kernelRun.output,\r\n        precision: kernelRun.precision,\r\n        pipeline: kernelRun.pipeline,\r\n        immutable: kernelRun.immutable,\r\n        optimizeFloatMemory: kernelRun.optimizeFloatMemory,\r\n        fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,\r\n        functions: kernelRun.functions,\r\n        nativeFunctions: kernelRun.nativeFunctions,\r\n        injectedNative: kernelRun.injectedNative,\r\n        subKernels: kernelRun.subKernels,\r\n        strictIntegers: kernelRun.strictIntegers,\r\n        debug: kernelRun.debug,\r\n        warnVarUsage: kernelRun.warnVarUsage,\r\n      });\r\n      fallbackKernel.build.apply(fallbackKernel, args);\r\n      const result = fallbackKernel.run.apply(fallbackKernel, args);\r\n      kernelRun.replaceKernel(fallbackKernel);\r\n      return result;\r\n    }\r\n\r\n    function onRequestSwitchKernel(args, kernel) {\r\n      const argumentTypes = new Array(args.length);\r\n      for (let i = 0; i < args.length; i++) {\r\n        const arg = args[i];\r\n        const type = kernel.argumentTypes[i];\r\n        if (arg.type) {\r\n          argumentTypes[i] = arg.type;\r\n        } else {\r\n          switch (type) {\r\n            case 'Number':\r\n            case 'Integer':\r\n            case 'Float':\r\n            case 'ArrayTexture(1)':\r\n              argumentTypes[i] = getVariableType(arg);\r\n              break;\r\n            default:\r\n              argumentTypes[i] = type;\r\n          }\r\n        }\r\n      }\r\n      const signature = argumentTypes.join(',');\r\n      const existingKernel = switchableKernels[signature];\r\n      if (existingKernel) {\r\n        existingKernel.run.apply(existingKernel, args);\r\n        if (existingKernel.renderKernels) {\r\n          return existingKernel.renderKernels();\r\n        } else {\r\n          return existingKernel.renderOutput();\r\n        }\r\n      }\r\n\r\n      const newKernel = switchableKernels[signature] = new kernel.constructor(source, {\r\n        argumentTypes,\r\n        constantTypes: kernel.constantTypes,\r\n        graphical: kernel.graphical,\r\n        loopMaxIterations: kernel.loopMaxIterations,\r\n        constants: kernel.constants,\r\n        dynamicOutput: kernel.dynamicOutput,\r\n        dynamicArgument: kernel.dynamicArguments,\r\n        context: kernel.context,\r\n        canvas: kernel.canvas,\r\n        output: kernel.output,\r\n        precision: kernel.precision,\r\n        pipeline: kernel.pipeline,\r\n        immutable: kernel.immutable,\r\n        optimizeFloatMemory: kernel.optimizeFloatMemory,\r\n        fixIntegerDivisionAccuracy: kernel.fixIntegerDivisionAccuracy,\r\n        functions: kernel.functions,\r\n        nativeFunctions: kernel.nativeFunctions,\r\n        injectedNative: kernel.injectedNative,\r\n        subKernels: kernel.subKernels,\r\n        strictIntegers: kernel.strictIntegers,\r\n        debug: kernel.debug,\r\n        gpu: kernel.gpu,\r\n        validate,\r\n        warnVarUsage: kernel.warnVarUsage,\r\n        returnType: kernel.returnType,\r\n        onRequestFallback,\r\n        onRequestSwitchKernel,\r\n      });\r\n      newKernel.build.apply(newKernel, args);\r\n      newKernel.run.apply(newKernel, args);\r\n      kernelRun.replaceKernel(newKernel);\r\n      if (newKernel.renderKernels) {\r\n        return newKernel.renderKernels();\r\n      } else {\r\n        return newKernel.renderOutput();\r\n      }\r\n    }\r\n    const mergedSettings = Object.assign({\r\n      context: this.context,\r\n      canvas: this.canvas,\r\n      functions: this.functions,\r\n      nativeFunctions: this.nativeFunctions,\r\n      injectedNative: this.injectedNative,\r\n      gpu: this,\r\n      validate,\r\n      onRequestFallback,\r\n      onRequestSwitchKernel\r\n    }, settingsCopy);\r\n\r\n    const kernelRun = kernelRunShortcut(new this.Kernel(source, mergedSettings));\r\n\r\n    //if canvas didn't come from this, propagate from kernel\r\n    if (!this.canvas) {\r\n      this.canvas = kernelRun.canvas;\r\n    }\r\n\r\n    //if context didn't come from this, propagate from kernel\r\n    if (!this.context) {\r\n      this.context = kernelRun.context;\r\n    }\r\n\r\n    this.kernels.push(kernelRun);\r\n\r\n    return kernelRun;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Create a super kernel which executes sub kernels\r\n   * and saves their output to be used with the next sub kernel.\r\n   * This can be useful if we want to save the output on one kernel,\r\n   * and then use it as an input to another kernel. *Machine Learning*\r\n   *\r\n   * @param {Object|Array} subKernels - Sub kernels for this kernel\r\n   * @param {Function} rootKernel - Root kernel\r\n   *\r\n   * @returns {Function} callable kernel function\r\n   *\r\n   * @example\r\n   * const megaKernel = gpu.createKernelMap({\r\n   *   addResult: function add(a, b) {\r\n   *     return a[this.thread.x] + b[this.thread.x];\r\n   *   },\r\n   *   multiplyResult: function multiply(a, b) {\r\n   *     return a[this.thread.x] * b[this.thread.x];\r\n   *   },\r\n   *  }, function(a, b, c) {\r\n   *       return multiply(add(a, b), c);\r\n   * });\r\n   *\r\n   * megaKernel(a, b, c);\r\n   *\r\n   * Note: You can also define subKernels as an array of functions.\r\n   * > [add, multiply]\r\n   *\r\n   */\r\n  createKernelMap() {\r\n    let fn;\r\n    let settings;\r\n    if (typeof arguments[arguments.length - 2] === 'function') {\r\n      fn = arguments[arguments.length - 2];\r\n      settings = arguments[arguments.length - 1];\r\n    } else {\r\n      fn = arguments[arguments.length - 1];\r\n    }\r\n\r\n    if (this.mode !== 'dev') {\r\n      if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {\r\n        if (this.mode && kernelTypes.indexOf(this.mode) < 0) {\r\n          throw new Error(`kernelMap not supported on ${this.Kernel.name}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);\r\n    // handle conversion of argumentTypes\r\n    if (settings && typeof settings.argumentTypes === 'object') {\r\n      settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(argumentName => settings.argumentTypes[argumentName]);\r\n    }\r\n\r\n    if (Array.isArray(arguments[0])) {\r\n      settingsCopy.subKernels = [];\r\n      const functions = arguments[0];\r\n      for (let i = 0; i < functions.length; i++) {\r\n        const source = functions[i].toString();\r\n        const name = getFunctionNameFromString(source);\r\n        settingsCopy.subKernels.push({\r\n          name,\r\n          source,\r\n          property: i,\r\n        });\r\n      }\r\n    } else {\r\n      settingsCopy.subKernels = [];\r\n      const functions = arguments[0];\r\n      for (let p in functions) {\r\n        if (!functions.hasOwnProperty(p)) continue;\r\n        const source = functions[p].toString();\r\n        const name = getFunctionNameFromString(source);\r\n        settingsCopy.subKernels.push({\r\n          name: name || p,\r\n          source,\r\n          property: p,\r\n        });\r\n      }\r\n    }\r\n    const kernel = this.createKernel(fn, settingsCopy);\r\n\r\n    return kernel;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Combine different kernels into one super Kernel,\r\n   * useful to perform multiple operations inside one\r\n   * kernel without the penalty of data transfer between\r\n   * cpu and gpu.\r\n   *\r\n   * The number of kernel functions sent to this method can be variable.\r\n   * You can send in one, two, etc.\r\n   *\r\n   * @param {Function} subKernels - Kernel function(s) to combine.\r\n   * @param {Function} rootKernel - Root kernel to combine kernels into\r\n   *\r\n   * @example\r\n   *   combineKernels(add, multiply, function(a,b,c){\r\n   *     return add(multiply(a,b), c)\r\n   *  })\r\n   *\r\n   * @returns {Function} Callable kernel function\r\n   *\r\n   */\r\n  combineKernels() {\r\n    const firstKernel = arguments[0];\r\n    const combinedKernel = arguments[arguments.length - 1];\r\n    if (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;\r\n    const canvas = arguments[0].canvas;\r\n    const context = arguments[0].context;\r\n    const max = arguments.length - 1;\r\n    for (let i = 0; i < max; i++) {\r\n      arguments[i]\r\n        .setCanvas(canvas)\r\n        .setContext(context)\r\n        .setPipeline(true);\r\n    }\r\n\r\n    return function() {\r\n      const texture = combinedKernel.apply(this, arguments);\r\n      if (texture.toArray) {\r\n        return texture.toArray();\r\n      }\r\n      return texture;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @desc Adds additional functions, that the kernel may call.\r\n   * @param {Function|String} source - Javascript function to convert\r\n   * @param {IFunctionSettings} [settings]\r\n   * @returns {GPU} returns itself\r\n   */\r\n  addFunction(source, settings) {\r\n    this.functions.push(functionToIFunction(source, settings));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Adds additional native functions, that the kernel may call.\r\n   * @param {String} name - native function name, used for reverse lookup\r\n   * @param {String} source - the native function implementation, as it would be defined in it's entirety\r\n   * @param {object} [settings]\r\n   * @returns {GPU} returns itself\r\n   */\r\n  addNativeFunction(name, source, settings) {\r\n    if (this.kernels.length > 0) {\r\n      throw new Error('Cannot call \"addNativeFunction\" after \"createKernels\" has been called.');\r\n    }\r\n    settings = settings || {};\r\n    const { argumentTypes, argumentNames } = this.Kernel.nativeFunctionArguments(source) || {};\r\n    this.nativeFunctions.push({\r\n      name,\r\n      source,\r\n      settings,\r\n      argumentTypes,\r\n      argumentNames,\r\n      returnType: settings.returnType || this.Kernel.nativeFunctionReturnType(source),\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inject a string just before translated kernel functions\r\n   * @param {String} source\r\n   * @return {GPU}\r\n   */\r\n  injectNative(source) {\r\n    this.injectedNative = source;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @desc Destroys all memory associated with gpu.js & the webGl if we created it\r\n   */\r\n  destroy() {\r\n    if (!this.kernels) return;\r\n    // perform on next run loop - for some reason we dont get lose context events\r\n    // if webGl is created and destroyed in the same run loop.\r\n    setTimeout(() => {\r\n      for (let i = 0; i < this.kernels.length; i++) {\r\n        this.kernels[i].destroy(true); // remove canvas if exists\r\n      }\r\n      // all kernels are associated with one context, go ahead and take care of it here\r\n      let firstKernel = this.kernels[0];\r\n      if (firstKernel) {\r\n        // if it is shortcut\r\n        if (firstKernel.kernel) {\r\n          firstKernel = firstKernel.kernel;\r\n        }\r\n        if (firstKernel.constructor.destroyContext) {\r\n          firstKernel.constructor.destroyContext(this.context);\r\n        }\r\n      }\r\n    }, 0);\r\n  }\r\n}\r\n\r\nfunction upgradeDeprecatedCreateKernelSettings(settings) {\r\n  if (!settings) {\r\n    return {};\r\n  }\r\n  const upgradedSettings = Object.assign({}, settings);\r\n\r\n  if (settings.hasOwnProperty('floatOutput')) {\r\n    warnDeprecated('setting', 'floatOutput', 'precision');\r\n    upgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';\r\n  }\r\n  if (settings.hasOwnProperty('outputToTexture')) {\r\n    warnDeprecated('setting', 'outputToTexture', 'pipeline');\r\n    upgradedSettings.pipeline = Boolean(settings.outputToTexture);\r\n  }\r\n  if (settings.hasOwnProperty('outputImmutable')) {\r\n    warnDeprecated('setting', 'outputImmutable', 'immutable');\r\n    upgradedSettings.immutable = Boolean(settings.outputImmutable);\r\n  }\r\n  if (settings.hasOwnProperty('floatTextures')) {\r\n    warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');\r\n    upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);\r\n  }\r\n  return upgradedSettings;\r\n}\r\n","import { GPU } from './base-gpu';\r\nimport { alias } from './alias';\r\nimport { utils } from './utils';\r\nimport * as common from './common';\r\nimport { Input, input } from './input';\r\nimport { Texture } from './texture';\r\nimport { FunctionBuilder } from './backend/function-builder';\r\nimport { FunctionNode } from './backend/function-node';\r\nimport { CPUFunctionNode } from './backend/cpu/function-node';\r\nimport { CPUKernel } from './backend/cpu/kernel';\r\nimport { WebGLFunctionNode } from './backend/web-gl/function-node';\r\nimport { WebGLKernel } from './backend/web-gl/kernel';\r\nimport { WebGL2FunctionNode } from './backend/web-gl2/function-node';\r\nimport { WebGL2Kernel } from './backend/web-gl2/kernel';\r\nimport { GLKernel } from './backend/gl/kernel';\r\nimport { Kernel } from './backend/kernel';\r\n\r\n/**\r\n * Stub for HeadlessGL.\r\n */\r\nclass HeadlessGLKernel extends WebGLKernel {\r\n  static get isSupported() { return false }\r\n  static isContextMatch() { return false }\r\n  static getIsTextureFloat() { return false }\r\n  static getIsDrawBuffers() { return false }\r\n  static getChannelCount() { return 1 }\r\n  static get testCanvas() { return null }\r\n  static get testContext() { return null }\r\n  static get features() { return null }\r\n  static setupFeatureChecks() {}\r\n  static destroyContext() {}\r\n  initCanvas() { return {} }\r\n  initContext() { return null }\r\n  toString() { return '' }\r\n  initExtensions() {}\r\n  build() {}\r\n  destroyExtensions() {}\r\n  setOutput() {}\r\n\r\n  static getFeatures() {\r\n    return Object.freeze({\r\n      isFloatRead: false,\r\n      isIntegerDivisionAccurate: false,\r\n      isTextureFloat: false,\r\n      isDrawBuffers: false,\r\n      kernelMap: false,\r\n      channelCount: 1,\r\n    });\r\n  }\r\n};\r\n\r\nconst lib = GPU;\r\nlib.alias = alias;\r\nlib.CPUFunctionNode = CPUFunctionNode;\r\nlib.CPUKernel = CPUKernel;\r\nlib.FunctionBuilder = FunctionBuilder;\r\nlib.FunctionNode = FunctionNode;\r\nlib.HeadlessGLKernel = HeadlessGLKernel;\r\nlib.Input = Input;\r\nlib.input = input;\r\nlib.Texture = Texture;\r\nlib.utils = { ...common, ...utils };\r\nlib.WebGL2FunctionNode = WebGL2FunctionNode;\r\nlib.WebGL2Kernel = WebGL2Kernel;\r\nlib.WebGLFunctionNode = WebGLFunctionNode;\r\nlib.WebGLKernel = WebGLKernel;\r\nlib.GLKernel = GLKernel;\r\nlib.Kernel = Kernel;\r\n\r\nexport default lib;\r\n","import { utils } from './utils';\r\n\r\n/**\r\n * @param name\r\n * @param source\r\n * @returns {Function}\r\n */\r\nexport function alias(name, source) {\r\n  const fnString = source.toString();\r\n  return new Function(`return function ${ name } (${ utils.getArgumentNamesFromString(fnString).join(', ') }) {\r\n  ${ utils.getFunctionBodyFromString(fnString) }\r\n}`)();\r\n}\r\n"],"names":["setupArguments","args","newArguments","Array","length","i","arg","toArray","mock1D","arguments","row","Float32Array","this","output","x","thread","y","z","_fn","apply","mock2D","matrix","mock2DGraphical","mock3D","cube","apiDecorate","kernel","setOutput","setupOutput","graphical","setupGraphical","toJSON","Error","setConstants","flag","constants","setGraphical","setCanvas","canvas","setContext","context","exec","Promise","resolve","reject","e","getPixels","flip","pixels","width","height","halfHeight","bytesPerRow","temp","Uint8ClampedArray","result","slice","topOffset","bottomOffset","set","subarray","copyWithin","flipPixels","_imageData","data","color","r","g","b","a","Math","floor","index","_colorData","setWarnVarUsage","setOptimizeFloatMemory","setArgumentTypes","setDebug","setLoopMaxIterations","setPipeline","setPrecision","setImmutable","setFunctions","addSubKernel","destroy","validateSettings","createImageData","fn","settings","ARGUMENT_NAMES","FUNCTION_NAME","STRIP_COMMENTS","isFunction","funcObj","getFunctionNameFromString","funcStr","trim","functionToIFunction","source","sourceString","toString","argumentTypes","isArray","getArgumentNamesFromString","map","name","returnType","warnDeprecated","type","oldName","newName","msg","console","warn","isFunctionString","toLowerCase","fnStr","replace","indexOf","match","array","isNaN","erectMemoryOptimized2DFloat","yResults","offset","erectMemoryOptimized3DFloat","depth","zResults","getAstString","ast","lines","split","start","loc","end","line","push","substring","column","join","Input","[object Object]","value","size","Int32Array","w","h","d","Texture","texture","dimensions","constructor","deleteTexture","getSystemEndianness","ArrayBuffer","Uint32Array","c","Uint8Array","_systemEndianness","getVariableType","strictIntegers","nodeName","Boolean","Number","isInteger","hasOwnProperty","utils","systemEndianness","getFunctionBodyFromString","lastIndexOf","obj","key","Object","prototype","call","isActiveClone","clone","texelCount","optimizeFloatMemory","precision","ceil","closestSquareDimensions","sqrt","high","low","bitRatio","roundTo","n","pad","ret","dim","reverse","from","target","l","flatten4dArrayTo","flatten3dArrayTo","flatten2dArrayTo","part","buffer","byteOffset","props","getOwnPropertyNames","getPrototypeOf","linesToString","erectPackedFloat","erect2DPackedFloat","xStart","xEnd","erect3DPackedFloat","erectMemoryOptimizedFloat","erectFloat","xResults","erect2DFloat","erect3DFloat","erectArray2","xResultsMax","erect2DArray2","XResultsMax","erect3DArray2","erectArray3","erect2DArray3","erect3DArray3","erectArray4","erect2DArray4","erect3DArray4","flattenFunctionToString","findDependency","thisLookup","doNotDefine","flattened","parse","functionDependencies","flatten","results","body","id","params","declarations","init","properties","declaration","test","lookups","lookup","property","kind","callee","object","foundSource","argument","left","operator","right","prefix","expression","raw","computed","update","consequent","elements","alternate","flattenedFunctionDependencies","functionDependency","Kernel","isSupported","useLegacyEncoder","fallbackRequested","onRequestFallback","argumentNames","argumentSizes","argumentBitRatios","kernelArguments","kernelConstants","debug","loopMaxIterations","constantTypes","constantBitRatios","dynamicArguments","dynamicOutput","checkContext","gpu","functions","nativeFunctions","injectedNative","subKernels","validate","immutable","pipeline","tactic","plugins","leadingReturnStatement","followingReturnStatement","fixIntegerDivisionAccuracy","warnVarUsage","p","initCanvas","initContext","initPlugins","argType","getBitRatio","needsConstantTypes","max","setDynamicOutput","setDynamicArguments","argumentIndex","subKernel","removeCanvasReferences","Int8Array","Uint16Array","Int16Array","threadDim","argumentsTypes","pluginNames","plugin","FunctionBuilder","FunctionNode","extraNodeOptions","kernelConstant","needsArgumentType","functionName","functionBuilder","assignArgumentType","lookupReturnType","requestingNode","lookupFunctionArgumentTypes","lookupFunctionArgumentName","lookupFunctionArgumentBitRatio","argumentName","triggerImplyArgumentType","argumentType","triggerTrackArgumentSynonym","calleeFunctionName","trackArgumentSynonym","lookupArgumentSynonym","originFunctionName","onFunctionCall","trackFunctionCall","nodeOptions","assign","isRootKernel","onNestedFunction","nestedFunction","traceFunctionAST","addFunctionNode","rootNodeOptions","functionNodes","fromJSON","rootNode","subKernelNodes","isSubKernel","functionMap","nativeFunctionNames","lookupChain","argumentChain","functionNodeDependencies","functionCalls","nativeFunction","functionNode","retList","functionIndex","calledFunctions","traceFunctionCalls","dependantFunctionName","splice","getPrototypes","getPrototypesFromFunctionNames","keys","functionList","node","nativeIndex","jsonFunctionNodes","jsonFunctionNode","getStringFromFunctionNames","_isNativeFunction","_lookupNativeFunctionReturnType","_isFunction","_getFunction","j","getType","pop","getJsAST","_getNativeFunction","argumentSynonym","synonymIndex","fnNode","calleeArgumentName","synonymUseIndex","Set","add","subKernelNode","called","functionCallIndex","list","FunctionTracer","runningContexts","contexts","identifiers","returnStatements","inLoopInit","scan","currentContext","run","newContext","origin","forceInteger","assignable","discriminant","cases","states","triggerImplyArgumentBitRatio","strictTypingChecking","literalTypes","_string","_internalVariableNames","state","astMemberExpressionUnroll","firstExpression","expressions","astErrorOutput","inParser","parser","freeze","locations","functionAST","dependencies","getDependencies","valueType","realType","isSafe","isSafeDependencies","identifier","getDeclaration","typeLookupMap","constantName","astGeneric","literalKey","isAstMathFunction","inferArgumentTypesIfNeeded","isState","rightType","lastType","isAstVariable","getVariableSignature","findIdentifierOrigin","getLookupType","getConstantType","isAstMathVariable","lastReturn","findLastReturn","every","dependency","isNotSafe","Infinity","details","getMemberExpressionDetails","signature","xProperty","yProperty","zProperty","unshift","signatureString","retArr","astFunctionDeclaration","astFunctionExpression","astReturnStatement","astLiteral","astBinaryExpression","astIdentifierExpression","astAssignmentExpression","astExpressionStatement","astEmptyStatement","astBlockStatement","astIfStatement","astSwitchStatement","astBreakStatement","astContinueStatement","astForStatement","astWhileStatement","astDoWhileStatement","astVariableDeclaration","astVariableDeclarator","astThisExpression","astSequenceExpression","astUnaryExpression","astUpdateExpression","astLogicalExpression","astMemberExpression","astCallExpression","astArrayExpression","astDebuggerStatement","astConditionalExpression","error","debugString","splitLines","substr","lineBefore","arrNode","isChildFunction","astFunction","esNode","eNode","brNode","crNode","varDecNode","firstDeclaration","markupType","typeMap","iVarDecNode","sNode","uNode","checkAndUpconvertBitwiseUnary","logNode","variableSignature","astToFind","stack","atNode","shift","Float","Integer","Array(2)","Array(3)","Array(4)","Array2D","Array3D","HTMLImage","HTMLVideo","HTMLImageArray","NumberTexture","MemoryOptimizedNumberTexture","Array1D(2)","Array1D(3)","Array1D(4)","Array2D(2)","Array2D(3)","Array2D(4)","Array3D(2)","Array3D(3)","Array3D(4)","ArrayTexture(1)","ArrayTexture(2)","ArrayTexture(3)","ArrayTexture(4)","CPUFunctionNode","idtNode","forNode","initArr","testArr","updateArr","bodyArr","pushState","includes","popState","iVariableName","getInternalVariableName","whileNode","doWhileNode","assNode","bNode","varWarn","ifNode","tNode","mNode","markupName","isInput","constant","targetTypes","arrLen","subNode","cpuKernelString","cpuKernel","header","thisProperties","beforeReturn","useFunctionKeyword","JSON","stringify","types","constantsToString","colorFn","propertyName","getPixelsFn","constantKeys","flattenedImageTo3DArray","_imageTo3DArray","flattenedImageTo2DArray","_mediaTo2DArray","_kernelString","CPUKernel","features","kernelMap","isIntegerDivisionAccurate","mode","combinedKernel","super","mergeSettings","translatedSources","document","createElement","OffscreenCanvas","getContext","getDimensions","checkOutput","fromKernel","getKernelResultType","setupConstants","translateSource","kernelString","getKernelString","log","Function","bind","kernelThreadString","filter","_getLoopMaxString","_processConstants","_processArguments","_graphicalKernelBody","_resultKernelBody","parseInt","variableName","media","videoWidth","videoHeight","ctx","drawImage","pixelsData","getImageData","imageArray","pixel","images","imagesArray","_resultKernel1DLoop","_kernelOutput","_resultKernel2DLoop","_resultKernel3DLoop","_graphicalKernel2DLoop","_graphicalOutput","constructorString","_getKernelResultTypeConstructorString","_mapSubKernels","removeCanvasReference","json","GLTextureFloat","gl","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","readPixels","RGBA","FLOAT","renderRawOutput","renderValues","GLTextureArray2Float","GLTextureArray2Float2D","GLTextureArray2Float3D","GLTextureArray3Float","GLTextureArray3Float2D","GLTextureArray3Float3D","GLTextureArray4Float","GLTextureArray4Float2D","GLTextureArray4Float3D","GLTextureFloat2D","GLTextureFloat3D","GLTextureMemoryOptimized","GLTextureMemoryOptimized2D","GLTextureMemoryOptimized3D","GLTextureUnsigned","UNSIGNED_BYTE","GLTextureUnsigned2D","GLTextureUnsigned3D","GLTextureGraphical","GLKernel","testContext","testCanvas","build","renderOutput","v1","v2","fix","floatTextures","isStartingVariableName","isVariableChar","char","nextChar","lastKernel","texSize","bytes","splitArray","transferValues","formatValues","TextureConstructor","translatedSource","renderStrategy","compiledFragmentShader","compiledVertexShader","maxTextureSize","readPackedPixelsToUint8Array","readPackedPixelsToFloat32Array","renderTexture","renderKernels","renderKernelsToTextures","PackedPixelTo3DFloat","PackedPixelTo2DFloat","PackedPixelToFloat","requestFallback","renderKernelsToArrays","readFloatPixelsToFloat32Array","FloatTexture","MemoryOptimizedFloatPixelToMemoryOptimized3DFloat","MemoryOptimizedFloatPixelToMemoryOptimized2DFloat","MemoryOptimizedFloatPixelToMemoryOptimizedFloat","FloatPixelTo3DArray2","FloatPixelTo2DArray2","FloatPixelToArray2","FloatPixelTo3DArray3","FloatPixelTo2DArray3","FloatPixelToArray3","FloatPixelTo3DArray4","FloatPixelTo2DArray4","FloatPixelToArray4","FloatPixelTo3DFloat","FloatPixelTo2DFloat","FloatPixelToFloat","getMainResultNumberTexture","getMainResultArray2Texture","getMainResultArray3Texture","getMainResultArray4Texture","getMainResultGraphical","getMainResultMemoryOptimizedFloats","getMainResultTexture","getMainResultPackedPixels","getMainResultKernelNumberTexture","getMainResultSubKernelNumberTexture","getMainResultKernelArray2Texture","getMainResultSubKernelArray2Texture","getMainResultKernelArray3Texture","getMainResultSubKernelArray3Texture","getMainResultKernelArray4Texture","getMainResultSubKernelArray4Texture","outputTexture","subKernelOutputTextures","program","getKernelTextureSize","updateMaxTexSize","viewport","maxTexSize","_setupOutputTexture","_setupSubOutputTextures","PackedPixelToUint8Array","Symbol","PackedTexture","FloatPixelToFloat32Array","int","float","vec2","vec3","vec4","WebGLFunctionNode","castLiteralToFloat","castValueToInteger","castLiteralToInteger","round","checkAndUpconvertOperator","castValueToFloat","leftType","operatorMap","literalResult","bitwiseResult","checkAndUpconvertBitwiseOperators","foundOperator","%","**","&","|","^","<<",">>",">>>","~","inForLoopInit","info","actualType","declarationResult","varName","fallingThrough","defaultResult","movingDefaultToEnd","pastFirstIf","memberExpressionPropertyMarkup","memberExpressionXYZ","isMathFunction","functionMatch","functionReplace","targetType","LiteralInteger","===","!==","onBeforeRun","setUniform1f","random","functionReturnType","fragmentShader","vertexShader","glWiretap","options","contextName","throwGetError","useTrackablePrimitives","readPixelsFile","recording","variables","onReadPixels","onUnrecognizedArgumentLookup","proxy","Proxy","get","addComment","checkThrowError","readPixelsVariableName","insertVariable","reset","setIndent","getContextVariableName","indent","getError","contextVariables","extension","getExtension","tappedExtension","glExtensionWiretap","getEntity","targetVariableName","getVariableName","argumentAsStrings","writePPM","argumentsToString","addVariable","drawBuffers","methodCallToString","trackablePrimitive","entityNames","imageCount","spaces","repeat","sourceVariable","imageVariable","method","getExtensionEntity","drawBuffersWEBGL","extensionEntityNames","hasLines","hasSingleQuotes","hasDoubleQuotes","instantiationString","argumentToString","module","window","toStringWithoutUtils","glKernelString","originKernel","setupContextString","destroyContextString","postResult","targetName","subKernelsResultVariableSetup","subKernelsResultIndex","getRenderString","findKernelValue","forEach","kernelArgument","uploadValue","imageIndex","flattenTo","getStringValueHandler","textureName","getToArrayString","subKernelResult","subKernelTextureName","getGetPixelsString","constantsUpload","readBackValue","kernelResult","kernelValues","values","uploadedValues","HTMLImageElement","kernelValue","variableIndex","variable","KernelValue","onRequestContextHandle","onUpdateValueMismatch","contextHandle","forceUploadEachRun","WebGLKernelValue","dimensionsId","sizeId","initialValueConstructor","onRequestTexture","onRequestIndex","textureSize","setupTexture","getTransferArrayType","Float64Array","Type","valuesFlat","WebGLKernelValueBoolean","setUniform1i","WebGLKernelValueFloat","WebGLKernelValueInteger","WebGLKernelValueHTMLImage","checkSize","requestTexture","inputImage","activeTexture","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","pixelStorei","UNPACK_FLIP_Y_WEBGL","texImage2D","WebGLKernelValueDynamicHTMLImage","setUniform3iv","setUniform2iv","updateValue","WebGLKernelValueHTMLVideo","WebGLKernelValueDynamicHTMLVideo","WebGLKernelValueSingleInput","getMemoryOptimizedFloatTextureSize","uploadArrayLength","input","WebGLKernelValueUnsignedInput","getMemoryOptimizedPackedTextureSize","TranserArrayType","preUploadValue","WebGLKernelValueDynamicUnsignedInput","WebGLKernelValueMemoryOptimizedNumberTexture","inputTexture","WebGLKernelValueDynamicMemoryOptimizedNumberTexture","WebGLKernelValueNumberTexture","WebGLKernelValueDynamicNumberTexture","WebGLKernelValueSingleArray","WebGLKernelValueSingleArray1DI","setShape","valueDimensions","WebGLKernelValueDynamicSingleArray1DI","WebGLKernelValueSingleArray2DI","WebGLKernelValueDynamicSingleArray2DI","WebGLKernelValueSingleArray3DI","WebGLKernelValueDynamicSingleArray3DI","WebGLKernelValueSingleArray2","setUniform2fv","WebGLKernelValueSingleArray3","setUniform3fv","WebGLKernelValueSingleArray4","setUniform4fv","WebGLKernelValueUnsignedArray","WebGLKernelValueDynamicUnsignedArray","kernelValueMaps","unsigned","dynamic","static","single","testExtensions","triangleNoise","canvases","maxTexSizes","WebGLKernel","setupFeatureChecks","isContextMatch","OES_texture_float","OES_texture_float_linear","OES_element_index_uint","WEBGL_draw_buffers","getFeatures","WebGLRenderingContext","isDrawBuffers","getIsDrawBuffers","isFloatRead","getIsFloatRead","getIsIntegerDivisionAccurate","isTextureFloat","getIsTextureFloat","channelCount","getChannelCount","getParameter","MAX_DRAW_BUFFERS_WEBGL","undefined","lookupKernelValueType","endianness","extensions","argumentTextureCount","constantTextureCount","fragShader","vertShader","drawBuffersMap","switchingKernels","onRequestSwitchKernel","textureCache","programUniformLocationCache","uniform1fCache","uniform1iCache","uniform2fCache","uniform2fvCache","uniform2ivCache","uniform3fvCache","uniform3ivCache","uniform4fvCache","uniform4ivCache","alpha","antialias","pluginsToUse","some","pluginName","WEBGL_color_buffer_float","checkTextureSize","canvasIndex","getPrototypeString","requiredChannels","returnTypes","getReturnTypes","needsArgumentTypes","textureIndexes","createTexture","TEXTURE0","forceUploadKernelConstants","initExtensions","failureResult","pickRenderStrategy","enable","SCISSOR_TEST","getVertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getFragmentShader","FRAGMENT_SHADER","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createProgram","attachShader","linkProgram","vertices","texCoords","texCoordOffset","byteLength","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","STATIC_DRAW","bufferSubData","aPosLoc","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","aTexCoordLoc","useProgram","getSubKernelResultType","scissor","setUniform2f","bindRenderbuffer","RENDERBUFFER","drawArrays","TRIANGLE_STRIP","getUniformLocation","uniform1f","uniform1i","value1","value2","cache","uniform2f","uniform2fv","uniform2iv","uniform3fv","uniform3iv","uniform4iv","uniform4fv","HEADER","_getHeaderString","LOOP_MAX","PLUGINS","_getPluginsString","CONSTANTS","_getConstantsString","DECODE32_ENDIANNESS","_getDecode32EndiannessString","ENCODE32_ENDIANNESS","_getEncode32EndiannessString","DIVIDE_WITH_INTEGER_CHECK","_getDivideWithIntegerCheckString","INJECTED_NATIVE","_getInjectedNative","MAIN_CONSTANTS","_getMainConstantsString","MAIN_ARGUMENTS","_getMainArgumentsString","KERNEL","MAIN_RESULT","getMainResultString","FLOAT_TACTIC_DECLARATION","getFloatTacticDeclaration","INT_TACTIC_DECLARATION","getIntTacticDeclaration","SAMPLER_2D_TACTIC_DECLARATION","getSampler2DTacticDeclaration","SAMPLER_2D_ARRAY_TACTIC_DECLARATION","getSampler2DArrayTacticDeclaration","getSource","kernelResultDeclaration","getMainResultKernelPackedPixels","getMainResultSubKernelPackedPixels","channels","channel","getMainResultKernelMemoryOptimizedFloats","getMainResultSubKernelMemoryOptimizedFloats","src","artifact","replaceArtifacts","_getFragShaderArtifactMap","_getVertShaderArtifactMap","deleteBuffer","deleteFramebuffer","deleteShader","deleteProgram","idx","destroyExtensions","loseContext","WebGL2FunctionNode","WebGL2KernelValueBoolean","WebGL2KernelValueFloat","WebGL2KernelValueInteger","variablePrecision","getVariablePrecisionString","WebGL2KernelValueHTMLImage","WebGL2KernelValueDynamicHTMLImage","WebGL2KernelValueHTMLImageArray","TEXTURE_2D_ARRAY","texImage3D","xOffset","yOffset","imageDepth","texSubImage3D","WebGL2KernelValueDynamicHTMLImageArray","WebGL2KernelValueHTMLVideo","WebGL2KernelValueDynamicHTMLVideo","WebGL2KernelValueSingleInput","RGBA32F","WebGL2KernelValueDynamicMemoryOptimizedNumberTexture","WebGL2KernelValueNumberTexture","WebGL2KernelValueDynamicNumberTexture","WebGL2KernelValueSingleArray","WebGL2KernelValueSingleArray1DI","WebGL2KernelValueDynamicSingleArray1DI","WebGL2KernelValueSingleArray2DI","WebGL2KernelValueDynamicSingleArray2DI","WebGL2KernelValueSingleArray3DI","WebGL2KernelValueDynamicSingleArray3DI","WebGL2KernelValueSingleArray2","WebGL2KernelValueSingleArray3","WebGL2KernelValueSingleArray4","WebGL2Kernel","EXT_color_buffer_float","WebGL2RenderingContext","getMaxTextureSize","MAX_DRAW_BUFFERS","MAX_TEXTURE_SIZE","texStorage2D","R32F","RG32F","bindKernelToShortcut","shortcut","allPropertiesOf","__defineGetter__","__defineSetter__","kernelOrder","kernelTypes","internalKernels","webgl2","webgl","upgradeDeprecatedCreateKernelSettings","upgradedSettings","floatOutput","outputToTexture","outputImmutable","lib","isGPUSupported","isKernelMapSupported","isOffscreenCanvasSupported","Worker","importScripts","isWebGLSupported","isWebGL2Supported","isHeadlessGLSupported","isCanvasSupported","HTMLCanvasElement","isGPUHTMLImageArraySupported","isSinglePrecisionSupported","kernels","chooseKernel","addFunction","addNativeFunction","ExternalKernel","devKernel","gpuMock","switchableKernels","settingsCopy","fallbackKernel","kernelRun","dynamicArgument","replaceKernel","mergedSettings","existingKernel","newKernel","accept","replacementKernel","kernelRunShortcut","createKernel","firstKernel","nativeFunctionArguments","nativeFunctionReturnType","setTimeout","destroyContext","alias","fnString","HeadlessGLKernel","common"],"mappings":"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"}